AWSTemplateFormatVersion: 2010-09-09
Description: IoT Hub portal deployment template

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: "Solution"
        Parameters:
          - UniqueSolutionPrefix
      - Label: 
          default: "Amazon Web Services resources access"
        Parameters:
          - awsAccess
          - awsAccessSecretkey
      - Label: 
          default: "PostgreSQL"
        Parameters:
          - pgsqlAdminLogin
          - pgsqlAdminPassword
      - Label: 
          default: "Open ID"
        Parameters:
          - openIdApiClientId
          - openIdClientId
          - openIdAuthority
          - openIdMetadataURL
          - openIdScopeName
    ParameterLabels:
      ParameterLabel

Parameters:
  UniqueSolutionPrefix:
    Type: String
    Description: Prefix used for resource names. Should be unique as this will also be used for bucket and database name. Should not contain uppercase letters
    MinLength: '1'
    MaxLength: '20'
    ConstraintDescription: Should be less than 20 letters
    AllowedPattern: '^[a-z]+$'
  pgsqlAdminLogin:
    Type: String
    Description: PostgreSQL user
    MinLength: '1'
    MaxLength: '30'
  pgsqlAdminPassword:
    Type: String
    NoEcho: 'true'
    Description: PostgreSQL password
    MinLength: '8'
    MaxLength: '41'
  awsAccess:
    Type: String
    Description: AWS Access Secret
    NoEcho: 'true'
  awsAccessSecretkey:
    Type: String
    Description: AWS Access Secret Key
    NoEcho: 'true'
  openIdApiClientId:
    Type: String 
    Description: The Open ID API client ID for the B2C tenant
    Default: iot-portal-api
  openIdClientId:
    Type: String 
    Description: The Open ID client ID for the B2C tenant
    Default: iot-portal
  openIdAuthority:
    Type: String 
    Description: The Open ID Authority
    Default: https://cgigeiotdemoauth.azurewebsites.net/auth/realms/iot-portal
  openIdMetadataURL:
    Type: String 
    Description: The Open ID metadata Url from the Identity provider
    Default: https://cgigeiotdemoauth.azurewebsites.net/auth/realms/iot-portal/.well-known/openid-configuration
  openIdScopeName:
    Type: String 
    Description: The Open ID Scope name
    Default: iot_access

Resources:
#======== S3 Storage ==========
  s3Bucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: !Join [ "-", [!Ref UniqueSolutionPrefix, "bucket"] ] 
        PublicAccessBlockConfiguration:
              BlockPublicAcls: false
              IgnorePublicAcls: false
              BlockPublicPolicy: false
              RestrictPublicBuckets: false
        OwnershipControls:
          Rules:
          - ObjectOwnership: BucketOwnerPreferred
        AccessControl: AwsExecRead
#======== Virtual Private Cloud ==========
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  Subnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/27
      AvailabilityZone: !Join [ "", [!Ref AWS::Region, "a"] ]
  Subnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.32/27
      AvailabilityZone: !Join [ "", [!Ref AWS::Region, "b"] ]

#======== PostgreSQL database ==========
  PostgreSQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Join [ "-", [!Ref UniqueSolutionPrefix, "pgdb"] ] 
      AllocatedStorage: '20' 
      DBInstanceClass: 'db.t2.micro'
      Engine: postgres
      EngineVersion: 12
      LicenseModel: postgresql-license
      MasterUsername: !Ref pgsqlAdminLogin
      MasterUserPassword: !Ref pgsqlAdminPassword
      DBName: !Join [ "_", [!Ref UniqueSolutionPrefix, "cgigeiotdemo"] ] 
      VPCSecurityGroups:
        - !Ref PgSQLSecurityGroup
      DBSubnetGroupName: !Ref PgSQLSubnetGroup

  PgSQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the database instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  PgSQLSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Join [ "-", [!Ref UniqueSolutionPrefix, "pgSqlsubnetgroup"] ]
      DBSubnetGroupDescription: Subnets available for the database
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      
#InstanceRoleArn
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [!Ref UniqueSolutionPrefix, "AppRunner"] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apprunner.amazonaws.com
                - tasks.apprunner.amazonaws.com
                - build.apprunner.amazonaws.com
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Join
                  - ''
                  - - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:'
                    - !Ref UniqueSolutionPrefix
                    - '-*'
        - PolicyName: AmazonElasticContainerRegistryPublicReadOnly
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr-public:GetAuthorizationToken'
                  - 'sts:GetServiceBearerToken'
                  - 'ecr-public:BatchCheckLayerAvailability'
                  - 'ecr-public:GetRepositoryPolicy'
                  - 'ecr-public:DescribeRepositories'
                  - 'ecr-public:DescribeRegistries'
                  - 'ecr-public:DescribeImages'
                  - 'ecr-public:DescribeImageTags'
                  - 'ecr-public:GetRepositoryCatalogData'
                  - 'ecr-public:GetRegistryCatalogData'
                Resource: '*'
        - PolicyName: AWSAppRunnerFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'iam:CreateServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/apprunner.amazonaws.com/AWSServiceRoleForAppRunner'
                Condition:
                  StringLike:
                    iam:AWSServiceName: 'apprunner.amazonaws.com'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource: '*'
                Condition:
                  StringLike:
                    iam:PassedToService: 'apprunner.amazonaws.com'
              - Sid: AppRunnerAdminAccess
                Effect: Allow
                Action: 'apprunner:*'
                Resource: '*'
        - PolicyName: AWSAppRunnerServicePolicyForECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                Resource: '*'

# AWS Secrets Manager
  SMAWSKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join [ "-", [!Ref UniqueSolutionPrefix, "AWSKey"] ]
      SecretString: !Sub '${awsAccess}'
  SMAWSSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join [ "-", [!Ref UniqueSolutionPrefix, "AWSSecretKey"] ]
      SecretString: !Sub '${awsAccessSecretkey}'
  SMPostgreSQLConnectionString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join [ "-", [!Ref UniqueSolutionPrefix, "PostgreSQLConnectionString"] ]
      SecretString: !Join
          - ""
          - - 'Server='
            - !GetAtt PostgreSQLDB.Endpoint.Address
            - !Sub ';Database=${UniqueSolutionPrefix}_cgigeiotdemo;Port=5432;User Id=${pgsqlAdminLogin};Password=${pgsqlAdminPassword};Pooling=true;Connection Lifetime=0;Command Timeout=0;'
  SMS3StorageConnectionString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join [ "-", [!Ref UniqueSolutionPrefix, "S3StorageConnectionString"] ]
      SecretString: !Join
          - ""
          - - !Sub 'https://s3.${AWS::Region}.amazonaws.com/'
            - !Ref UniqueSolutionPrefix
            - '-bucket'
            

#============= App Runner - To Launch the App ==============
  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName: !Join [ "-", [!Ref UniqueSolutionPrefix, "portal"] ]
      InstanceConfiguration:
        Cpu: 1 vCPU
        Memory: 2 GB
        InstanceRoleArn: !GetAtt InstanceRole.Arn
      HealthCheckConfiguration:
        Protocol: "HTTP"
        Path: "/"
        Interval: 20
        Timeout: 5
        HealthyThreshold: 2
        UnhealthyThreshold: 5
      NetworkConfiguration: 
        EgressConfiguration: 
          EgressType: VPC
          VpcConnectorArn: !Ref AppRunnerServiceVPCConnector
      SourceConfiguration:
        AutoDeploymentsEnabled: false
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt InstanceRole.Arn
        ImageRepository: 
          ImageConfiguration: 
            Port: 80 # This is The port that your application listens to in the container. It can be changed (To see)
            RuntimeEnvironmentSecrets: 
              - Name: AWS__Access
                Value: !Ref SMAWSKey
              - Name: AWS__AccessSecret
                Value: !Ref SMAWSSecretKey
              - Name: PostgreSQL__ConnectionString
                Value: !Ref SMPostgreSQLConnectionString
              - Name: AWS__S3Storage__ConnectionString
                Value: !Ref SMS3StorageConnectionString
            RuntimeEnvironmentVariables: 
              - Name: AWS__Region
                Value: !Ref AWS::Region
              - Name: AWS__BucketName
                Value: !Join [ "-", [!Ref UniqueSolutionPrefix, "bucket"] ] 
              - Name: OIDC__ApiClientId
                Value: !Sub '${openIdApiClientId}'
              - Name: OIDC__ClientId
                Value: !Sub '${openIdClientId}'
              - Name: OIDC__Authority
                Value: !Sub '${openIdAuthority}'
              - Name: OIDC__MetadataUrl
                Value: !Sub '${openIdMetadataURL}'
              - Name: OIDC__Scope
                Value: !Sub '${openIdScopeName}'
              - Name: CloudProvider
                Value: AWS
              - Name: PortalName
                Value: IoT Portal DEMO - AWS
          ImageIdentifier: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/iot-hub-portal:latest'
          ImageRepositoryType: ECR
  
  AppRunnerServiceVPCConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      VpcConnectorName: !Join [ "-", [!Ref UniqueSolutionPrefix, "portal-vpc-connector"] ]
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref PgSQLSecurityGroup

#GreenGras role script
  GreenGrasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [!Ref UniqueSolutionPrefix, "GreenGrass"] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: greengrass.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
      Policies:
        - PolicyName: ECRPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"