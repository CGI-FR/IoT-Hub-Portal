AWSTemplateFormatVersion: 2010-09-09
Description: IoT Hub portal deployment

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Amazon Web Services resources access
        Parameters:
          - awsAccess
          - awsAccessSecretkey
      - Label:
          default: PostgreSQL
        Parameters:
          - pgsqlAdminLogin
          - pgsqlAdminPassword
      - Label:
          default: Open ID
        Parameters:
          - openIdApiClientId
          - openIdClientId
          - openIdAuthority
          - openIdMetadataURL
          - openIdScopeName
    ParameterLabels: ParameterLabel

Parameters:
  pgsqlAdminLogin:
    Type: String
    Description: PostgreSQL user
    MinLength: "1"
    MaxLength: "30"
  pgsqlAdminPassword:
    Type: String
    NoEcho: "true"
    Description: PostgreSQL password
    MinLength: "8"
    MaxLength: "41"
  awsAccess:
    Type: String
    Description: AWS Access Secret
    NoEcho: "true"
  awsAccessSecretkey:
    Type: String
    Description: AWS Access Secret Key
    NoEcho: "true"
  openIdApiClientId:
    Type: String
    Description: The Open ID API client ID for the B2C tenant
  openIdClientId:
    Type: String
    Description: The Open ID client ID for the B2C tenant
  openIdAuthority:
    Type: String
    Description: The Open ID Authority
  openIdMetadataURL:
    Type: String
    Description: The Open ID metadata Url from the Identity provider
  openIdScopeName:
    Type: String
    Description: The Open ID Scope name

Resources:
  #======== S3 Storage ==========

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      AccessControl: AwsExecRead

  #======== Virtual Private Cloud ==========

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "vpc"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/27
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "priv-snet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.32/27
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "priv-snet-2"

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.64/27
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "priv-snet-3"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.224/27
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "pub-snet"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "igw"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "pub-rt"

  InternetRoutePublicSubnet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  NatGwEip:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "natgw-eip"

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt: NatGwEip.AllocationId
      SubnetId:
        Ref: PublicSubnet
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "natgw"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "priv-rt"

  InternetRoutePrivateSubnet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      NatGatewayId:
        Ref: NatGateway
      DestinationCidrBlock: 0.0.0.0/0

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

  #======== PostgreSQL database ==========

  PostgreSQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "pgdb"
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.micro"
      Engine: postgres
      EngineVersion: 12
      LicenseModel: postgresql-license
      MasterUsername:
        Ref: pgsqlAdminLogin
      MasterUserPassword:
        Ref: pgsqlAdminPassword
      DBName:
        Fn::Join:
          - "_"
          - - Ref: "AWS::StackName"
            - "db"
      VPCSecurityGroups:
        - Ref: PgSQLSecurityGroup
      DBSubnetGroupName:
        Ref: PgSQLSubnetGroup
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "database"

  PgSQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Databse security group
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId:
            Fn::GetAtt: AppRunnerSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "database-sg"

  PgSQLSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "database-snetgroup"
      DBSubnetGroupDescription: Database subnet group
      SubnetIds:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "db-snet-group"

  #======== Secrets ==========

  SMAWSKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "AWSKey"
      SecretString:
        Fn::Sub: "${awsAccess}"

  SMAWSSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "AWSSecretKey"
      SecretString:
        Fn::Sub: "${awsAccessSecretkey}"

  SMPostgreSQLConnectionString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "PostgreSQLConnectionString"
      SecretString:
        Fn::Join:
          - ""
          - - "Server="
            - Fn::GetAtt: PostgreSQLDB.Endpoint.Address
            - Fn::Sub: ";Database=${AWS::StackName}_db;Port=5432;User Id=${pgsqlAdminLogin};Password=${pgsqlAdminPassword};Pooling=true;Connection Lifetime=0;Command Timeout=0;"

  SMS3StorageConnectionString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "S3StorageConnectionString"
      SecretString: !
        Fn::Join:
          - ""
          - - Fn::Sub: "https://s3.${AWS::Region}.amazonaws.com/"
            - Ref: "AWS::StackName"
            - "-bucket"

  #============= App Runner ==============

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "AppRunner"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apprunner.amazonaws.com
                - tasks.apprunner.amazonaws.com
                - build.apprunner.amazonaws.com
                - cloudformation.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: SMPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  Fn::Join:
                    - ""
                    - - Fn::Sub: "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:"
                      - Ref: "AWS::StackName"
                      - "-*"
        - PolicyName: AmazonElasticContainerRegistryPublicReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr-public:GetAuthorizationToken"
                  - "sts:GetServiceBearerToken"
                  - "ecr-public:BatchCheckLayerAvailability"
                  - "ecr-public:GetRepositoryPolicy"
                  - "ecr-public:DescribeRepositories"
                  - "ecr-public:DescribeRegistries"
                  - "ecr-public:DescribeImages"
                  - "ecr-public:DescribeImageTags"
                  - "ecr-public:GetRepositoryCatalogData"
                  - "ecr-public:GetRegistryCatalogData"
                Resource: "*"
        - PolicyName: AWSAppRunnerFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "iam:CreateServiceLinkedRole"
                Resource: "arn:aws:iam::*:role/aws-service-role/apprunner.amazonaws.com/AWSServiceRoleForAppRunner"
                Condition:
                  StringLike:
                    iam:AWSServiceName: "apprunner.amazonaws.com"
              - Effect: Allow
                Action: "iam:PassRole"
                Resource: "*"
                Condition:
                  StringLike:
                    iam:PassedToService: "apprunner.amazonaws.com"
              - Sid: AppRunnerAdminAccess
                Effect: Allow
                Action: "apprunner:*"
                Resource: "*"
        - PolicyName: AWSAppRunnerServicePolicyForECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:DescribeImages"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                Resource: "*"

  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App Runner Security group
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "apprunner-sg"

  AppRunnerDatabaseOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - PgSQLSecurityGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - AppRunnerSecurityGroup
          - GroupId

  AppRunnerToIPV4InternetOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId:
        Fn::GetAtt:
          - AppRunnerSecurityGroup
          - GroupId

  AppRunnerService:
    Type: AWS::AppRunner::Service
    Properties:
      ServiceName:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "portal"
      InstanceConfiguration:
        Cpu: 1024
        Memory: 2048
        InstanceRoleArn:
          Fn::GetAtt: InstanceRole.Arn
      HealthCheckConfiguration:
        Protocol: "HTTP"
        Path: "/"
        Interval: 20
        Timeout: 5
        HealthyThreshold: 2
        UnhealthyThreshold: 5
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn:
            Ref: AppRunnerServiceVPCConnector
      SourceConfiguration:
        AutoDeploymentsEnabled: false
        AuthenticationConfiguration:
          AccessRoleArn:
            Fn::GetAtt: InstanceRole.Arn
        ImageRepository:
          ImageConfiguration:
            Port: 80
            RuntimeEnvironmentSecrets:
              - Name: AWS__Access
                Value:
                  Ref: SMAWSKey
              - Name: AWS__AccessSecret
                Value:
                  Ref: SMAWSSecretKey
              - Name: PostgreSQL__ConnectionString
                Value:
                  Ref: SMPostgreSQLConnectionString
              - Name: AWS__S3Storage__ConnectionString
                Value:
                  Ref: SMS3StorageConnectionString
            RuntimeEnvironmentVariables:
              - Name: AWS__Region
                Value:
                  Ref: AWS::Region
              - Name: AWS__AccountId
                Value:
                  Ref: AWS::AccountId
              - Name: AWS__BucketName
                Value:
                  Fn::Join:
                    - "-"
                    - - Ref: "AWS::StackName"
                      - "bucket"
              - Name: "AWS__GreengrassCoreTokenExchangeRoleAliasName"
                Value:         
                  Fn::Join:
                    - "-"
                    - - Ref: "AWS::StackName"
                      - "GreengrassCoreTokenExchangeRoleAlias"
              - Name: "AWS__GreengrassRequiredRoles__0"
                Value: 
                  Fn::GetAtt: GreengrassCoreTokenExchangeRoleAliasPolicy.Id
              - Name: "AWS__GreengrassRequiredRoles__1"
                Value: 
                  Fn::GetAtt: GreengrassV2IoTThingPolicy.Id
              - Name: OIDC__ApiClientId
                Value:
                  Fn::Sub: "${openIdApiClientId}"
              - Name: OIDC__ClientId
                Value:
                  Fn::Sub: "${openIdClientId}"
              - Name: OIDC__Authority
                Value:
                  Fn::Sub: "${openIdAuthority}"
              - Name: OIDC__MetadataUrl
                Value:
                  Fn::Sub: "${openIdMetadataURL}"
              - Name: OIDC__Scope
                Value:
                  Fn::Sub: "${openIdScopeName}"
              - Name: CloudProvider
                Value: AWS            
          ImageIdentifier:
            Fn::Sub: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/iot-hub-portal:latest"
          ImageRepositoryType: ECR
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "apprunner"

  AppRunnerServiceVPCConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      Subnets:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
      SecurityGroups:
        - Ref: AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "apprunner-vpc-connector"

  #============= IoT Greengrass Role ==============

  GreenGrasRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "GreenGrass"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: greengrass.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
      Policies:
        - PolicyName:
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "ECRPermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"

  GreengrassV2TokenExchangeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "GreengrassV2TokenExchangeRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: credentials.iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: 
            Fn::Join:
              - "-"
              - - Ref: "AWS::StackName"
                - "GreengrassV2TokenExchangeRoleAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Resource: "*"
              Action: 
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:DescribeLogStreams"
                - "s3:GetObject"
                - "s3:GetBucketLocation"

  GreengrassCoreTokenExchangeRoleAlias:
    Type: AWS::IoT::RoleAlias
    Properties: 
      RoleAlias:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "GreengrassCoreTokenExchangeRoleAlias"
      RoleArn: 
        Fn::GetAtt: GreengrassV2TokenExchangeRole.Arn

  GreengrassCoreTokenExchangeRoleAliasPolicy: 
    Type: AWS::IoT::Policy
    Properties:
      PolicyName:
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "GreengrassCoreTokenExchangeRoleAliasPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:AssumeRoleWithCertificate
          Resource:
          - Fn::GetAtt: GreengrassCoreTokenExchangeRoleAlias.RoleAliasArn

  GreengrassV2IoTThingPolicy: 
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: 
        Fn::Join:
          - "-"
          - - Ref: "AWS::StackName"
            - "GreengrassV2IoTThingPolicy" 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Publish
          - iot:Subscribe
          - iot:Receive
          - iot:Connect
          - greengrass:*
          Resource: "*"