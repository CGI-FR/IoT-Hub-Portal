@page "/device-models/{ModelID}"

@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using AzureIoTHub.Portal.Client.Pages.DeviceModels.LoRaWAN
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Shared.Models.V10.DeviceModel
@using AzureIoTHub.Portal.Shared.Models.V10.LoRaWAN.LoRaDeviceModel
@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Model</MudText>

<MudForm Model="@Model" @ref="form">
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
        <MudTabPanel Text="General" Style=@(standardValidator.Validate(Model).IsValid ? "" : "color: red")>
            <MudGrid>
                <MudItem xs="12" sm="4" md="2">
                    <MudCard>
                        <MudCardContent>
                            <div class="d-flex justify-center mb-4">
                                <MudAvatar Image="@imageDataUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                            </div>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-center">
                            @if (imageDataUrl != null)
                            {
                                <MudButton OnClick="DeleteAvatar" Color="Color.Error">Delete Picture</MudButton>
                            }
                            else
                            {
                                <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                                <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload">Change Picture</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="8" md="10">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Device model details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Model.Name" For="@(() => Model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Model.Description" For="@(() => Model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Save">Save Changes</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        @if (IsLoRa)
        {
            <MudTabPanel Text="LoRaWAN" Style=@(loraValidator.Validate(Model as LoRaDeviceModel).IsValid ? "" : "color: red")>
                <MudGrid>
                    <EditLoraDeviceModel LoRaDeviceModel="@(Model as LoRaDeviceModel)" Commands="Commands" OnSaveClick="Save" />
                </MudGrid>
            </MudTabPanel>
        }
    </MudTabs>
</MudForm>

@code {
    [Parameter]
    public string ModelID { get; set; }

    private MudForm form;

    private string ApiUrlBase => this.IsLoRa ? $"/api/lorawan/models/{ModelID}" : $"api/models/{ModelID}";
    private DeviceModelValidator standardValidator = new DeviceModelValidator();
    private LoRaDeviceModelValidator loraValidator = new LoRaDeviceModelValidator();

    private List<DeviceModelCommand> Commands { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsLoRa
    {
        get
        {
            return this.Model is LoRaDeviceModel;
        }
        set
        {
            if (value)
            {
                this.SetLoRaDeviceModel();
                return;
            }

            SetStandardDeviceModel();
        }
    }

    private void SetLoRaDeviceModel()
    {
        Model = new LoRaDeviceModel(Model);
    }

    private void SetStandardDeviceModel()
    {
        Model = new DeviceModel
            {
                ModelId = Model.ModelId,
                Name = Model.Name,
                IsBuiltin = Model.IsBuiltin,
                Description = Model.Description
            };
    }

    private DeviceModel Model { get; set; } = new DeviceModel
        {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private MultipartFormDataContent content;
    private string imageDataUrl;

    protected override async Task OnInitializedAsync()
    {
        if (IsLoRa)
        {
            Model = await httpClient.GetFromJsonAsync<LoRaDeviceModel>($"{ApiUrlBase}");
            Commands = new List<DeviceModelCommand>(
                        await httpClient.GetFromJsonAsync<DeviceModelCommand[]>($"{ApiUrlBase}/commands")
                    );
        }
        else
        {
            Model = await httpClient.GetFromJsonAsync<DeviceModel>($"{ApiUrlBase}");
        }

        imageDataUrl = await httpClient.GetStringAsync($"{ApiUrlBase}/avatar");
    }

    private void DeleteAvatar()
    {
        content = null;
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task Save()
    {
        if (!standardValidator.Validate(Model).IsValid
            || (IsLoRa && !this.loraValidator.Validate(this.Model as LoRaDeviceModel).IsValid))
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
        {
            result = await httpClient.PutAsJsonAsync(ApiUrlBase, Model as LoRaDeviceModel);

            result.EnsureSuccessStatusCode();

            result = await httpClient.PostAsJsonAsync($"{ApiUrlBase}/commands", Commands);
        }
        else
        {
            result = await httpClient.PutAsJsonAsync(ApiUrlBase, Model);
        }

        result.EnsureSuccessStatusCode();

        if (content is not null)
        {
            var response = await httpClient.PostAsync($"{ApiUrlBase}/avatar", content);
        }

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Device model successfully updated.", Severity.Success);

            // Go back to the list of devices
            NavigationManager.NavigateTo("device-models");
        }
        else if (result.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
            string errorMsg = await result.Content.ReadAsStringAsync();
        }
        else
        {
            Snackbar.Add("Something unexpected occurred", Severity.Warning);
        }
    }
 }