@page "/device-models/{ModelID}"

@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using AzureIoTHub.Portal.Client.Pages.DeviceModels.LoRaWAN
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Model</MudText>

@if (loading)
{
    <MudGrid>
        <MudItem xs="12">
            <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudForm Model="@Model" @ref="form" id="form">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex justify-center mb-4">
                            <MudAvatar Image="@imageDataUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                        </div>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-center">
                        @if (imageDataUrl != null)
                        {
                            <MudButton OnClick="DeleteAvatar" Color="Color.Error" Disabled="Model.IsBuiltin">Delete Picture</MudButton>
                        }
                        else
                        {
                            <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                            <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" Disabled="Model.IsBuiltin">Change Picture</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
                <MudItem xs="12" Class="d-flex justify-space-around py-2 px-1 mt-4">
                    <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Error" OnClick="DeleteDeviceModel">Delete model</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save" id="SaveButton">Save Changes</MudButton>
                </MudItem>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
                    <MudTabPanel Text="General" Style=@(standardValidator.Validate(Model).IsValid ? "" : "color: red")>
                        <MudExpansionPanels MultiExpansion="true" id="general">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                <MudItem xs="12" md="6">
                                                    <MudTextField id="@nameof(Model.Name)" @bind-Value="@Model.Name" For="@(() => Model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" Disabled="Model.IsBuiltin" />
                                                </MudItem>
                                                <MudItem xs="12" md="6">
                                                    <MudTextField id="@nameof(Model.Description)" @bind-Value="@Model.Description" For="@(() => Model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" Disabled="Model.IsBuiltin" />
                                                </MudItem>
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                            @if (!IsLoRa)
                            {
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudExpansionPanel Text="Properties">
                                            <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                            <ChildContent>
                                                <MudItem xs="12">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Properties.Add(new DeviceProperty() {  Order = Properties.Select(x => x.Order).Next() }))" StartIcon="@Icons.Filled.Add" id="addPropertyButton">Add property</MudButton>
                                                </MudItem>
                                                <MudItem xs="12">
                                                    @foreach (var item in this.Properties.OrderBy(x => x.Order))
                                                    {
                                                        <MudGrid id="@($"property-{item.Name}")">
                                                            <MudItem md="4" xs="12">
                                                                <MudTextField id="@nameof(item.DisplayName)"
                                                                  @bind-Value="@item.DisplayName"
                                                                  Label="Display name"
                                                                  Variant="Variant.Outlined"
                                                                  For="@(()=> item.DisplayName)"
                                                                  Required="true" />
                                                            </MudItem>
                                                            <MudItem md="3" xs="12">
                                                                <MudTextField id="@nameof(item.Name)" @bind-Value="@item.Name"
                                                                  Label="Name"
                                                                  Variant="Variant.Outlined"
                                                                  For="@(()=> item.Name)"
                                                                  Required="true" />
                                                            </MudItem>
                                                            <MudItem md="1" xs="12">
                                                                <MudNumericField id="@nameof(item.Order)"
                                                                     @bind-Value="@item.Order"
                                                                     Label="Order"
                                                                     Variant="Variant.Outlined"
                                                                     Min=0
                                                                     For="@(()=> item.Order)"
                                                                     Required="true" />
                                                            </MudItem>
                                                            <MudItem md="2" xs="6">
                                                                <MudSelect id="@nameof(item.PropertyType)"
                                                               @bind-Value="@item.PropertyType"
                                                               Label="Type"
                                                               Variant="Variant.Outlined"
                                                               For="@(()=> item.PropertyType)"
                                                               Required="true">
                                                                    @foreach (DevicePropertyType item in Enum.GetValues(typeof(DevicePropertyType)))
                                                                    {
                                                            <MudSelectItem Value="@item">@item</MudSelectItem>
                                                                    }
                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem md="1" xs="3">
                                                    <MudSwitch id="@nameof(item.IsWritable)" @bind-Checked="@item.IsWritable" Color="Color.Secondary" />
                                                    <MudInputLabel>Writable</MudInputLabel>
                                                </MudItem>
                                                <MudItem md="1" xs="3">
                                                    <MudIconButton id="DeletePropertyButton" Icon="@Icons.Filled.Delete" OnClick="@(() => Properties.Remove(item))">Remove</MudIconButton>
                                                </MudItem>
                                            </MudGrid>
                                                    }
                                                </MudItem>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudItem>
                                </MudGrid>
                            }
                        </MudExpansionPanels>
                    </MudTabPanel>
                    @if (IsLoRa)
                    {
                        <MudTabPanel Text="LoRaWAN" Style=@(loraValidator.Validate(Model as LoRaDeviceModel).IsValid ? "" : "color: red")>
                            <EditLoraDeviceModel LoRaDeviceModel="@(Model as LoRaDeviceModel)" Commands="Commands" />
                        </MudTabPanel>
                    }
                </MudTabs>
            </MudItem>
        </MudGrid>
    </MudForm>
}

@code {
    [Parameter]
    public string ModelID { get; set; }

    private bool loading = true;

    private MudForm form;

    private string ApiUrlBase => this.IsLoRa ? $"/api/lorawan/models/{ModelID}" : $"api/models/{ModelID}";
    private DeviceModelValidator standardValidator = new DeviceModelValidator();
    private LoRaDeviceModelValidator loraValidator = new LoRaDeviceModelValidator();
    private DevicePropertyValidator propertiesValidator = new DevicePropertyValidator();

    private List<DeviceModelCommand> Commands { get; set; } = new List<DeviceModelCommand>();
    private List<DeviceProperty> Properties { get; set; } = new List<DeviceProperty>();

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsLoRa
    {
        get
        {
            return this.Model is LoRaDeviceModel;
        }
        set
        {
            if (value)
            {
                this.SetLoRaDeviceModel();
                return;
            }

            SetStandardDeviceModel();
        }
    }

    private void SetLoRaDeviceModel()
    {
        Model = new LoRaDeviceModel(Model);
    }

    private void SetStandardDeviceModel()
    {
        Model = new DeviceModel
            {
                ModelId = Model.ModelId,
                Name = Model.Name,
                IsBuiltin = Model.IsBuiltin,
                Description = Model.Description
            };
    }

    private DeviceModel Model { get; set; } = new DeviceModel
        {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private MultipartFormDataContent content;
    private string imageDataUrl;

    protected override async Task OnInitializedAsync()
    {
        if (IsLoRa)
        {
            this.Model = await httpClient.GetFromJsonAsync<LoRaDeviceModel>($"{ApiUrlBase}");
            this.Commands.AddRange(await httpClient.GetFromJsonAsync<DeviceModelCommand[]>($"{ApiUrlBase}/commands"));
        }
        else
        {
            this.Model = await httpClient.GetFromJsonAsync<DeviceModel>($"{ApiUrlBase}");
            this.Properties.AddRange(await httpClient.GetFromJsonAsync<IEnumerable<DeviceProperty>>($"{ApiUrlBase}/properties"));
        }

        imageDataUrl = await httpClient.GetStringAsync($"{ApiUrlBase}/avatar");

        this.loading = false;
    }

    private void DeleteAvatar()
    {
        content = null;
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task Save()
    {
        if (!standardValidator.Validate(Model).IsValid
            || !propertiesValidator.Validate(Properties).IsValid
            || (IsLoRa && !this.loraValidator.Validate(this.Model as LoRaDeviceModel).IsValid))
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            propertiesValidator.Validate(Properties).Errors.ForEach(x =>
                Snackbar.Add(x.ErrorMessage, Severity.Warning)
            );
            
            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
        {
            result = await httpClient.PutAsJsonAsync(ApiUrlBase, Model as LoRaDeviceModel);

            result.EnsureSuccessStatusCode();

            result = await httpClient.PostAsJsonAsync($"{ApiUrlBase}/commands", Commands);
        }
        else
        {
            result = await httpClient.PutAsJsonAsync(ApiUrlBase, Model);

            result.EnsureSuccessStatusCode();

            result = await httpClient.PostAsJsonAsync($"{ApiUrlBase}/properties", Properties);
        }

        result.EnsureSuccessStatusCode();

        if (content is not null)
        {
            result = await httpClient.PostAsync($"{ApiUrlBase}/avatar", content);
        }

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Device model successfully updated.", Severity.Success);

            // Go back to the list of devices models
            NavigationManager.NavigateTo("device-models");
        }
        else if (result.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
            string errorMsg = await result.Content.ReadAsStringAsync();
        }
        else
        {
            Snackbar.Add("Something unexpected occurred", Severity.Warning);
        }
    }

    private async Task DeleteDeviceModel()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceModelID", Model.ModelId);
        parameters.Add("deviceModelName", Model.Name);
        var result = await DialogService.Show<DeleteDeviceModelPage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices after the deletion
        NavigationManager.NavigateTo("device-models");
    }
 }
