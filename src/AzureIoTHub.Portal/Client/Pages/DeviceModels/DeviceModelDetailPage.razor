@page "/device-models/{ModelID}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using Blazored.Modal
@using Blazored.Modal.Services
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False">
    <EditForm Model="@DeviceModel" OnValidSubmit="OnValidation">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h4">Device model detail</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (DeviceModel.ModelId == null)
                {
                    <MudItem Class="custom-centered-container">
                        <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
                    </MudItem>
                }
                else
                {
                    <MudGrid>
                        <MudItem md="6" xs="12">

                            <MudItem xs="12" Class="custom-form">
                                <MudItem xs="12" md="2" sm="7">
                                    <MudText>Name :</MudText>
                                </MudItem>
                                <MudItem xs="12" md="6" sm="10">
                                    <MudTextField @bind-Value="@DeviceModel.Name" For="@(() => DeviceModel.Name)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                            </MudItem>
                            <MudItem xs="12" Class="custom-form">
                                <MudItem xs="12" md="2" sm="7">
                                    <MudText>Description :</MudText>
                                </MudItem>
                                <MudItem xs="12" md="6" sm="6">
                                    <MudTextField @bind-Value="@DeviceModel.Description" For="@(() => DeviceModel.Description)" Margin="Margin.Dense" Variant="Variant.Outlined" Lines="5" />
                                </MudItem>
                            </MudItem>
                        </MudItem>

                        <MudItem md="6" xs="12">
                            <MudItem xs="12" Class="custom-form">
                                <MudItem xs="12" md="2" sm="7">
                                    <MudText>AppEUI :</MudText>
                                </MudItem>
                                <MudItem xs="12" md="4" sm="10">
                                    <MudTextField @bind-Value="@DeviceModel.AppEUI" For="@(() => DeviceModel.AppEUI)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                            </MudItem>
                            <MudItem xs="12" Class="custom-form">
                                <MudItem xs="12" md="2" sm="7">
                                    <MudText>Sensor Decoder URL :</MudText>
                                </MudItem>
                                <MudItem xs="12" md="4" sm="10">
                                    <MudTextField @bind-Value="@DeviceModel.SensorDecoderURL" For="@(() => DeviceModel.SensorDecoderURL)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                            </MudItem>
                            <MudItem xs="12" Class="custom-form">
                                <MudItem xs="12" md="2" sm="7">
                                    <MudText>Image :</MudText>
                                </MudItem>
                                <MudItem xs="12" md="4" sm="10">
                                    <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png" />
                                    <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           for="fileInput">
                                        Upload an image
                                    </MudButton>
                                    @if (_selectedImage != null)
                                    {
                                        <img src="@imageDataUrl" alt="@_selectedImage.Name">
                                    }
                                    else
                                    {
                                        <img src="@imageDataUrl" alt="@imageDataUrl" class="img-device-model">
                                    }
                                </MudItem>
                            </MudItem>
                        </MudItem>

                        <MudItem md="6" xs="12">
                            <MudItem md="12" xs="12">
                                <MudText>Commands :</MudText>
                            </MudItem>
                            @foreach (var element in DeviceModel.Commands)
                            {
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem xs="3" md="1" sm="3">
                                        <MudIconButton Icon="@Icons.Material.Filled.HighlightOff" Color="Color.Error" OnClick="@(() => DeleteCommand(DeviceModel.Commands.IndexOf(element),element.Name))" />
                                    </MudItem>
                                    <MudItem xs="12" md="7" sm="10" Style="margin-right: 10px;">
                                        <MudTextField @bind-Value="@element.Name" Label="Command Name" Margin="Margin.Dense" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" md="8" sm="10" Style="margin-right: 10px;">
                                        <MudTextField @bind-Value="@element.Frame" Label="Hex Trame" Margin="Margin.Dense" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" md="3" sm="10" Style="margin-right: 10px;">
                                        <MudTextField @bind-Value="@element.Port" Label="Port" Margin="Margin.Dense" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            }

                            <MudItem xs="12" Class="custom-form">
                                @* Add new Command :  *@
                                <MudItem xs="3" md="1" sm="3">
                                    <MudIconButton ButtonType="ButtonType.Button" OnClick="AddCommand" Icon="@Icons.Material.Filled.AddCircle" Color="Color.Tertiary" />
                                </MudItem>
                                <MudItem xs="12" md="7" sm="10" Style="margin-right: 10px;">
                                    <MudTextField @bind-Value="@DeviceModelCommand.Name" Label="Command Name" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                                <MudItem xs="12" md="8" sm="10" Style="margin-right: 10px;">
                                    <MudTextField @bind-Value="@DeviceModelCommand.Frame" Label="Hex Trame" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                                <MudItem xs="12" md="3" sm="10">
                                    <MudTextField @bind-Value="@DeviceModelCommand.Port" Label="Port" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                            </MudItem>

                        </MudItem>
                    </MudGrid>
                }
            </MudCardContent>
        </MudCard>
        <MudCardActions>
            <MudFab ButtonType="ButtonType.Submit" Color="Color.Secondary" Icon="@Icons.Material.Filled.Save" Label="Save" Class="btn-aln-right" />
            <MudFab Color="Color.Dark" Icon="@Icons.Material.Filled.Delete" Label="Delete" OnClick="DeleteDeviceModel" />
        </MudCardActions>

    </EditForm>

</MudContainer>

@code {
    [Parameter]
    public string ModelID { get; set; }

    private DeviceModel DeviceModel { get; set; } = new DeviceModel();
    private DeviceModelCommand DeviceModelCommand { get; set; } = new DeviceModelCommand();
    private IBrowserFile _selectedImage;
    private string imageDataUrl;

    protected override async Task OnInitializedAsync()
    {
        DeviceModel = await Http.GetFromJsonAsync<DeviceModel>($"api/DeviceModels/{ModelID}");
        imageDataUrl = (await Http.GetFromJsonAsync<Uri>($"api/DeviceModels/{ModelID}/image")).ToString();
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        this._selectedImage = null;
        this._selectedImage = e.File;

        var format = this._selectedImage.ContentType;
        var resizedImageFile = await this._selectedImage.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task OnValidation()
    {
        using (var content = new MultipartFormDataContent())
        {

            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            var deviceModelContent = JsonContent.Create(DeviceModel);
            deviceModelContent.Headers.Add("Content-Disposition", "form-data; name=\"deviceModel\"");
            deviceModelContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            content.Add(deviceModelContent, "deviceModel");

            if (_selectedImage != null)
            {
                using (var ms = _selectedImage.OpenReadStream(maxAllowedSize: 512000 * 4))
                {
                    var streamContent = new StreamContent(ms);
                    streamContent.Headers.ContentType = new MediaTypeHeaderValue(_selectedImage.ContentType);
                    streamContent.Headers.Add("Content-Disposition", "form-data; name=\"file\"; filename=\"" + _selectedImage.Name + "\"");
                    content.Add(streamContent, "file", _selectedImage.Name);
                }
            }

            // Add the last command entered, in case it wasn't already in the list
            this.AddCommand();

            // Unnecessary to send the list of commands to the controller
            // TODO : Do this more effectively
            DeviceModel.Commands.Clear();

            var result = await Http.PutAsync("api/DeviceModels", content);

            if (result.IsSuccessStatusCode)
            {
                DeviceModel = new DeviceModel();
                _selectedImage = null;
                Snackbar.Add("Device model successfully updated.", Severity.Success);

                // Go back to the list of devices after the deletion
                NavigationManager.NavigateTo("device-models");
            }
        }
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <returns></returns>
    private async Task DeleteDeviceModel()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceModelID", DeviceModel.ModelId);
        parameters.Add("deviceModelName", DeviceModel.Name);

        var result = await DialogService.Show<DeleteDeviceModelPage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices after the deletion
        NavigationManager.NavigateTo("device-models");
    }

    private void AddCommand()
    {
        if (DeviceModelCommand.Name != null && DeviceModelCommand.Frame != null && DeviceModelCommand.Port != 0)
        {
            DeviceModelCommand.CommandId = DeviceModelCommand.Name;
            var response = Http.PostAsJsonAsync<DeviceModelCommand>($"api/Commands/{DeviceModel.ModelId}", DeviceModelCommand);
            DeviceModel.Commands.Add(DeviceModelCommand);
            DeviceModelCommand = new DeviceModelCommand();
        }
    }

    private void DeleteCommand(int index, string commandId)
    {
        var response = Http.DeleteAsync($"api/Commands/{DeviceModel.ModelId}/{commandId}");
        DeviceModel.Commands.RemoveAt(index);
    }
}
