@page "/device-models/{ModelID}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using Blazored.Modal
@using Blazored.Modal.Services
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Model</MudText>

<MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="General">
        <MudGrid>
            <MudItem xs="12" sm="4" md="2">
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex justify-center mb-4">
                            <MudAvatar Image="@imageDataUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                        </div>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-center">
                        @if (imageDataUrl != null)
                        {
                            <MudButton OnClick="DeleteAvatar" Color="Color.Error">Delete Picture</MudButton>
                        }
                        else
                        {
                            <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                            <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload">Change Picture</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="8" md="10">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText>Device model details</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="@DeviceModel.Name" For="@(() => DeviceModel.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="@DeviceModel.AppEUI" Label="OTAA App EUI" For="@(() => DeviceModel.AppEUI)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="@DeviceModel.Description" For="@(() => DeviceModel.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="@DeviceModel.SensorDecoderURL" Label="Sensor Decoder URL" For="@(() => DeviceModel.SensorDecoderURL)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTable Items="@DeviceModel.Commands" Dense=true Hover=true Bordered=true Striped=true>
                                    <ToolBarContent>
                                        <MudText Typo="Typo.h6">Commands</MudText>
                                        <MudSpacer />
                                    </ToolBarContent>
                                    <ColGroup>
                                        <col style="width: 30%;" />
                                        <col style="width: 60%;" />
                                        <col style="width: 10%;" />
                                        <col style="width: 5%;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh Style="text-align: center">Frame</MudTh>
                                        <MudTh Style="text-align: center">Port</MudTh>
                                        <MudTh Style="text-align: center">Delete</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Name" Style="word-break: break-all;">
                                            <MudTextField @bind-Value="@context.Name" Label="Name" For="@(() => context.Name)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                        </MudTd>
                                        <MudTd DataLabel="Frame" Style="word-break: break-all; ">
                                            <MudTextField @bind-Value="@context.Frame" Label="Frame" For="@(() => context.Frame)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                                        </MudTd>
                                        <MudTd DataLabel="Port" Style="text-align: center;">
                                            <MudNumericField @bind-Value="@context.Port" Label="Port" For="@(() => context.Port)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudNumericField>
                                        </MudTd>
                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteCommand(context))"></MudIconButton>
                                        </MudTd>
                                    </RowTemplate>
                                    <FooterContent>
                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddCommand">Add Command</MudButton>
                                    </FooterContent>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Class="pb-4 pl-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" @onclick="DeleteDeviceModel">Delete Device</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-4" @onclick="Save">Save Changes</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public string ModelID { get; set; }

    private DeviceModel DeviceModel { get; set; } = new DeviceModel();
    private DeviceModelCommand DeviceModelCommand { get; set; } = new DeviceModelCommand();
    private string imageDataUrl;

    protected override async Task OnInitializedAsync()
    {
        DeviceModel = await httpClient.GetFromJsonAsync<DeviceModel>($"api/DeviceModels/{ModelID}");
        imageDataUrl = await httpClient.GetStringAsync($"api/DeviceModels/{ModelID}/avatar");
    }

    async Task DeleteAvatar()
    {
        await httpClient.DeleteAsync($"api/DeviceModels/{ModelID}/avatar");
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var response = await httpClient.PostAsync($"api/DeviceModels/{ModelID}/avatar", content);

        imageDataUrl = await response.Content.ReadAsStringAsync();
    }

    private async Task Save()
    {
        var result = await httpClient.PutAsJsonAsync("api/DeviceModels", DeviceModel);

        if (result.IsSuccessStatusCode)
        {
            DeviceModel = new DeviceModel();
            Snackbar.Add("Device model successfully updated.", Severity.Success);

            // Go back to the list of devices after the deletion
            NavigationManager.NavigateTo("device-models");
        }
        else if(result.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
        }
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <returns></returns>
    private async Task DeleteDeviceModel()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceModelID", DeviceModel.ModelId);
        parameters.Add("deviceModelName", DeviceModel.Name);

        var result = await DialogService.Show<DeleteDeviceModelPage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices after the deletion
        NavigationManager.NavigateTo("device-models");
    }

    private void AddCommand()
    {
        DeviceModel.Commands.Add(new DeviceModelCommand());
    }

    private void DeleteCommand(DeviceModelCommand item)
    {
        DeviceModel.Commands.Remove(item);
    }
}
