@page "/device-models/new"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using AzureIoTHub.Portal.Client.Pages.DeviceModels.LoRaWAN
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject PortalSettings Portal
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device Model</MudText>

<MudForm Model="@Model" @ref="form" id="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar Image="@imageDataUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                    </div>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    @if (imageDataUrl != null)
                    {
                        <MudButton OnClick="DeleteAvatar" Color="Color.Error">Delete Picture</MudButton>
                    }
                    else
                    {
                        <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                        <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload">Change Picture</MudButton>
                    }
                </MudCardActions>
            </MudCard>
            <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save" id="SaveButton">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6" id="tabs">
                <MudTabPanel Text="General" Style=@(standardValidator.Validate(Model).IsValid ? "" : "color: red")>
                    <MudExpansionPanels MultiExpansion="true" id="general">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudTextField id="@nameof(Model.Name)" @bind-Value="@Model.Name" For="@(() => Model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField id="@nameof(Model.Description)" @bind-Value="@Model.Description" For="@(() => Model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                                            </MudItem>
                                            @if (Portal.IsLoRaSupported)
                                            {
                                                <MudItem xs="12">
                                                    <MudText>
                                                        <b>LoRa Device</b>
                                                    </MudText>
                                                    
                                                    <MudSwitch @bind-Checked="@IsLoRa" Color="Color.Secondary" id="@nameof(Model.SupportLoRaFeatures)" Label="Support LoRa"></MudSwitch>
                                                    @if (IsLoRa)
                                                    {
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>is</b> a LoRa Device.</MudText>
                                                    
                                                    }
                                                </MudItem>
                                            }
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        @if (!IsLoRa)
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Properties">
                                        <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                <MudItem xs="12">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Properties.Add(new DeviceProperty() {  Order = Properties.Select(x => x.Order).Next() }))" StartIcon="@Icons.Filled.Add" id="addPropertyButton">Add property</MudButton>
                                                </MudItem>
                                                <MudItem xs="12">
                                                    @foreach (var item in this.Properties.OrderBy(x => x.Order))
                                                    {
                                                        <MudGrid id="@($"property-{item.Name}")">
                                                            <MudItem md="4" xs="12">
                                                                <MudTextField id="@nameof(item.DisplayName)"
                                                                      @bind-Value="@item.DisplayName"
                                                                      Label="Display name"
                                                                      Variant="Variant.Outlined"
                                                                      For="@(()=> item.DisplayName)"
                                                                      Required="true" />
                                                            </MudItem>
                                                            <MudItem md="3" xs="12">
                                                                <MudTextField id="@nameof(item.Name)" @bind-Value="@item.Name"
                                                                      Label="Name"
                                                                      Variant="Variant.Outlined"
                                                                      For="@(()=> item.Name)"
                                                                      Required="true" />
                                                            </MudItem>
                                                            <MudItem md="1" xs="12">
                                                                <MudNumericField id="@nameof(item.Order)"
                                                                         @bind-Value="@item.Order"
                                                                         Label="Order"
                                                                         Variant="Variant.Outlined"
                                                                         Min=0
                                                                         For="@(()=> item.Order)"
                                                                         Required="true" />
                                                            </MudItem>
                                                            <MudItem md="2" xs="6">
                                                                <MudSelect id="@nameof(item.PropertyType)"
                                                                   @bind-Value="@item.PropertyType"
                                                                   Label="Type"
                                                                   Variant="Variant.Outlined"
                                                                   For="@(()=> item.PropertyType)"
                                                                   Required="true">
                                                                    @foreach (DevicePropertyType item in Enum.GetValues(typeof(DevicePropertyType)))
                                                                    {
                                                                <MudSelectItem Value="@item">@item</MudSelectItem>
                                                                    }
                                                        </MudSelect>
                                                    </MudItem>
                                                    <MudItem md="1" xs="3">
                                                        <MudSwitch id="@nameof(item.IsWritable)" Label="Writable" @bind-Checked="@item.IsWritable" Color="Color.Secondary" />

                                                    </MudItem>
                                                    <MudItem md="1" xs="3">
                                                        <MudIconButton id="DeletePropertyButton" Icon="@Icons.Filled.Delete" OnClick="@(() => Properties.Remove(item))">Remove</MudIconButton>
                                                    </MudItem>
                                                </MudGrid>
                                                    }
                                                </MudItem>
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudExpansionPanels>
                </MudTabPanel>
                @if (IsLoRa)
                {
                    <MudTabPanel Class="LoRaWANTab" Text="LoRaWAN" Style=@(loraValidator.Validate(Model as LoRaDeviceModel).IsValid ? "" : "color: red")>
                        <CreateLoraDeviceModel LoRaDeviceModel="@(Model as LoRaDeviceModel)"
                                           Commands="Commands"
                                           CommandValidation="@CommandValidation" />
                    </MudTabPanel>
                }
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private MudForm form;

    private string ApiUrlBase => this.IsLoRa ? "/api/lorawan/models" : "api/models";
    private DeviceModelValidator standardValidator = new DeviceModelValidator();
    private LoRaDeviceModelValidator loraValidator = new LoRaDeviceModelValidator();
    private DevicePropertyValidator propertiesValidator = new DevicePropertyValidator();
    private List<DeviceModelCommand> Commands { get; set; }
    private List<DeviceProperty> Properties { get; set; } = new List<DeviceProperty>();
    private List<MudForm> CommandValidation { get; set; }

    private bool IsLoRa
    {
        get
        {
            return this.Model is LoRaDeviceModel;
        }
        set
        {
            if (value)
            {
                this.SetLoRaDeviceModel();
                return;
            }

            SetStandardDeviceModel();
        }
    }

    private void SetLoRaDeviceModel()
    {
        Model = new LoRaDeviceModel(Model);
        Commands = new List<DeviceModelCommand>();
        CommandValidation = new List<MudForm>()
        {
            new MudForm(),
            new MudForm(),
            new MudForm()
        };
    }

    private void SetStandardDeviceModel()
    {
        Model = new DeviceModel
            {
                ModelId = Model.ModelId,
                Name = Model.Name,
                IsBuiltin = Model.IsBuiltin,
                Description = Model.Description
            };
    }

    private DeviceModel Model { get; set; } = new DeviceModel
        {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private MultipartFormDataContent content;
    private string imageDataUrl;

    private void DeleteAvatar()
    {
        content = null;
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }


    private async Task Save()
    {
        // Displays validation error message for each field
        await form.Validate();

        // Used to check commands
        bool duplicated = false;
        bool cmdValidationError = false;

        if (IsLoRa)
        {
            // Check duplicates in command name
            var query = Commands.GroupBy(x => x.Name)
                        .Where(x => x.Count() > 1)
                        .Select(x => x.Key)
                        .ToList();
            foreach (var item in query)
            {
                Snackbar.Add($"The command '{item}' appears more than once!", Severity.Warning);
                duplicated = true;
            }

            // Check validation error in commands
            foreach (var field in CommandValidation)
            {
                await field.Validate();
                if (!field.IsValid)
                    cmdValidationError = true;
            }
        }

        if (!standardValidator.Validate(Model).IsValid
            || (IsLoRa && (!this.loraValidator.Validate(this.Model as LoRaDeviceModel).IsValid ||
                           duplicated ||
                           cmdValidationError)))
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
        {
            var loraDeviceModel = Model as LoRaDeviceModel;

            if (!loraDeviceModel.UseOTAA)
            {
                loraDeviceModel.AppEUI = null;
            }

            loraDeviceModel.SupportLoRaFeatures = true;

            result = await httpClient.PostAsJsonAsync(ApiUrlBase, loraDeviceModel);

            result.EnsureSuccessStatusCode();

            result = await httpClient.PostAsJsonAsync($"{ApiUrlBase}/{Model.ModelId}/commands", Commands);
        }
        else
        {
            result = await httpClient.PostAsJsonAsync(ApiUrlBase, Model);

            result.EnsureSuccessStatusCode();

            result = await httpClient.PostAsJsonAsync($"{ApiUrlBase}/{Model.ModelId}/properties", Properties);
        }

        result.EnsureSuccessStatusCode();

        if (content is not null)
        {
            var response = await httpClient.PostAsync($"{ApiUrlBase}/{Model.ModelId}/avatar", content);
        }

        Snackbar.Add("Device model successfully created.", Severity.Success);

        // Go back to the list of devices
        NavigationManager.NavigateTo("device-models");
    }
 }
