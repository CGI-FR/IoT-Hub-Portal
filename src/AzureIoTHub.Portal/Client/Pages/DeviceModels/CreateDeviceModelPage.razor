@page "/device-models/new"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using Blazored.Modal
@using Blazored.Modal.Services
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False">
    <EditForm Model="@_sensorModel" OnValidSubmit="OnValidation">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>

                <MudGrid>
                    <MudItem md="6" xs="12">

                        <MudItem xs="12" Class="custom-form">
                            <MudItem xs="12" md="2" sm="7">
                                <MudText>Name :</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6" sm="10">
                                <MudTextField @bind-Value="@_sensorModel.Name" For="@(() => _sensorModel.Name)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                        </MudItem>
                        <MudItem xs="12" Class="custom-form">
                            <MudItem xs="12" md="2" sm="7">
                                <MudText>Description :</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6" sm="6">
                                <MudTextField @bind-Value="@_sensorModel.Description" For="@(() => _sensorModel.Description)" Margin="Margin.Dense" Variant="Variant.Outlined" Lines="5" />
                            </MudItem>
                        </MudItem>
                    </MudItem>

                    <MudItem md="6" xs="12">
                        <MudItem xs="12" Class="custom-form">
                            <MudItem xs="12" md="2" sm="7">
                                <MudText>AppEUI :</MudText>
                            </MudItem>
                            <MudItem xs="12" md="4" sm="10">
                                <MudTextField @bind-Value="@_sensorModel.AppEUI" For="@(() => _sensorModel.AppEUI)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                        </MudItem>
                        <MudItem xs="12" Class="custom-form">
                            <MudItem xs="12" md="2" sm="7">
                                <MudText>Image :</MudText>
                            </MudItem>
                            <MudItem xs="12" md="4" sm="10">
                                @*<MudTextField @bind-Value="@_sensorModel.AppEUI" For="@(() => _sensorModel.AppEUI)" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>*@
                                <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png" />
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Filled.CloudUpload"
                                           for="fileInput">
                                    Upload an images
                                </MudButton>

                                @if (_selectedImage != null)
                                {
                                    <ul>
                                        <li>
                                            <ul>
                                                <li>Name: @_selectedImage.Name</li>
                                                <li>Last modified: @_selectedImage.LastModified.ToString()</li>
                                                <li>Size (bytes): @_selectedImage.Size</li>
                                                <li>Content type: @_selectedImage.ContentType</li>
                                            </ul>
                                        </li>
                                    </ul>
                                }
                            </MudItem>
                        </MudItem>
                    </MudItem>

                    @* ********************************************************************************** *@
                    <MudItem md="6" xs="12">
                        <MudItem md="12" xs="12">
                            <MudText>Commands :</MudText>
                        </MudItem>

                        @if (_sensorModel.Commands.Count > 0)
                        {
                            @foreach (var element in _sensorModel.Commands)
                            {
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem xs="3" md="1" sm="3">
                                        <MudIconButton Icon="@Icons.Material.Filled.HighlightOff" Color="Color.Error" OnClick="@(() => DeleteCommand(_sensorModel.Commands.IndexOf(element)))" />
                                    </MudItem>
                                    <MudItem xs="12" md="7" sm="10" Style="margin-right: 10px;">
                                        <MudTextField @bind-Value="@element.Name" Label="Command Name" Margin="Margin.Dense" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" md="8" sm="10" Style="margin-right: 10px;">
                                        <MudTextField @bind-Value="@element.Frame" Label="Hex Trame" Margin="Margin.Dense" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                    <MudItem xs="12" md="3" sm="10" Style="margin-right: 10px;">
                                        <MudTextField @bind-Value="@element.Port" Label="Port" Margin="Margin.Dense" Disabled="true" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            }
                        }

                        <MudItem xs="12" Class="custom-form">
                            @* Add new Command :  *@
                            <MudItem xs="3" md="1" sm="3">
                                <MudIconButton ButtonType="ButtonType.Button" OnClick="AddCommand" Icon="@Icons.Material.Filled.AddCircle" Color="Color.Tertiary" />
                            </MudItem>
                            <MudItem xs="12" md="7" sm="10" Style="margin-right: 10px;">
                                <MudTextField @bind-Value="@_sensorCommand.Name" Label="Command Name" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" md="8" sm="10" Style="margin-right: 10px;">
                                <MudTextField @bind-Value="@_sensorCommand.Frame" Label="Hex Trame" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" md="3" sm="10">
                                <MudTextField @bind-Value="@_sensorCommand.Port" Label="Port" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                        </MudItem>

                    </MudItem>
                </MudGrid>

            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>

</MudContainer>
@code {

    private SensorModel _sensorModel;
    private SensorCommand _sensorCommand;
    private IBrowserFile _selectedImage;

    protected override void OnInitialized()
    {
        _sensorModel = new SensorModel();
        _sensorCommand = new SensorCommand();
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        _selectedImage = null;
        _selectedImage = e.File;
    }


    private async Task OnValidation()
    {
        using (var content = new MultipartFormDataContent())
        {

            content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
            var sensorContent = JsonContent.Create(_sensorModel);
            sensorContent.Headers.Add("Content-Disposition", "form-data; name=\"sensor\"");
            sensorContent.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            content.Add(sensorContent, "sensor");

            if (_selectedImage != null)
            {
                using (var ms = _selectedImage.OpenReadStream(maxAllowedSize: 512000*4))
                {
                    var streamContent = new StreamContent(ms);
                    streamContent.Headers.ContentType = new MediaTypeHeaderValue(_selectedImage.ContentType);
                    streamContent.Headers.Add("Content-Disposition", "form-data; name=\"file\"; filename=\"" + _selectedImage.Name + "\"");
                    content.Add(streamContent, "file", _selectedImage.Name);
                }
            }

            var result = await Http.PostAsync("api/DeviceModels", content);

            if (result.IsSuccessStatusCode)
            {
                _sensorModel = new SensorModel();
                _selectedImage = null;
                Snackbar.Add("Sensor model successfully create.", Severity.Success);

                // Go back to the list of devices after the deletion
                NavigationManager.NavigateTo("device-models");
            }
        }
    }

    private void AddCommand()
    {
        if (_sensorCommand.Name != null && _sensorCommand.Frame != null && _sensorCommand.Port != 0)
        {
            _sensorModel.Commands.Add(_sensorCommand);
            _sensorCommand = new SensorCommand();
        }
    }

    private void DeleteCommand(int index)
    {
        _sensorModel.Commands.RemoveAt(index);
    }
}
