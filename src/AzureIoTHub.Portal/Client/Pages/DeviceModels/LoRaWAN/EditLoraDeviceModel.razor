@using AzureIoTHub.Portal.Models.v10.LoRaWAN

<MudExpansionPanels MultiExpansion="true" id="lorawan">
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="LoRaWAN" IsInitiallyExpanded="true">
                <TitleContent><MudText Typo="Typo.h6">LoraWAN</MudText></TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem md="6" xs="12">
                                    <MudSwitch @bind-Checked="@LoRaDeviceModel.UseOTAA" Disabled="true">@(LoRaDeviceModel.UseOTAA ? "OTAA setting enable" : "APB setting enable")</MudSwitch>
                                </MudItem>
                                @if (!LoRaDeviceModel.UseOTAA)
                                {
                                    <MudItem md="6" xs="12">
                                        <MudSwitch @bind-Checked="@LoRaDeviceModel.ABPRelaxMode" For="@(() => LoRaDeviceModel.ABPRelaxMode)" Label="Disable ABP relax mode" Color="Color.Primary"></MudSwitch>
                                    </MudItem>
                                }
                                <MudItem md="3" xs="6">
                                    <MudSelect id="@nameof(LoRaDeviceModel.ClassType)"
                                               @bind-Value="@LoRaDeviceModel.ClassType"
                                               Label="Type"
                                               Variant="Variant.Outlined"
                                               For="@(()=> LoRaDeviceModel.ClassType)"
                                               Required="true">
                                        @foreach (ClassType item in Enum.GetValues(typeof(ClassType)))
                                        {
                                            <MudSelectItem Value="@item">@item</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem md="3" xs="6">
                                    <MudSelect @bind-Value="@LoRaDeviceModel.Deduplication" For="@(() => LoRaDeviceModel.Deduplication)" AnchorOrigin="Origin.BottomCenter" Label="Message Deduplication" Variant="Variant.Outlined">
                                        @foreach (DeduplicationMode item in Enum.GetValues(typeof(DeduplicationMode)))
                                        {
                                            <MudSelectItem Value="@item">@item</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem md="6" xs=12>
                            <MudGrid>
                                @if (LoRaDeviceModel.UseOTAA)
                                {
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="@LoRaDeviceModel.AppEUI" Label="OTAA AppEUI" For="@(() => LoRaDeviceModel.AppEUI)" Variant="Variant.Outlined" Required="true"></MudTextField>
                                    </MudItem>
                                }
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="@LoRaDeviceModel.SensorDecoder" Label="Sensor Decoder URL" For="@(() => LoRaDeviceModel.SensorDecoder)" Variant="Variant.Outlined"></MudTextField>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem md="6" xs=12>
                            <MudGrid>
                                <MudItem md="6" xs="12">
                                    <MudNumericField @bind-Value="@LoRaDeviceModel.KeepAliveTimeout" For="@(() => LoRaDeviceModel.KeepAliveTimeout)" Min=1 Label="Device Connection Timeout" Variant="Variant.Outlined"></MudNumericField>
                                </MudItem>

                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="Properties">
                <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudText Typo=Typo.h5 Class="mb-4">Receive Windows</MudText>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudSwitch @bind-Checked="@LoRaDeviceModel.Downlink" For="@(() => LoRaDeviceModel.Downlink)" Label="Enable/disable downstream messages" Color="Color.Primary"></MudSwitch>
                                </MudItem>
                                @if (LoRaDeviceModel.Downlink.HasValue && LoRaDeviceModel.Downlink.Value)
                                {
                                    <MudItem xs="12" md="6">
                                        <MudSelect @bind-Value="@LoRaDeviceModel.PreferredWindow" For="@(() => LoRaDeviceModel.PreferredWindow)" AnchorOrigin="Origin.BottomCenter" Label="Preferred receive window" Variant="Variant.Outlined">
                                            <MudSelectItem Value=1>1</MudSelectItem>
                                            <MudSelectItem Value=2>2</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudNumericField @bind-Value="@LoRaDeviceModel.RXDelay" For="@(() => LoRaDeviceModel.RXDelay)" Min=1 Label="RX Delay" Variant="Variant.Outlined"></MudNumericField>
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudNumericField @bind-Value="@LoRaDeviceModel.RX1DROffset" For="@(() => LoRaDeviceModel.RX1DROffset)" Label="RX1 Datarate Offset" Variant="Variant.Outlined"></MudNumericField>
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudNumericField @bind-Value="@LoRaDeviceModel.RX2DataRate" For="@(() => LoRaDeviceModel.RX2DataRate)" Label="RX2 Datarate" Variant="Variant.Outlined"></MudNumericField>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo=Typo.h5 Class="mb-4">Frame Counters</MudText>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudSwitch @bind-Checked="@LoRaDeviceModel.Supports32BitFCnt" For="@(() => LoRaDeviceModel.Supports32BitFCnt)" Label="32bit counter support" Color="Color.Primary" Variant="Variant.Outlined"></MudSwitch>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudNumericField @bind-Value="@LoRaDeviceModel.FCntUpStart" For="@(() => LoRaDeviceModel.FCntUpStart)" Min=0 Label="Frame counter up start value" Variant="Variant.Outlined"></MudNumericField>
                                </MudItem>
                                @if (LoRaDeviceModel.Downlink.HasValue && LoRaDeviceModel.Downlink.Value)
                                {
                                    <MudItem xs="12" md="6">
                                        <MudNumericField @bind-Value="@LoRaDeviceModel.FCntDownStart" For="@(() => LoRaDeviceModel.FCntDownStart)" Min=0 Label="Frame counter down start value" Variant="Variant.Outlined"></MudNumericField>
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudNumericField @bind-Value="@LoRaDeviceModel.FCntResetCounter" For="@(() => LoRaDeviceModel.FCntResetCounter)" Min=0 Label="Frame counter reset counter value" Variant="Variant.Outlined"></MudNumericField>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    @if (LoRaDeviceModel.Downlink.HasValue && LoRaDeviceModel.Downlink.Value)
    {
        <MudGrid>
            <MudItem xs="12">
                <MudExpansionPanel Text="Commands" IsInitiallyExpanded="true">
                    <TitleContent><MudText Typo="Typo.h6">Commands</MudText></TitleContent>
                    <ChildContent>
                        <MudItem xs="12">
                            <MudTable Items="@Commands" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                <ColGroup>
                                    <col style="width: 30%;" />
                                    <col style="width: 60%;" />
                                    <col style="width: 10%;" />
                                    <col style="width: 5%;" />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh Style="text-align: center">Frame</MudTh>
                                    <MudTh Style="text-align: center">Port</MudTh>
                                    <MudTh Style="text-align: center">Delete</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="CommandContext">
                                    <MudTd DataLabel="Name" Style="word-break: break-all;">
                                        <MudTextField @bind-Value="@CommandContext.Name" Label="Name" For="@(() => CommandContext.Name)" Variant="Variant.Outlined" Required="true" Disabled="CommandContext.IsBuiltin"></MudTextField>
                                    </MudTd>
                                    <MudTd DataLabel="Frame" Style="word-break: break-all; ">
                                        <MudTextField @bind-Value="@CommandContext.Frame" Label="Frame" For="@(() => CommandContext.Frame)" Variant="Variant.Outlined" Required="true" Disabled="CommandContext.IsBuiltin"></MudTextField>
                                    </MudTd>
                                    <MudTd DataLabel="Port" Style="text-align: center;">
                                        <MudNumericField @bind-Value="@CommandContext.Port" Label="Port" For="@(() => CommandContext.Port)" Variant="Variant.Outlined" Disabled="CommandContext.IsBuiltin"></MudNumericField>
                                    </MudTd>
                                    <MudTd DataLabel="Delete" Style="text-align: center">
                                        <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Disabled="@CommandContext.IsBuiltin" OnClick="@(() => DeleteCommand(CommandContext))"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                                <FooterContent>
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddCommand">Add Command</MudButton>
                                </FooterContent>
                            </MudTable>
                        </MudItem>
                    </ChildContent>
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>
    }

</MudExpansionPanels>

@code {
    [Parameter]
    public LoRaDeviceModel LoRaDeviceModel { get; set; }

    [Parameter]
    public IList<DeviceModelCommand> Commands { get; set; }

    private DeviceModelCommand DeviceModelCommand { get; set; } = new DeviceModelCommand();

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void AddCommand()
    {
        var last = Commands.LastOrDefault();

        if (Commands.Count == 0 || (last.Name is not null && last.Frame is not null))
        {
            Commands.Add(new DeviceModelCommand());
        }
    }

    private void DeleteCommand(DeviceModelCommand item)
    {
        Commands.Remove(item);
    }
}
