@page "/device-models"
@using AzureIoTHub.Portal.Models.v10

@attribute [Authorize]
@inject NavigationManager navigationManager
@inject PortalSettings Portal
@inject IDialogService dialogService
@inject IDeviceModelsClientService DeviceModelsClientService

<MudGrid>
    @if (result == null)
    {
        <MudItem Class="custom-centered-container">
            <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudTable T="DeviceModel" Items="@result" Loading="@IsLoading" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true OnRowClick="@((e) => GoToDetails(e.Item))" RowStyle="cursor: pointer;">
                <ColGroup>
                    <col style="width: 5%;" />
                    <col style="width: 30%;" />
                    <col style="width: 30%;" />
                    <col style="width: 5%;" />
                    <col style="width: 5%;" />
                </ColGroup>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Device Models</MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh list">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="LoadDeviceModels" Class="ma-2" id="tableRefreshButton"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Add device model">
                        <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="AddDeviceModel" id="addDeviceModelButton" />
                    </MudTooltip>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh Style="text-align: center">Description</MudTh>
                    <MudTh Style="text-align: center">Details</MudTh>
                    <MudTh Style="text-align: center">Delete</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="text-align: center">
                        <img height="25" src="@context.ImageUrl" />
                    </MudTd>
                    <MudTd DataLabel="Name" Style="word-break: break-all;">
                        @context.Name
                    </MudTd>
                    <MudTd DataLabel="Description" Style="word-break: break-all; ">
                        @context.Description
                    </MudTd>
                    <MudTd DataLabel="Details" Style="text-align: center">
                        <MudTooltip Text="Delete device model">
                            <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                        </MudTooltip>
                    </MudTd>
                    <MudTd DataLabel="Delete" Style="text-align: center">
                        <MudTooltip Text="Delete device model">
                            <MudIconButton Color="Color.Default" Disabled="context.IsBuiltin" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteDeviceModel(context))" id="deleteButton"></MudIconButton>
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
                </PagerContent>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
            </MudTable>
        </MudItem>
    }

</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    private int[] pageSizeOptions = new int[] { 2, 5, 10 };
    private List<DeviceModel> result = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDeviceModels();
        IsLoading = false;
    }

    private void AddDeviceModel()
    {
        navigationManager.NavigateTo("/device-models/new");
    }

    /// <summary>
    ///  Sends a GET request to the DeviceModelsController, to retrieve all device models from the database
    /// </summary>
    /// <returns></returns>
    private async Task LoadDeviceModels()
    {
        try
        {
            result.Clear();
            result.AddRange(await DeviceModelsClientService.GetDeviceModels());
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    private async Task DeleteDeviceModel(DeviceModel deviceModel)
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceModelID", deviceModel.ModelId);
        parameters.Add("deviceModelName", deviceModel.Name);
        var result = await dialogService.Show<DeleteDeviceModelPage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Update the list of devices after the deletion
        await LoadDeviceModels();
    }

    private void GoToDetails(DeviceModel item)
    {
        navigationManager.NavigateTo($"/device-models/{item.ModelId}{((item.SupportLoRaFeatures && Portal.IsLoRaSupported) ? "?isLora=true" : "")}");
    }
}
