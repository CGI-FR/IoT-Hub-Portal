@page "/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared
@using AzureIoTHub.Portal.Shared.Security;
@using AzureIoTHub.Portal.Shared.UserManagement;
@using Blazored.Modal
@using Blazored.Modal.Services

@inject HttpClient Http
@inject IModalService modal
@inject IJSRuntime JS

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        @if (result == null)
        {
            <MudItem Class="custom-centered-container">
                <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudTable Items="@result.Items" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                    <ColGroup>
                        <col style="width: 20%;" />
                        <col style="width: 50%;" />
                        <col style="width: 20%;" />
                        <col style="width: 5%;" />
                        <col style="width: 5%;" />
                    </ColGroup>
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Users</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="LoadUsers" Class="ma-2"></MudIconButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh Style="text-align: center">User name</MudTh>
                        <MudTh Style="text-align: center">Role</MudTh>
                        <MudTh Style="text-align: center">Details</MudTh>
                        <MudTh Style="text-align: center">Delete</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name" Style="word-break: break-all;">
                            <a href="/users">@context.DisplayName</a>
                        </MudTd>
                        <MudTd DataLabel="User name" Style="word-break: break-all; ">
                            @context.UserName
                        </MudTd>
                        <MudTd DataLabel="Role" Style="text-align: center;">
                            @context.Role
                        </MudTd>
                        <MudTd DataLabel="Details" Style="text-align: center">
                            <a href="/users"><MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" /></a>
                        </MudTd>
                        <MudTd DataLabel="Delete" Style="text-align: center">
                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteUser(context))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        }

        <MudItem xs="12">
            <a href=""><MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Label="Invite user" OnClick="ShowInviteDialog"/></a>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private PaginationResult<UserListItem> result;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Users", new PaginationRequest
            {
                PageIndex = 0,
                PageSize = 10
            });

            result = await response.Content.ReadFromJsonAsync<PaginationResult<UserListItem>>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ShowInviteDialog()
    {
        var result = await modal.Show<Invite>("Invite user").Result;

        if (!result.Cancelled)
        {
            await LoadUsers();
        }
    }

    private async Task DeleteUser(UserListItem model)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UserListItem.Id), model.Id);

        var result = await modal.Show<Delete>("Delete user").Result;

        if (result.Cancelled)
        {
            return;
        }

        var response = await Http.DeleteAsync($"api/Users/{model.Id}");

        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("$.notify", new
            {
                type = "error",
                title = "User Deletion",
                message = $"Failed to delete user {model.UserName}"
            });

            return;
        }

        await JS.InvokeVoidAsync("$.notify", new
        {
            type = "success",
            title = "User Deletion",
            message = $"Successfully delete user {model.UserName}"
        });

        await LoadUsers();
    }
}
