@page "/settings/device-tag"
@using AzureIoTHub.Portal.Models.v10
@using System.ComponentModel.DataAnnotations
@using System.IO
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Client.Validators

@attribute [Authorize]
@inject HttpClient HttpClient
@inject ISnackbar Snackbar


<MudItem xs="12">
    <MudTable Items=@Tags Loading="IsLoading" Dense=true Hover=true Bordered=true Striped=true>

        <ToolBarContent>
            <MudText Typo="Typo.h6">Tags</MudText>
            <MudSpacer />
        </ToolBarContent>

        <ColGroup>
            <col style="width: 40%;" />
            <col style="width: 40%;" />
            <col style="width: 5%;" />
            <col style="width: 5%;" />
            <col style="width: 10%;" />
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Label</MudTh>
            <MudTh Style="text-align: center">Required</MudTh>
            <MudTh Style="text-align: center">Searchable</MudTh>
            <MudTh Style="text-align: center">Delete</MudTh>
        </HeaderContent>
        <RowTemplate Context="TagContexte">
            <MudTd DataLabel="Name" Style="word-break: break-all;">
                <MudForm @ref="FormName" Model="TagContexte">
                    <MudTextField @bind-Value="@TagContexte.Name" Label="Name"
                                  HelperText="Name that will be registered in the device twin" HelperTextOnFocus="true"
                                  For="@(() => TagContexte.Name)" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true"></MudTextField>
                </MudForm>
            </MudTd>
            <MudTd DataLabel="Label" Style="word-break: break-all; ">
                <MudForm @ref="FormLabel" Model="TagContexte">
                    <MudTextField @bind-Value="@TagContexte.Label" Label="Label"
                                  HelperText="The label shown to the user" HelperTextOnFocus="true"
                                  For="@(() => TagContexte.Label)" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true"></MudTextField>
                </MudForm>
            </MudTd>
            <MudTd DataLabel="Required" Style="text-align: center;">
                <MudCheckBox @bind-Checked="@TagContexte.Required"></MudCheckBox>
            </MudTd>
            <MudTd DataLabel="Searchable" Style="text-align: center;">
                <MudCheckBox @bind-Checked="@TagContexte.Searchable"></MudCheckBox>
            </MudTd>
            <MudTd DataLabel="Delete" Style="text-align: center">
                <MudTooltip Text="Delete device">
                    <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteTag(TagContexte))"></MudIconButton>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddTag">Add a new Tag</MudButton>
        </FooterContent>

        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>
    <MudCardActions Class="pb-4 pl-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Save">Save Changes</MudButton>
    </MudCardActions>
</MudItem>
@code {
    List<DeviceTag> Tags { get; set; } = new();
    private MudForm FormName { get; set; }
    private MudForm FormLabel { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Tags.AddRange(await HttpClient.GetFromJsonAsync<List<DeviceTag>>($"/api/settings/device-tags"));

        IsLoading = false;
    }

    private void AddTag()
    {
        var last = Tags.LastOrDefault();

        if (Tags.Count == 0 || (last.Name is not null && last.Label is not null))
        {
            Tags.Add(new DeviceTag());
        }
    }

    private void DeleteTag(DeviceTag item)
    {
        Tags.Remove(item);
    }

    private async Task Save()
    {

        // Checks empty field and regex validation
        await FormLabel.Validate();
        await FormName.Validate();

        // Checks duplicate
        bool duplicated = false;
        var query = Tags.GroupBy(x => x.Name)
                        .Where(x => x.Count() > 1)
                        .Select(x => x.Key)
                        .ToList();
        foreach (var item in query)
        {
            Snackbar.Add($"The name '{item}' appears more than once!", Severity.Warning);
            duplicated = true;
        }

        if (FormLabel.IsValid && FormName.IsValid && !duplicated)
        {
            var response = await HttpClient.PostAsJsonAsync($"/api/settings/device-tags", Tags);
            response.EnsureSuccessStatusCode();

            // Prompts a snack bar to inform the action was successful
            Snackbar.Add($"Settings have been successfully updated!", Severity.Success);
        }
        else
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
            return;
        }
    }
}
