@page "/lorawan/concentrators/{DeviceID}"
@using System.Text.Json;
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">LoRaWAN Concentrator</MudText>

<MudForm Model="@concentrator" @ref="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">@(string.IsNullOrEmpty(concentrator.DeviceName) ? concentrator.DeviceId : concentrator.DeviceName)</MudText>
                    </CardHeaderContent>
                    <CardHeaderAvatar>
                        @if (concentrator.IsConnected)
                        {
                            <MudTooltip Text="Concentrator is connected">
                                <MudIcon Icon="@Icons.Filled.Wifi" Color="Color.Success" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="Concentrator is not connected">
                                <MudIcon Icon="@Icons.Filled.WifiOff" Color="Color.Error" />
                            </MudTooltip>
                        }
                    </CardHeaderAvatar>
                </MudCardHeader>
            </MudCard>
            <MudItem xs="12" Class="d-flex justify-space-around py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Error" OnClick="DeleteDevice">Delete device</MudButton>
                <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="SaveDevice">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
                <MudTabPanel Text="General">
                    <MudExpansionPanels MultiExpansion="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@concentrator.DeviceId"
                                                              Label="Device ID"
                                                              Variant="Variant.Outlined"
                                                              Required="true"
                                                              ReadOnly="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@concentrator.DeviceName"
                                                              Label="Device name"
                                                              Variant="Variant.Outlined"
                                                              Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField For="@(()=> concentrator.ClientThumbprint)"
                                                              Mask="@maskThumbprint"
                                                              HelperText="ClientThumbprint must contain 40 hexadecimal characters"
                                                              @bind-Value="@concentrator.ClientThumbprint" Label="Client Certificate Thumbprint" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudSelect T="string" Label="Region" Variant="Variant.Outlined" @bind-Value="@concentrator.LoraRegion" Required="true">
                                                    <MudSelectItem Value="@("EU863")" />
                                                    <MudSelectItem Value="@("US902")" />
                                                    <MudSelectItem Value="@("CN470RP1")" />
                                                    <MudSelectItem Value="@("CN470RP2")" />
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudText>
                                                    <b>Status</b>
                                                </MudText>
                                                <MudRadioGroup @bind-SelectedOption="@concentrator.IsEnabled">
                                                    <MudRadio Option=@(true) Color="Color.Primary">
                                                        Enabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>can</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                    <MudRadio Option=@(false) Color="Color.Primary">
                                                        Disabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>cannot</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                </MudRadioGroup>
                                            </MudItem>
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanels>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public string DeviceID { get; set; }

    private Concentrator concentrator { get; set; } = new Concentrator();
    private MudForm form;
    private ConcentratorValidator concentratorValidator = new ConcentratorValidator();

    public PatternMask maskThumbprint = new PatternMask("XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX")
    {
            MaskChars = new[] { new MaskChar('X', @"[0-9a-fA-F]") },
            CleanDelimiters = false,
            Transformation = AllUpperCase
    };

    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Sends a GET request to the DevicesController, to retrieve the specific device from Azure IoT Hub
            concentrator = await Http.GetFromJsonAsync<Concentrator>($"api/lorawan/concentrators/{DeviceID}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to update the device in the Azure IoT Hub
    /// </summary>
    public async void SaveDevice()
    {

        await form.Validate();
        if (!this.concentratorValidator.Validate(this.concentrator).IsValid)
        {
            Snackbar.Add($"One or more validation errors occurred", Severity.Error);
            return;
        }

        var result = await Http.PutAsJsonAsync<Concentrator>($"api/lorawan/concentrators", concentrator);

        result.EnsureSuccessStatusCode();

        // Prompts a snack bar to inform the action was successful
        Snackbar.Add($"Device {concentrator.DeviceId} has been successfully updated!", Severity.Success);

        // Go back to the list of device
        NavManager.NavigateTo("lorawan/concentrators");
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <returns></returns>
    private async Task DeleteDevice()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceId", concentrator.DeviceId);
        var result = await DialogService.Show<DeleteConcentratorPage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices after the deletion
        NavManager.NavigateTo("lorawan/concentrators");
    }
}
