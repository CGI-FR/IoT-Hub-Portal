@page "/devices"
@using AzureIoTHub.Portal
@using AzureIoTHub.Portal.Models.v10
@using System.Web

@attribute [Authorize]
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject PortalSettings Portal
@inject IDeviceTagSettingsClientService DeviceTagSettingsClientService
@inject IDeviceClientService DeviceClientService

<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Search panel">
                <MudGrid>
                    <MudItem xs="12" md="12">
                        <MudTextField @bind-Value="searchID" Placeholder="DeviceID / DeviceName" id="searchID"></MudTextField>
                    </MudItem>
                    @foreach (DeviceTagDto tag in TagList)
                    {
                        if (tag.Searchable)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="searchTags[tag.Name]" Placeholder="@tag.Label"></MudTextField>
                            </MudItem>
                        }
                    }
                    <MudGrid>
                        <MudItem sm="12" md="6">
                            <MudText>Status</MudText>
                            <MudRadioGroup @bind-SelectedOption="@searchStatus" Style="display:flex;align-items:baseline" id="searchStatus">
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("true") Color="Color.Primary" id="searchStatusEnabled">Enabled</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("false") Color="Color.Primary" id="searchDisabled">Disabled</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("") Color="Color.Secondary" id="searchStatusAll">All</MudRadio>
                                </MudItem>
                            </MudRadioGroup>

                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudText>Connection state</MudText>
                            <MudRadioGroup @bind-SelectedOption="@searchState" Style="display:flex;align-items:baseline">
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("true") Color="Color.Primary" id="searchStateConnected">Connected</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("false") Color="Color.Primary" id="searchStateDisconnected">Disconnected</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("") Color="Color.Secondary" id="searchStateAll">All</MudRadio>
                                </MudItem>
                            </MudRadioGroup>
                        </MudItem>
                    </MudGrid>

                    <MudItem xs="12">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Style="margin:0.5em;" id="searchButton" OnClick=Search>Search</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Style="margin:0.5em;" OnClick="Reset" id="resetSearch">Reset</MudButton>
                    </MudItem>

                </MudGrid>

            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    <MudItem xs="12">
        <MudTable T="DeviceListItem" ServerData=@LoadItems Dense=true Hover=true Bordered=true Striped=true @ref="table" Loading="@IsLoading" OnRowClick="@((e) => GoToDetails(e.Item))" RowStyle="cursor: pointer;">
            <ColGroup>
                <col style="width: 5%;" />
                <col style="width: 40%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
                <col style="width: 15%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Devices</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="@Refresh" Size="Size.Medium" id="tableRefreshButton" Class="ma-2"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Add device">
                    <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="AddDevice" id="addDeviceButton" />
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortLabel="DeviceID" T="DeviceListItem">Device</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="IsEnabled" T="DeviceListItem">Allowed</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="IsConnected" T="DeviceListItem">Connection state</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="StatusUpdatedTime" T="DeviceListItem">Last status update</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center">See details</MudTh>
                <MudTh Style="text-align: center">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align: center">
                    <img height="25" src="@context.ImageUrl" />
                </MudTd>
                <MudTd DataLabel="Device">
                    <MudText Typo="Typo.body1" Inline="true">@context.DeviceName</MudText><MudText Class="pl-2" Typo="Typo.caption" Style="@($"color:{Theme.CurrentTheme.Palette.GrayLight};")" Inline="true">@context.DeviceID</MudText>
                </MudTd>

                <MudTd DataLabel="Allowed" Style="text-align: center">
                    @if (context.IsEnabled)
                    {
                        <MudTooltip Text="Device can connect">
                            <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Device cannot connect">
                            <MudIcon Icon="@Icons.Filled.Error" Color="Color.Default" />
                        </MudTooltip>
                    }
                </MudTd>

                <MudTd DataLabel="Connection" Style="text-align: center">
                    @if (context.IsConnected)
                    {
                        <MudTooltip Text="Device is connected">
                            <MudIcon Icon="@Icons.Filled.Wifi" Color="Color.Success" />
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Device is not connected">
                            <MudIcon Icon="@Icons.Filled.WifiOff" Color="Color.Error" />
                        </MudTooltip>
                    }
                </MudTd>
                <MudTd DataLabel="LSU" Style="text-align: center">@context.StatusUpdatedTime</MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <MudTooltip Text="See device details">
                        <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudTooltip Text="Delete device">
                        <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteDevice(context))"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager DisableRowsPerPage=true />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    private string searchID = "";
    private string searchStatus;
    private string searchState;
    private MudTable<DeviceListItem> table;
    private Dictionary<string, string> searchTags = new();

    private bool IsLoading { get; set; } = true;

    private IEnumerable<DeviceTagDto> TagList { get; set; } = new List<DeviceTagDto>();

    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Gets the custom tags that can be searched via the panel
            TagList = await DeviceTagSettingsClientService.GetDeviceTags();
            foreach (var tag in TagList)
            {
                if (tag.Searchable)
                    searchTags.Add(tag.Name, "");
            }
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }

    }

    private async Task<TableData<DeviceListItem>> LoadItems(TableState state)
    {
        try
        {
            string orderBy = null;

            switch (state.SortDirection)
            {
                case SortDirection.Ascending:
                    orderBy = $"{state.SortLabel} asc";
                    break;
                case SortDirection.Descending:
                    orderBy = $"{state.SortLabel} desc";
                    break;
            }

            var uri = $"api/devices?pageNumber={state.Page}&pageSize={state.PageSize}&searchText={HttpUtility.UrlEncode(searchID)}&searchStatus={searchStatus}&searchState={searchState}&orderBy={orderBy}";

            foreach (var searchTag in searchTags.Where(c => !string.IsNullOrEmpty(c.Value)))
            {
                uri += $"&tag.{searchTag.Key}={searchTag.Value}";
            }

            var result = await DeviceClientService.GetDevices(uri);

            return new TableData<DeviceListItem>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);

            return new TableData<DeviceListItem>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void AddDevice()
    {
        navigationManager.NavigateTo("devices/new");
    }

    /// <summary>
    /// Reset all the fields in the search panel
    /// </summary>
    /// <returns></returns>
    private void Reset()
    {
        searchID = "";
        searchStatus = "";
        searchState = "";
        searchTags = searchTags.ToDictionary(tag => tag.Key, tag => "");

        Search();
    }

    private void Search()
    {
        table.ReloadServerData();
    }

    private void Refresh()
    {
        table.ReloadServerData();
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <param name="device">Device to delete from the hub</param>
    /// <returns></returns>
    private async Task DeleteDevice(DeviceListItem device)
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceID", device.DeviceID);
        parameters.Add("deviceName", device.DeviceName);
        var result = await DialogService.Show<DeleteDevicePage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        Search();
    }

    private void GoToDetails(DeviceListItem item)
    {
        navigationManager.NavigateTo($"devices/{item.DeviceID}{((item.SupportLoRaFeatures && Portal.IsLoRaSupported) ? "?isLora=true" : "")}");
    }
}
