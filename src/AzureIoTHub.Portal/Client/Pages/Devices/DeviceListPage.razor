@page "/devices"
@using AzureIoTHub.Portal.Shared
@using AzureIoTHub.Portal.Shared.Models.v10
@using AzureIoTHub.Portal.Shared.Models.v10.Device
@using AzureIoTHub.Portal.Shared.Models.v10.DeviceModel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Web

@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject PortalSettings Portal

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device List</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Search panel">
                <MudGrid>
                    <MudItem xs="12" md="12">
                        <MudTextField @bind-Value="searchID" Placeholder="DeviceID / DeviceName" id="searchID"></MudTextField>
                    </MudItem>
                    @foreach (DeviceTag tag in TagList)
                    {
                        if (tag.Searchable)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="searchTags[tag.Name]" Placeholder="@tag.Label"></MudTextField>
                            </MudItem>
                        }
                    }
                    <MudGrid>
                        <MudItem sm="12" md="6">
                            <MudText>Status</MudText>
                            <MudRadioGroup @bind-SelectedOption="@searchStatus" Style="display:flex;align-items:baseline" id="searchStatus">
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("true") Color="Color.Primary" id="searchStatusEnabled">Enabled</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("false") Color="Color.Primary" id="searchDisabled">Disabled</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("") Color="Color.Secondary" id="searchStatusAll">All</MudRadio>
                                </MudItem>
                            </MudRadioGroup>

                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudText>Connection state</MudText>
                            <MudRadioGroup @bind-SelectedOption="@searchState" Style="display:flex;align-items:baseline">
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("true")  Color="Color.Primary" id="searchStateConnected">Connected</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("false")  Color="Color.Primary" id="searchStateDisconnected">Disconnected</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("")  Color="Color.Secondary" id="searchStateAll">All</MudRadio>
                                </MudItem>
                            </MudRadioGroup>
                        </MudItem>
                    </MudGrid>

                    <MudItem xs="12">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Style="margin:0.5em;" id="searchButton" OnClick=Search>Search</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Style="margin:0.5em;" OnClick="Reset" id="resetSearch">Reset</MudButton>
                    </MudItem>

                </MudGrid>

            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    <MudItem xs="12">
        <MudTable ServerData=@LoadItems Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true @ref="table">
            <ColGroup>
                <col style="width: 5%;" />
                <col style="width: 40%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
                <col style="width: 15%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Devices</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick=@Search Size="Size.Medium" id="tableRefreshButton" Class="ma-2"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="AddDevice" id="tableAddItemButton" Class="ma-2"></MudIconButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Device</MudTh>
                <MudTh Style="text-align: center">Status</MudTh>
                <MudTh Style="text-align: center">Connection state</MudTh>
                <MudTh Style="text-align: center">Last status update</MudTh>
                <MudTh Style="text-align: center">See details</MudTh>
                <MudTh Style="text-align: center">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align: center">
                    <img height="25" src="@context.ImageUrl" />
                </MudTd>
                <MudTd DataLabel="Device" Style="word-break: break-all;">
                    <a class="detail-link" href="@($"devices/{@context.DeviceID}{((@context.SupportLoRaFeatures && Portal.IsLoRaSupported) ? "?isLora=true": "")}")">
                        @(string.IsNullOrEmpty(context.DeviceName) ? context.DeviceID : context.DeviceName)
                    </a>
                </MudTd>

                <MudTd DataLabel="Status" Style="text-align: center">
                    @if (context.IsEnabled)
                    {
                        <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" />
                    }
                </MudTd>

                <MudTd DataLabel="Connection" Style="text-align: center">
                    @if (context.IsConnected)
                    {
                        <MudIcon Icon="@Icons.Filled.Wifi" Color="Color.Success" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Filled.WifiOff" Color="Color.Error" />
                    }
                </MudTd>
                <MudTd DataLabel="LSU" Style="text-align: center">@context.StatusUpdatedTime</MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <a class="detail-link" href="@($"devices/{@context.DeviceID}{((@context.SupportLoRaFeatures && Portal.IsLoRaSupported) ? "?isLora=true": "")}")">
                        <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" />
                    </a>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteDevice(context))"></MudIconButton>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager DisableRowsPerPage=true   />
            </PagerContent>
        </MudTable>
    </MudItem>

    <MudItem xs="12">
        <MudFab OnClick="AddDevice" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Label="Add a new device" id="newDeviceButton"></MudFab>
    </MudItem>

</MudGrid>

@code {
    private string searchID = "";
    private string searchStatus;
    private string searchState;
    private MudTable<DeviceListItem> table;
    private Dictionary<string, string> searchTags = new();

    private Dictionary<int, string> Pages { get; set; } = new();

    private IEnumerable<DeviceTag> TagList { get; set; } = new List<DeviceTag>();

    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        // Gets the custom tags that can be searched via the panel
        TagList = await Http.GetFromJsonAsync<List<DeviceTag>>($"/api/settings/device-tags");
        foreach (DeviceTag tag in TagList)
        {
            if (tag.Searchable)
                searchTags.Add(tag.Name, "");
        }
    }

    private async Task<TableData<DeviceListItem>> LoadItems(TableState state)
    {
        PaginationResult<DeviceListItem> result;

        if (Pages.Keys.Contains(state.Page))
        {
            result = await Http.GetFromJsonAsync<PaginationResult<DeviceListItem>>(Pages[state.Page]);
        }
        else
        {
            var uri = $"api/devices?pageSize={state.PageSize}&searchText={HttpUtility.UrlEncode(searchID)}&searchStatus={searchStatus}&searchState={searchState}";

            foreach(var searchTag in this.searchTags.Where(c => !string.IsNullOrEmpty(c.Value)))
            {
                uri += $"&tag.{searchTag.Key}={searchTag.Value}";
            }

            _ = Pages.TryAdd(state.Page, uri);

            result = await Http.GetFromJsonAsync<PaginationResult<DeviceListItem>>(uri);
        }

        _ = Pages.TryAdd(state.Page + 1, result.NextPage);

        return new TableData<DeviceListItem>
            {
                Items = result.Items,
                TotalItems = result.TotalItems
            };
    }

    private void AddDevice()
    {
        navigationManager.NavigateTo("devices/new");
    }

    /// <summary>
    /// Reset all the fields in the search panel
    /// </summary>
    /// <returns></returns>
    private void Reset()
    {
        searchID = "";
        searchStatus = "";
        searchState = "";
        searchTags = searchTags.ToDictionary(tag => tag.Key, tag => "");

        Search();
    }

    private void Search()
    {
        Pages.Clear();

        table.ReloadServerData();
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <param name="device">Device to delete from the hub</param>
    /// <returns></returns>
    private async Task DeleteDevice(DeviceListItem device)
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceID", device.DeviceID);
        var result = await DialogService.Show<DeleteDevicePage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }
    }
}
