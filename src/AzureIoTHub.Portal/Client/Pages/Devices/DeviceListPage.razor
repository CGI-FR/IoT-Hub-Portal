@page "/devices"
@using AzureIoTHub.Portal.Shared.Models.V10.Device
@using AzureIoTHub.Portal.Shared.Models.V10.DeviceModel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager navigationManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device List</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Search panel">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchID" Placeholder="DeviceID"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        @*<MudTextField @bind-Value="searchName" Placeholder="Name"></MudTextField>*@
                    </MudItem>
                    <MudItem sm="12" md="6">
                        <MudText>Status</MudText>
                        <MudRadioGroup @bind-SelectedOption="@searchStatus" Style="display:flex;align-items:baseline">
                            <MudItem md="4" sm="12">
                                <MudRadio Option="@("true")" Color="Color.Primary">Enabled</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option="@("false")" Color="Color.Primary">Disabled</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option="@("")" Color="Color.Secondary">All</MudRadio>
                            </MudItem>
                        </MudRadioGroup>

                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudText>Connection state</MudText>
                        <MudRadioGroup @bind-SelectedOption="@searchState" Style="display:flex;align-items:baseline">
                            <MudItem md="4" sm="12">
                                <MudRadio Option="@("true")" Color="Color.Primary">Connected</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option="@("false")" Color="Color.Primary">Disconnected</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option="@("")" Color="Color.Secondary">All</MudRadio>
                            </MudItem>
                        </MudRadioGroup>
                    </MudItem>

                    <MudItem xs="12">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Style="margin:0.5em;">Search</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Style="margin:0.5em;" OnClick="Reset">Reset</MudButton>
                    </MudItem>

                </MudGrid>

            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>

    @if (result == null)
    {
        <MudItem Class="custom-centered-container">
            <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudTable Items="@result" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true Filter="new Func<DeviceListItem, bool>(FilterFunc)">
                <ColGroup>
                    <col style="width: 5%;" />
                    <col style="width: 40%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 15%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                </ColGroup>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Devices</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="LoadDevices" Class="ma-2"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="AddDevice" Class="ma-2"></MudIconButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>Device</MudTh>
                    <MudTh Style="text-align: center">Status</MudTh>
                    <MudTh Style="text-align: center">Connection state</MudTh>
                    <MudTh Style="text-align: center">Last status update</MudTh>
                    <MudTh Style="text-align: center">See details</MudTh>
                    <MudTh Style="text-align: center">Delete</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="text-align: center">
                        <img height="25" src="@context.ImageUrl" />
                    </MudTd>
                    <MudTd DataLabel="Device" Style="word-break: break-all;">
                        <a href="@($"devices/{@context.DeviceID}{(@context.SupportLoRaFeatures ? "?isLora=true": "")}")">@context.DeviceName</a>
                    </MudTd>

                    <MudTd DataLabel="Status" Style="text-align: center">
                        @if (context.IsEnabled)
                        {
                        <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                        }
                        else
                        {
                        <MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" />
                        }
                </MudTd>

                <MudTd DataLabel="Connection" Style="text-align: center">
                    @if (context.IsConnected)
                        {
                        <MudIcon Icon="@Icons.Filled.Wifi" Color="Color.Success" />
                        }
                        else
                        {
                        <MudIcon Icon="@Icons.Filled.WifiOff" Color="Color.Error" />
                        }
                </MudTd>
                <MudTd DataLabel="LSU" Style="text-align: center">@context.StatusUpdatedTime</MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <a href="@($"devices/{@context.DeviceID}{(@context.SupportLoRaFeatures ? "?isLora=true": "")}")">
                        <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" />
                    </a>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteDevice(context))"></MudIconButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
            </PagerContent>
        </MudTable>
    </MudItem>
    }

    <MudItem xs="12">
        <a href="devices/new"><MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Label="Add a new device" /></a>
    </MudItem>

</MudGrid>

@code {
    private DeviceListItem[] result;
    private string searchID = "";
    private string searchStatus = "";
    private string searchState = "";
    // private string searchName = "";

    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadDevices();
    }

    private void AddDevice()
    {
        navigationManager.NavigateTo("devices/new");
    }

    /// <summary>
    /// Sends a GET request to the DevicesController, to retrieve all devices from Azure IoT Hub
    /// </summary>
    /// <returns></returns>
    private async Task LoadDevices()
    {
        try
        {
            result = await Http.GetFromJsonAsync<DeviceListItem[]>("api/Devices");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    /// <summary>
    /// Reset all the fields in the search panel
    /// </summary>
    /// <returns></returns>
    private void Reset()
    {
        searchID = "";
        searchStatus = "";
        searchState = "";
        // searchName = "";
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <param name="device">Device to delete from the hub</param>
    /// <returns></returns>
    private async Task DeleteDevice(DeviceListItem device)
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceID", device.DeviceID);
        var result = await DialogService.Show<DeleteDevicePage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Update the list of devices after the deletion
        await LoadDevices();
    }

    /// <summary>
    /// Filters the list of devices, based on fields set in the search panel
    /// </summary>
    /// <param name="item">Device represented in the current row</param>
    /// <returns>Boolean</returns>
    private bool FilterFunc(DeviceListItem item)
    {
        bool flagID = checkFlag(item.DeviceID, searchID);
        bool flagStatus = checkFlag(item.IsEnabled.ToString(), searchStatus);
        bool flagState = checkFlag(item.IsConnected.ToString(), searchState);
        // bool flagLocation = checkFlag(item.Name, searchName);

        // Current row is shown only if all the flags are true
        if (flagID && flagStatus && flagState)
            return true;

        return false;
    }

    /// <summary>
    /// Checks if the specific device value matches the search criteria
    /// </summary>
    /// <param name="deviceValue">Device attribute being compared</param>
    /// <param name="searchString">Field value in the search panel</param>
    /// <returns>True if it matches of field is empty</returns>
    private bool checkFlag(string deviceValue, string searchString)
    {
        bool flag;
        try
        {
            flag = string.IsNullOrWhiteSpace(searchString) || deviceValue.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        }

        //May happen if the device attribute is set to null
        catch (NullReferenceException)
        {
            flag = false;
        }
        return flag;
    }
}
