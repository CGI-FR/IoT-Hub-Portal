@page "/devices/new"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models.Device
@using AzureIoTHub.Portal.Shared.Models
@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device</MudText>

<MudGrid>
    <MudItem xs="12" sm="4" md="3">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Align="Align.Center" Typo="Typo.h5">@Device.DeviceID</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <div class="d-flex justify-center mb-4">
                    <MudAvatar Image="@Device.ImageUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="8" md="9">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>Device Details</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="@Device.DeviceID" Label="Device ID" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="@Device.DeviceType"
                                   Dense="true" Variant="Variant.Outlined"
                                   For="@(()=> Device.DeviceType)">
                            <MudSelectItem Value="@("LoRa Device")" />
                            <MudSelectItem Value="@("Other")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="DeviceModel"
                                         Dense="true" Variant="Variant.Outlined"
                                         SearchFunc="@Search"
                                         ValueChanged="@ModelSelected"
                                         ToStringFunc="@(x => x.Name)"
                                         ResetValueOnEmptyText="true"
                                         Immediate="true" Clearable="true"
                                         CoerceText="true" CoerceValue="false" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="@Device.AssetId" Label="IoT Asset ID" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="@Device.LocationCode" Label="Location Asset ID" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudText>
                            <b>Status</b>
                        </MudText>
                        <MudText Typo="Typo.body2">
                            Means that the device could connect to the platform.
                        </MudText>
                        <MudSwitch @bind-Checked="@Device.IsEnabled" Color="Color.Secondary" />
                    </MudItem>

                    <MudSpacer />

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="@Device.AppEUI" Label="OTAA AppEUI" Variant="Variant.Outlined" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="@Device.AppKey" Label="OTAA AppKey" Variant="Variant.Outlined" />
                    </MudItem>

                </MudGrid>
            </MudCardContent>
            <MudCardActions Class="pb-4 pl-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="SaveDevice">Save Changes</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private IEnumerable<DeviceModel> DeviceModelList { get; set; } = new List<DeviceModel>();

    protected override async Task OnInitializedAsync()
    {
        Device.DeviceType = "LoRa Device";

        // Enable device by default
        Device.IsEnabled = true;

        // Gets a list of device model previously registered to Azure to allow autocomplete field in the form
        DeviceModelList = await Http.GetFromJsonAsync<DeviceModel[]>("api/DeviceModels");
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to add the new device to the Azure IoT Hub
    /// </summary>
    public async void SaveDevice()
    {
        // Sends the device to be added to the controller
        var response = await Http.PostAsJsonAsync<DeviceDetails>($"api/Devices", Device);

        if (response.IsSuccessStatusCode)
        {
            // Prompts a snack bar to inform the action was successful
            Snackbar.Add($"Device {Device.DeviceID} has been successfully created!", Severity.Success);
            
            // Go back to the list of devices
            NavManager.NavigateTo("devices");
        }

        // TODO : Deal more effectively with different error messages
        else
        {
            string errorMsg = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Oh oh, something went wrong while creating device {Device.DeviceID}... <br> {errorMsg}", Severity.Error);
        }
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    private async Task<IEnumerable<DeviceModel>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return DeviceModelList;

        return DeviceModelList
                    .Where(x => x.Name.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void ModelSelected(DeviceModel model)
    {
        // Reset all the other fields if the Model Type field is cleared
        if (model == null)
        {
            Device.ModelId = null;
            Device.ModelName = null;
            Device.ImageUrl = null;
            Device.AppEUI = null;
            Device.SensorDecoder = null;
        }
        else
        {
            Device.ModelId = model.ModelId;
            Device.ModelName = model.Name;
            Device.ImageUrl = model.ImageUrl;
            Device.AppEUI = model.AppEUI ?? "Selected model contains no AppEUI value";
            Device.SensorDecoder = model.SensorDecoderURL;
        }
    }
}

