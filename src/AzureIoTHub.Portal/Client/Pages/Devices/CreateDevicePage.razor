@page "/devices/new"
@using AzureIoTHub.Portal.Client.Pages.Devices.LoRaWAN
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device</MudText>
<MudForm Model="@Device" @ref="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">@(string.IsNullOrEmpty(Device.DeviceName) ? Device.DeviceID : Device.DeviceName)</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar Image="@Device.ImageUrl?.ToString()" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                    </div>
                </MudCardContent>
            </MudCard>
            <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
                <MudTabPanel Text="General" Style=@(standardValidator.Validate(Device).IsValid ? "" : "color: red")>
                    <MudExpansionPanels MultiExpansion="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudAutocomplete T="DeviceModel"
                                                                 ValueChanged=@ChangeModel
                                                                 SearchFunc="@Search"
                                                                 Label="Model*"
                                                                 Dense=true
                                                                 For=@(() => this.DeviceModel)
                                                                 Variant="Variant.Outlined"
                                                                 ToStringFunc="@(x => x.Name)"
                                                                 ResetValueOnEmptyText=true
                                                                 Immediate=true
                                                                 Clearable=true
                                                                 CoerceText=true
                                                                 CoerceValue=false />
                                                @if (Device.ModelId == null && displayValidationErrorMessages)
                                                {
                                                    <p class="validation-error-message">The Model is required.</p>
                                                }
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@Device.DeviceID"
                                                              Label="Device ID"
                                                              Variant="Variant.Outlined"
                                                              For="@(()=> Device.DeviceID)"
                                                              Required="true"
                                                              HelperText="DeviceID must contain 16 hexadecimal characters (numbers from 0 to 9 and/or letters from A to F)" />
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudTextField @bind-Value="@Device.DeviceName"
                                                              Label="Device name"
                                                              Variant="Variant.Outlined"
                                                              For="@(()=> Device.DeviceName)"
                                                              Required="true" />
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudText>
                                                    <b>Status</b>
                                                </MudText>
                                                <MudSwitch @bind-Checked="@Device.IsEnabled" Color="Color.Secondary" />
                                                @if (Device.IsEnabled)
                                                {
                                                    <MudText Typo="Typo.body2">The device <b>can</b> connect to the platform.</MudText>
                                                }
                                                else
                                                {
                                                    <MudText Typo="Typo.body2">The device <b>cannot</b> connect to the platform.</MudText>
                                                }
                                            </MudItem>
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Tags">
                                    <TitleContent><MudText Typo="Typo.h6"  Style=@(CheckTagsError() ? "color: red" : "")>Tags</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            @foreach (DeviceTag tag in TagList)
                                            {
                                                <MudItem xs="12" md="6">
                                                    <MudTextField @bind-Value="Device.Tags[tag.Name]" Label="@tag.Label"
                                                              Required="@tag.Required"
                                                              Variant="Variant.Outlined" />
                                                </MudItem>
                                            }
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        @if (!IsLoRa && Properties.Any())
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Properties">
                                        <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                @foreach (var item in Properties.OrderBy(c => c.Order))
                                                {
                                                    switch (item.PropertyType)
                                                    {
                                                        case DevicePropertyType.Boolean:
                                                            <MudItem xs="12" md="4">
                                                                <MudCheckBox @bind-Checked="item.Value" Label="@item.DisplayName" Color="@Color.Primary" Converter="@(new StringToBoolConverter())" TriState="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Double:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Float:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Integer:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Long:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.String:
                                                            <MudItem xs="12" md="12">
                                                                <MudTextField @bind-Value="item.Value" Label="@item.DisplayName" Format="F1" Variant="Variant.Outlined" Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                    }
                                                }
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudExpansionPanels>
                </MudTabPanel>
                @if (IsLoRa)
                {
                    <MudTabPanel Text="LoRaWAN" Style=@(loraValidator.Validate(Device as LoRaDeviceDetails).IsValid ? "" : "color: red")>
                            <CreateLoraDevice LoRaDevice="@(Device as LoRaDeviceDetails)" loraModel="@(loRaDeviceModel)" LoraValidator="@(loraValidator)" />
                    </MudTabPanel>
                }
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>

@code {

    private MudForm form;

    private string ApiUrlBase => this.IsLoRa ? "/api/lorawan/devices" : "api/devices";
    private DeviceDetailsValidator standardValidator = new DeviceDetailsValidator();
    private LoRaDeviceDetailsValidator loraValidator = new LoRaDeviceDetailsValidator();
    private LoRaDeviceModel loRaDeviceModel { get; set; }


    private bool IsLoRa => DeviceModelList.SingleOrDefault(c => c.ModelId == Device.ModelId)?.SupportLoRaFeatures ?? false;

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private IEnumerable<DeviceModel> DeviceModelList { get; set; } = new List<DeviceModel>();
    private DeviceModel DeviceModel = null;
    private IEnumerable<DeviceTag> TagList { get; set; } = new List<DeviceTag>();
    private List<DevicePropertyValue> Properties = new List<DevicePropertyValue>();

    private bool displayValidationErrorMessages = false;

    protected override async Task OnInitializedAsync()
    {
        // Enable device by default
        Device.IsEnabled = true;

        // Gets a list of device model previously registered to Azure to allow autocomplete field in the form
        DeviceModelList = await Http.GetFromJsonAsync<DeviceModel[]>("api/models");

        // Gets the custom tags that can be set when creating a device
        TagList = await Http.GetFromJsonAsync<IEnumerable<DeviceTag>>($"/api/settings/device-tags");

        foreach (DeviceTag tag in TagList)
        {
            Device.Tags.Add(tag.Name, "");
        }
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to add the new device to the Azure IoT Hub
    /// </summary>
    public async void Save()
    {
        await form.Validate();
        bool tagValidationError = CheckTagsError();

        if (!standardValidator.Validate(Device).IsValid
            || (IsLoRa && !this.loraValidator.Validate(this.Device as LoRaDeviceDetails).IsValid)
            || tagValidationError)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            // Allows to display ValidationError messages for the MudAutocomplete field.
            displayValidationErrorMessages = true;

            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
            result = await Http.PostAsJsonAsync(ApiUrlBase, Device as LoRaDeviceDetails);
        else
            result = await Http.PostAsJsonAsync(ApiUrlBase, Device);

        result.EnsureSuccessStatusCode();

        await Http.PostAsJsonAsync($"{ApiUrlBase}/{DeviceID}/properties", Properties);

        result.EnsureSuccessStatusCode();

        // Prompts a snack bar to inform the action was successful
        Snackbar.Add($"Device {Device.DeviceID} has been successfully created!", Severity.Success);

        // Go back to the list of devices
        NavManager.NavigateTo("devices");
    }

    private bool CheckTagsError()
    {
        bool tagValidationError = false;

        foreach (DeviceTag tag in TagList)
        {
            if (tag.Required && string.IsNullOrEmpty(Device.Tags[tag.Name]))
            {
                tagValidationError = true;
            }
        }
        return tagValidationError;
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    private async Task<IEnumerable<DeviceModel>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return DeviceModelList;

        return DeviceModelList
                    .Where(x => x.Name.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task ChangeModel(DeviceModel model)
    {
        Properties.Clear();

        Device = new DeviceDetails
            {
                DeviceID = Device.DeviceID,
                ModelId = model?.ModelId,
                ImageUrl = model?.ImageUrl,
                DeviceName = Device.DeviceName,
                IsEnabled = Device.IsEnabled,
                Tags = Device.Tags
            };

        if (model == null)
        {
            return;
        }

        if (model?.SupportLoRaFeatures ?? false)
        {
            var device = new LoRaDeviceDetails
                {
                    DeviceID = Device.DeviceID,
                    ModelId = model.ModelId,
                    ImageUrl = model.ImageUrl,
                    DeviceName = Device.DeviceName,
                    IsEnabled = Device.IsEnabled,
                    Tags = Device.Tags
                };

            Device = device;

            await Http.GetFromJsonAsync<LoRaDeviceModel>($"api/lorawan/models/{model.ModelId}")
                .ContinueWith(c =>
                {
                    device.AppEUI = c.Result.AppEUI;
                    device.SensorDecoder = c.Result.SensorDecoder;
                    device.UseOTAA = c.Result.UseOTAA;
                    loRaDeviceModel = c.Result;
                });
        }
        else
        {
            await Http.GetFromJsonAsync<IEnumerable<DeviceProperty>>($"api/models/{model.ModelId}/properties")
            .ContinueWith(c =>
            {
                Properties.AddRange(c.Result.Select(x => new DevicePropertyValue
                    {
                        DisplayName = x.DisplayName,
                        IsWritable = x.IsWritable,
                        Name = x.Name,
                        Order = x.Order,
                        PropertyType = x.PropertyType
                    }));
            });
        }
    }
}

