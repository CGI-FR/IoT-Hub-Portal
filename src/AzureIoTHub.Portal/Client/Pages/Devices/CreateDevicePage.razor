@page "/devices/new"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models.Device
@using AzureIoTHub.Portal.Shared.Models
@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@Device" OnValidSubmit="SaveDevice" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">New device</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudItem xs="6" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <img class="custom-img-sm" src="@Device.ImageUrl" />
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Device ID : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@Device.DeviceID"
                                                      Margin="Margin.Dense" Variant="Variant.Outlined"
                                                      For="@(()=> Device.DeviceID)"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Type : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudSelect T="string" @bind-Value="@Device.DeviceType"
                                                   Dense="true" Variant="Variant.Outlined"
                                                   For="@(()=> Device.DeviceType)"
                                                   ReadOnly="true"
                                                   Class="custom-disabled">
                                            <MudSelectItem Value="@("LoRa Device")" />
                                            <MudSelectItem Value="@("Other")" />
                                        </MudSelect>
                                    </MudItem>
                                </MudItem>
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Model Type : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudAutocomplete T="DeviceModel"
                                                         Dense="true" Variant="Variant.Outlined"
                                                         SearchFunc="@Search"
                                                         ValueChanged="@ModelSelected"
                                                         ToStringFunc="@(x => x.Name)"
                                                         ResetValueOnEmptyText="true"
                                                         Immediate="true" Clearable="true"
                                                         CoerceText="true" CoerceValue="false"/>
                                        @if (Device.ModelName == null && displayValidationErrorMessages)
                                        {
                                            <p class="custom-validation-error-txt">The Model Type field is required.</p>
                                        }
                                    </MudItem>
                                </MudItem>
                            </MudItem>

                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>IoT Asset ID : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@Device.AssetID"
                                                      Margin="Margin.Dense" Variant="Variant.Outlined"
                                                      For="@(()=> Device.AssetID)"></MudTextField>
                                    </MudItem>
                                </MudItem>

                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>OTAA AppEUI : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@Device.AppEUI"
                                                      Margin="Margin.Dense" Variant="Variant.Outlined"
                                                      ReadOnly="true"
                                                      Class="custom-disabled"></MudTextField>
                                        @if(Device.AppEUI == null && displayValidationErrorMessages){
                                            <p class="custom-validation-error-txt">The OTAA AppKey field is required.</p>
                                        }
                                    </MudItem>
                                </MudItem>
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>OTAA AppKey : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@Device.AppKey"
                                                      Margin="Margin.Dense" Variant="Variant.Outlined"
                                                      For="@(()=> Device.AppKey)"></MudTextField>
                                    </MudItem>
                                </MudItem>
                            </MudItem>
                            <MudItem md="6" xs="12">
                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Location Asset ID : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudTextField @bind-Value="@Device.LocationCode"
                                                      Margin="Margin.Dense" Variant="Variant.Outlined"
                                                      For="@(()=> Device.LocationCode)"></MudTextField>
                                    </MudItem>
                                </MudItem>

                                <MudItem xs="12" Class="custom-form">
                                    <MudItem md="3" sm="12">
                                        <MudText>Status : </MudText>
                                    </MudItem>
                                    <MudItem md="9" sm="12">
                                        <MudRadioGroup @bind-SelectedOption="@Device.IsEnabled" Class="custom-form">
                                            <MudItem md="4" sm="12">
                                                <MudRadio Option="@(true)" Color="Color.Primary">Enabled</MudRadio>
                                            </MudItem>
                                            <MudItem md="4" sm="12">
                                                <MudRadio Option="@(false)" Color="Color.Primary">Disabled</MudRadio>
                                            </MudItem>
                                        </MudRadioGroup>
                                    </MudItem>
                                </MudItem>

                            </MudItem>

                            <MudItem md="6" xs="12">

                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudFab ButtonType="ButtonType.Submit" Color="Color.Secondary" Icon="@Icons.Material.Filled.Save" Label="Save" Disabled="false" Class="ml-auto" />
                </MudCardActions>

            </EditForm>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private IEnumerable<DeviceModel> DeviceModelList { get; set; } = new List<DeviceModel>();

    private bool displayValidationErrorMessages = false;

    protected override async Task OnInitializedAsync()
    {
        Device.DeviceType = "LoRa Device";

        // Enable device by default
        Device.IsEnabled = true;

        // Gets a list of device model previously registered to Azure to allow autocomplete field in the form
        DeviceModelList = await Http.GetFromJsonAsync<DeviceModel[]>("api/DeviceModels");
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to add the new device to the Azure IoT Hub
    /// </summary>
    public async void SaveDevice(EditContext context)
    {
        // Sends the device to be added to the controller
        var response = await Http.PostAsJsonAsync<DeviceDetails>($"api/Devices", Device);

        if (response.IsSuccessStatusCode)
        {
            // Prompts a snack bar to inform the action was successful
            Snackbar.Add($"Device {Device.DeviceID} has been successfully created!", Severity.Success);
            
            // Go back to the list of devices
            NavManager.NavigateTo("devices");
        }

        // TODO : Deal more effectively with different error messages
        else
        {
            string errorMsg = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"Oh oh, something went wrong while creating device {Device.DeviceID}... <br> {errorMsg}", Severity.Error);
        }
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    private async Task<IEnumerable<DeviceModel>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return DeviceModelList;

        return DeviceModelList
                    .Where(x => x.Name.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void ModelSelected(DeviceModel model)
    {
        // Reset all the other fields if the Model Type field is cleared
        if(model == null)
        {
            Device.ModelId = null;
            Device.ModelName = null;
            Device.ImageUrl = null;
            Device.AppEUI = null;
            Device.SensorDecoder = null;
        }
        else
        {
            Device.ModelId = model.ModelId;
            Device.ModelName = model.Name;
            Device.ImageUrl = new Uri(model.ImageUrl);
            Device.AppEUI = model.AppEUI ?? "Selected model contains no AppEUI value";
            Device.SensorDecoder = model.SensorDecoderURL;            
        }
    }

    private void HandleInvalidSubmit(EditContext context)
    {
        // Invalid submit manually handled
        // Waiting for MudBlazor MudAutocomplete issue #2674 to be fixed
        displayValidationErrorMessages = true;
    } 
}

