@page "/devices/new"
@using AzureIoTHub.Portal.Client.Pages.Devices.LoRaWAN
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Shared.Models.V10.Device
@using AzureIoTHub.Portal.Shared.Models.V10.DeviceModel
@using AzureIoTHub.Portal.Shared.Models.V10.LoRaWAN.LoRaDevice
@using AzureIoTHub.Portal.Shared.Models.V10.LoRaWAN.LoRaDeviceModel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device</MudText>
<MudForm Model="@Device" @ref="form" Validation="@(standardValidator.ValidateValue)">
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
        <MudTabPanel Text="General" Style=@(standardValidator.Validate(Device).IsValid ? "" : "color: red")>
            <MudGrid>
                <MudItem xs="12" sm="4" md="3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Align="Align.Center" Typo="Typo.h5">@Device.DeviceID</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex justify-center mb-4">
                                <MudAvatar Image="@Device.ImageUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="8" md="9">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Device Details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudAutocomplete T="DeviceModel"
                                                     @bind-Value="Model"
                                                     Label="Model*"
                                                     Dense="true" Variant="Variant.Outlined"
                                                     SearchFunc="@Search"
                                                     ToStringFunc="@(x => x.Name)"
                                                     For="@(()=> Model)"
                                                     ResetValueOnEmptyText="true"
                                                     Immediate="true" Clearable="true"
                                                     CoerceText="true" CoerceValue="false" />
                                    @if (Device.ModelId == null && displayValidationErrorMessages)
                                    {
                                        <p class="validation-error-message">The Model is required.</p>
                                    }
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.DeviceID"
                                                  Label="Device ID"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceID)"
                                                  Required="true"
                                                  HelperText="DeviceID must contain 16 hexadecimal characters (numbers from 0 to 9 and/or letters from A to F)" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="@Device.DeviceName"
                                                  Label="Device name"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceName)"
                                                  Required="true" />
                                </MudItem>

                                @foreach (DeviceTag tag in TagList)
                                {
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="Device.CustomTags[tag.Name]" Label="@tag.Label"
                                                  Required="@tag.Required"
                                                  Variant="Variant.Outlined" />
                                    </MudItem>
                                }

                                <MudItem xs="12">
                                    <MudText>
                                        <b>Status</b>
                                    </MudText>
                                    <MudSwitch @bind-Checked="@Device.IsEnabled" Color="Color.Secondary" />
                                    @if (Device.IsEnabled)
                                    {
                                        <MudText Typo="Typo.body2">The device <b>can</b> connect to the platform.</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">The device <b>cannot</b> connect to the platform.</MudText>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Save">Save Changes</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        @if (IsLoRa)
        {
            <MudTabPanel Text="LoRaWAN" Style=@(loraValidator.Validate(Device as LoRaDeviceDetails).IsValid ? "" : "color: red")>
                <MudGrid>
                    <CreateLoraDevice LoRaDevice="@(Device as LoRaDeviceDetails)" loraModel="@(loRaDeviceModel)" LoraValidator="@(loraValidator)" OnSaveClick="Save" />
                </MudGrid>
            </MudTabPanel>
        }
    </MudTabs>
</MudForm>
@code {

    private MudForm form;

    private string ApiUrlBase => this.IsLoRa ? "/api/lorawan/devices" : "api/devices";
    private DeviceDetailsValidator standardValidator = new DeviceDetailsValidator();
    private LoRaDeviceDetailsValidator loraValidator = new LoRaDeviceDetailsValidator();
    private DeviceModel Model
    {
        get
        {
            return DeviceModelList.SingleOrDefault(x => x.ModelId == Device.ModelId);
        }
        set
        {
            ChangeModel(value);
        }
    }
    private LoRaDeviceModel loRaDeviceModel { get; set; }

    private bool IsLoRa => this.Model?.SupportLoRaFeatures ?? false;

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private IEnumerable<DeviceModel> DeviceModelList { get; set; } = new List<DeviceModel>();

    private IEnumerable<DeviceTag> TagList { get; set; } = new List<DeviceTag>();
    private Dictionary<string, string> TagDict { get; set; } = new Dictionary<string, string>();

    private bool displayValidationErrorMessages = false;

    protected override async Task OnInitializedAsync()
    {
        // Enable device by default
        Device.IsEnabled = true;

        // Gets a list of device model previously registered to Azure to allow autocomplete field in the form
        DeviceModelList = await Http.GetFromJsonAsync<DeviceModel[]>("api/models");

        // Gets the custom tags that can be set when creating a device
        TagList = await Http.GetFromJsonAsync<List<DeviceTag>>($"/api/settings/device-tags");
        foreach (DeviceTag tag in TagList)
        {
            TagDict.Add(tag.Name, "");
        }
        Device.CustomTags = TagDict;
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to add the new device to the Azure IoT Hub
    /// </summary>
    public async void Save()
    {
        await form.Validate();
        bool tagValidationError = CheckTags();

        if (!standardValidator.Validate(Device).IsValid
            || (IsLoRa && !this.loraValidator.Validate(this.Device as LoRaDeviceDetails).IsValid)
            || tagValidationError)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            // Allows to display ValidationError messages for the MudAutocomplete field.
            displayValidationErrorMessages = true;

            //if (IsLoRa)
            //{
            //    var loraValidation = this.loraValidator.Validate(this.Device as LoRaDeviceDetails);

            //    loraValidation.Errors.ForEach(x => Console.WriteLine(x.ErrorMessage));
            //}

            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
            result = await Http.PostAsJsonAsync(ApiUrlBase, Device as LoRaDeviceDetails);
        else
            result = await Http.PostAsJsonAsync(ApiUrlBase, Device);

        result.EnsureSuccessStatusCode();

        // Prompts a snack bar to inform the action was successful
        Snackbar.Add($"Device {Device.DeviceID} has been successfully created!", Severity.Success);

        // Go back to the list of devices
        NavManager.NavigateTo("devices");
    }

    private bool CheckTags()
    {
        bool tagValidationError = false;

        foreach (DeviceTag tag in TagList)
        {
            if (tag.Required && string.IsNullOrEmpty(Device.CustomTags[tag.Name]))
            {
                tagValidationError = true;
            }
        }
        return tagValidationError;
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    private async Task<IEnumerable<DeviceModel>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return DeviceModelList;

        return DeviceModelList
                    .Where(x => x.Name.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void ChangeModel(DeviceModel model)
    {
        if (model?.SupportLoRaFeatures ?? false)
        {
            var device = new LoRaDeviceDetails
                {
                    DeviceID = Device.DeviceID,
                    DeviceName = Device.DeviceName,
                    IsEnabled = Device.IsEnabled
                };

            Device = device;

            Http.GetFromJsonAsync<LoRaDeviceModel>($"api/lorawan/models/{model.ModelId}")
                .ContinueWith(c =>
                {
                    device.AppEUI = c.Result.AppEUI;
                    device.SensorDecoder = c.Result.SensorDecoder;
                    loRaDeviceModel = c.Result;
                });
        }
        else
        {
            Device = new DeviceDetails
                {
                    DeviceID = Device.DeviceID,
                    DeviceName = Device.DeviceName,
                    IsEnabled = Device.IsEnabled
                };
        }

        Device.ModelId = model?.ModelId;
        Device.ImageUrl = model?.ImageUrl;
        Device.CustomTags = TagDict;
    }
}

