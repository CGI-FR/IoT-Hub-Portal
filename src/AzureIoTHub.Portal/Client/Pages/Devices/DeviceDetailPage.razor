@page "/devices/{DeviceID}"
@using AzureIoTHub.Portal.Client.Pages.Devices.LoRaWAN
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Shared.Models
@using AzureIoTHub.Portal.Shared.Models.v10.Device
@using AzureIoTHub.Portal.Shared.Models.v10.DeviceModel
@using AzureIoTHub.Portal.Shared.Models.v10.LoRaWAN.LoRaDevice
@using AzureIoTHub.Portal.Shared.Models.v10.LoRaWAN.LoRaDeviceModel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Details</MudText>
<MudForm Model="@Device" @ref="form" Validation="@(standardValidator.ValidateValue)">
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
        <MudTabPanel Text="General" Style=@(standardValidator.Validate(Device).IsValid ? "" : "color: red")>
            <MudGrid>
                <MudItem xs="12" sm="4" md="3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h5">@Device.DeviceID</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (isLoaded && (!IsLoRa || !(Device is LoRaDeviceDetails)))
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Filled.Cable" OnClick="ShowConnectionString">Connect</MudButton>
                                }
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex justify-center mb-4">
                                <MudAvatar Image="@Device.ImageUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="8" md="9">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Device Details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.DeviceID"
                                                  Label="Device ID"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceID)"
                                                  Required="true"
                                                  ReadOnly="true"
                                                  HelperText="DeviceID must contain 16 hexadecimal characters (numbers from 0 to 9 and/or letters from A to F)" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.DeviceName"
                                                  Label="Device name"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceName)"
                                                  Required="true" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText>
                                        <b>Status</b>
                                    </MudText>
                                    <MudSwitch @bind-Checked="@Device.IsEnabled" Color="Color.Secondary" />
                                    @if (Device.IsEnabled)
                                    {
                                        <MudText Typo="Typo.body2">The device <b>can</b> connect to the platform.</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">The device <b>cannot</b> connect to the platform.</MudText>
                                    }
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText Typo="Typo.h6" Class="mb-4">Tags</MudText>
                                </MudItem>
                                @foreach (DeviceTag tag in TagList)
                                {
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="Device.Tags[tag.Name]" Label="@tag.Label"
                                                  Required="@tag.Required"
                                                  Variant="Variant.Outlined" />
                                    </MudItem>
                                }

                                @if (!IsLoRa)
                                {
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h6" Class="mb-4">Properties</MudText>
                                    </MudItem>
                                    @foreach (var item in Properties.OrderBy(c => c.Order))
                                    {
                                        switch (item.PropertyType)
                                        {
                                            case DevicePropertyType.Boolean:
                                                <MudItem xs="12" md="4">
                                                    <MudCheckBox @bind-Checked="item.Value" Label="@item.DisplayName" Color="@Color.Primary" Converter="@(new StringToBoolConverter())" TriState="true" />
                                                </MudItem>
                                                break;
                                            case DevicePropertyType.Double:
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                  Clearable="true" />
                                                </MudItem>
                                                break;
                                            case DevicePropertyType.Float:
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                  Clearable="true" />
                                                </MudItem>
                                                break;
                                            case DevicePropertyType.Integer:
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                  Clearable="true" />
                                                </MudItem>
                                                break;
                                            case DevicePropertyType.Long:
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                  Clearable="true" />
                                                </MudItem>
                                                break;
                                            case DevicePropertyType.String:
                                                <MudItem xs="12" md="12">
                                                    <MudTextField @bind-Value="item.Value" Label="@item.DisplayName" Format="F1" Variant="Variant.Outlined" Clearable="true" />
                                                </MudItem>
                                                break;
                                        }

                                    }
                                }
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Save">Save Changes</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        @if (IsLoRa && Device != null && Commands != null)
        {
            <MudTabPanel Text="LoRaWAN" Style=@(loraValidator.Validate(Device as LoRaDeviceDetails).IsValid ? "" : "color: red")>
                <MudGrid>
                    <EditLoraDevice LoRaDevice="@(Device as LoRaDeviceDetails)" LoraValidator="@(loraValidator)" Commands="@Commands" OnSaveClick="Save" />
                </MudGrid>
            </MudTabPanel>
        }
    </MudTabs>
</MudForm>
@code {

    private MudForm form;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsLoRa
    {
        get;
        set;
    }

    private string ApiUrlBase => this.IsLoRa ? "/api/lorawan/devices" : "api/devices";
    private DeviceDetailsValidator standardValidator = new DeviceDetailsValidator();
    private LoRaDeviceDetailsValidator loraValidator = new LoRaDeviceDetailsValidator();

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private bool isLoaded = false;

    private IEnumerable<DeviceModel> DeviceModelList { get; set; } = Array.Empty<DeviceModel>();

    private IEnumerable<DeviceModelCommand> Commands { get; set; }

    private IEnumerable<DeviceTag> TagList { get; set; } = Array.Empty<DeviceTag>();

    private IEnumerable<DevicePropertyValue> Properties = Array.Empty<DevicePropertyValue>();

    protected override async Task OnInitializedAsync()
    {
        if (IsLoRa)
        {
            Device = await Http.GetFromJsonAsync<LoRaDeviceDetails>($"{ApiUrlBase}/{DeviceID}");
            Commands = await Http.GetFromJsonAsync<DeviceModelCommand[]>($"/api/lorawan/models/{Device.ModelId}/commands");
        }
        else
        {
            Device = await Http.GetFromJsonAsync<DeviceDetails>($"{ApiUrlBase}/{DeviceID}");
            Properties = await Http.GetFromJsonAsync<List<DevicePropertyValue>>($"{ApiUrlBase}/{DeviceID}/properties");
        }

        TagList = await Http.GetFromJsonAsync<List<DeviceTag>>($"/api/settings/device-tags");

        isLoaded = true;
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to add the new device to the Azure IoT Hub
    /// </summary>
    public async void Save()
    {
        await form.Validate();
        bool tagValidationError = CheckTags();

        if (!standardValidator.Validate(Device).IsValid
            || (IsLoRa && !this.loraValidator.Validate(this.Device as LoRaDeviceDetails).IsValid)
            || tagValidationError)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            //if (IsLoRa)
            //{
            //    var loraValidation = this.loraValidator.Validate(this.Device as LoRaDeviceDetails);

            //    loraValidation.Errors.ForEach(x => Console.WriteLine(x.ErrorMessage));
            //}


            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
            result = await Http.PutAsJsonAsync(ApiUrlBase, Device as LoRaDeviceDetails);
        else
            result = await Http.PutAsJsonAsync(ApiUrlBase, Device);

        result.EnsureSuccessStatusCode();

        await Http.PostAsJsonAsync($"{ApiUrlBase}/{DeviceID}/properties", Properties);

        result.EnsureSuccessStatusCode();

        // Prompts a snack bar to inform the action was successful
        Snackbar.Add($"Device {Device.DeviceID} has been successfully updated!", Severity.Success);

        // Go back to the list of devices
        NavManager.NavigateTo("devices");
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    private async Task<IEnumerable<DeviceModel>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return DeviceModelList;

        return DeviceModelList
                    .Where(x => x.Name.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public void ShowConnectionString()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ConnectionStringDialog.deviceId), this.DeviceID);

        DialogService.Show<ConnectionStringDialog>("Device Credentials", parameters);
    }

    private bool CheckTags()
    {
        bool tagValidationError = false;

        foreach (DeviceTag tag in TagList)
        {
            if (tag.Required && string.IsNullOrEmpty(Device.Tags[tag.Name]))
            {
                tagValidationError = true;
            }
        }
        return tagValidationError;
    }
}
