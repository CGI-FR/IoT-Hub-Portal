@page "/devices/{DeviceID}"
@using AzureIoTHub.Portal.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models.Device
@using System.Text.Json;
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@Device" OnValidSubmit="SaveDevice" OnInvalidSubmit="HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">Device detail</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (Device.DeviceID == null)
                        {
                            <MudItem Class="custom-centered-container">
                                <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
                            </MudItem>
                        }
                        else
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudItem xs="6" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <img class="custom-img-sm" src="@Device.ImageUrl" />
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudText Typo="Typo.h6">@Device.DeviceID</MudText>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Type : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudSelect T="string" Value="@Device.DeviceType" Variant="Variant.Outlined" Dense="true" Class="custom-disabled" ReadOnly="true">
                                                <MudSelectItem Value="@("LoRa Device")" />
                                                <MudSelectItem Value="@("Other")" />
                                            </MudSelect>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Model Type : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@Device.ModelName" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                            @if (Device.ModelName == null && displayValidationErrorMessages)
                                            {
                                                <p class="custom-validation-error-txt">The Model Type field is required.</p>
                                            }
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>IoT Asset ID : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@Device.AssetID" Class="" Margin="Margin.Dense" ReadOnly="false" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>OTAA AppEUI : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@Device.AppEUI" Class="custom-disabled" Margin="Margin.Dense" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                            @if(Device.AppEUI == null && displayValidationErrorMessages){
                                                <p class="custom-validation-error-txt">The OTAA AppKey field is required.</p>
                                            }
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>OTAA AppKey : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@Device.AppKey" Class="" Margin="Margin.Dense" ReadOnly="false" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Location Asset ID : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@Device.LocationCode" Class="" Margin="Margin.Dense" ReadOnly="false" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Status : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudRadioGroup @bind-SelectedOption="@Device.IsEnabled" Class="custom-form">
                                                <MudItem md="4" sm="12">
                                                    <MudRadio Option="@(true)" Color="Color.Primary">Enabled</MudRadio>
                                                </MudItem>
                                                <MudItem md="4" sm="12">
                                                    <MudRadio Option="@(false)" Color="Color.Primary">Disabled</MudRadio>
                                                </MudItem>
                                            </MudRadioGroup>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Connection state : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            @if (Device.IsConnected)
                                            {
                                                <MudIcon Icon="@Icons.Filled.Wifi" Color="Color.Success" />
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Filled.WifiOff" Color="Color.Error" />
                                            }
                                        </MudItem>
                                    </MudItem>
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Last status update : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@StatusUpdatedTimeString" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                            </MudGrid>
                            @if (Device.Commands.Count > 0)
                            {

                                <MudGrid>
                                    <MudItem md="6" xs="12">
                                        @foreach (var command in Device.Commands)
                                        {
                                            <MudItem xs="12" Class="custom-form command_button" Style="padding:3px;">
                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!Device.AlreadyLoggedInOnce)" OnClick="@(async () => await ExecuteMethod(command))"> @command.CommandId</MudButton>
                                            </MudItem>
                                        }
                                    </MudItem>
                                </MudGrid>
                            }
                        }
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudFab ButtonType="ButtonType.Submit" Color="Color.Secondary" Icon="@Icons.Material.Filled.Save" Label="Save" Class="btn-aln-right" />
                    <MudFab Color="Color.Dark" Icon="@Icons.Material.Filled.Delete" Label="Delete" OnClick="DeleteDevice" />
                </MudCardActions>
            </EditForm>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private bool displayValidationErrorMessages = false;
    private string StatusUpdatedTimeString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Sends a GET request to the DevicesController, to retrieve the specific device from Azure IoT Hub
            Device = await Http.GetFromJsonAsync<DeviceDetails>($"api/Devices/{DeviceID}");

            // Gets the DeviceModel Name from the DeviceModel ID
            if (!string.IsNullOrEmpty(Device.ModelId))
            {
                DeviceModel model = await Http.GetFromJsonAsync<DeviceModel>($"api/DeviceModels/{Device.ModelId}");
                Device.ModelName = model?.Name;
            }

            // StatusUpdatedTime set to string to have a more human-readable format
            StatusUpdatedTimeString = Device.StatusUpdatedTime.ToString();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to update the device in the Azure IoT Hub
    /// </summary>
    public async void SaveDevice()
    {
        var result = await Http.PutAsJsonAsync<DeviceDetails>($"api/Devices", Device);

        if (result.IsSuccessStatusCode)
        {
            // Prompts a snack bar to inform the action was successful
            Snackbar.Add($"Device {Device.DeviceID} has been successfully updated!", Severity.Success);

            // Go back to the list of device
            NavManager.NavigateTo("devices");
        }

        // TODO : Deal more effectively with different error messages
        else
        {
            string errorMsg = await result.Content.ReadAsStringAsync();
            Snackbar.Add($"Oh oh, something went wrong while updating device {Device.DeviceID}... <br> {errorMsg}", Severity.Error);
        }
    }

    public void HandleInvalidSubmit(EditContext context)
    {
        displayValidationErrorMessages = true;
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <returns></returns>
    private async Task DeleteDevice()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceID", Device.DeviceID);
        var result = await DialogService.Show<DeleteDevicePage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices after the deletion
        NavManager.NavigateTo("devices");
    }

    private async Task ExecuteMethod(Command method)
    {

        var result = await Http.PostAsJsonAsync($"api/Devices/{Device.DeviceID}/{method.CommandId}", method);

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add($"{method.CommandId} has been successfully executed!",
                Severity.Success);
        }
        else
        {
            Snackbar.Add(await result.Content.ReadAsStringAsync(), Severity.Error, (option)=> { option.VisibleStateDuration = 1000; });
        }
    }
}

