@page "/devices/{DeviceID}"
@using AzureIoTHub.Portal.Client.Pages.Devices.LoRaWAN
@using AzureIoTHub.Portal.Client.Pages.Edge_Devices
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Client.Pages.DeviceModels

@attribute [Authorize]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Details</MudText>
<MudForm Model="@Device" @ref="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                            <MudText Typo="Typo.body2" Class="mb-6">Model: <b>@DeviceModel.Name</b></MudText>
                        <MudText Typo="Typo.h5" Align="Align.Center">@(string.IsNullOrEmpty(Device.DeviceName) ? Device.DeviceID : Device.DeviceName)</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar Image="@Device.ImageUrl?.ToString()" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                    </div>

                </MudCardContent>
                <MudCardActions Class="pb-4 pl-4 justify-center">
                    @if (isLoaded && (!IsLoRa || !(Device is LoRaDeviceDetails)))
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Filled.Cable" OnClick="ShowConnectionString">Connect</MudButton>
                    }
                </MudCardActions>
            </MudCard>

            <MudItem xs="12" Class="d-flex justify-space-around py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Error" OnClick="DeleteDevice">Delete device</MudButton>
                <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="Save">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">

            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
                <MudTabPanel Text="General" Style=@(standardValidator.Validate(Device).IsValid && !CheckTagsError() ? "" : "color: red")>
                    <MudExpansionPanels MultiExpansion="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@Device.DeviceID"
                                                              Label="Device ID"
                                                              Variant="Variant.Outlined"
                                                              For="@(()=> Device.DeviceID)"
                                                              Required="true"
                                                              ReadOnly="true"
                                                              HelperText="DeviceID must contain 16 hexadecimal characters (numbers from 0 to 9 and/or letters from A to F)" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@Device.DeviceName"
                                                              Label="Device name"
                                                              Variant="Variant.Outlined"
                                                              For="@(()=> Device.DeviceName)"
                                                              Required="true" />
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudText>
                                                    <b>Status</b>
                                                </MudText>
                                                <MudRadioGroup @bind-SelectedOption="@Device.IsEnabled">
                                                    <MudRadio Option=@(true) Color="Color.Primary">
                                                        Enabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>can</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                    <MudRadio Option=@(false) Color="Color.Primary">
                                                        Disabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>cannot</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                </MudRadioGroup>
                                            </MudItem>
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Tags">
                                    <TitleContent><MudText Typo="Typo.h6" Style=@(CheckTagsError() ? "color: red" : "")>Tags</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            @foreach (DeviceTag tag in TagList)
                                            {
                                                <MudItem xs="12" md="6">
                                                    <MudTextField @bind-Value="Device.Tags[tag.Name]" Label="@tag.Label"
                                                              Required="@tag.Required"
                                                              Variant="Variant.Outlined" />
                                                </MudItem>
                                            }
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        @if (!IsLoRa && Properties.Any())
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Properties">
                                        <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                @foreach (var item in Properties.OrderBy(c => c.Order))
                                                {
                                                    switch (item.PropertyType)
                                                    {
                                                        case DevicePropertyType.Boolean:
                                                            <MudItem xs="12" md="4">
                                                                <MudCheckBox @bind-Checked="item.Value" Label="@item.DisplayName" Color="@Color.Primary" Converter="@(new StringToBoolConverter())" TriState="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Double:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Float:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Integer:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.Long:
                                                            <MudItem xs="12" md="4">
                                                                <MudTextField @bind-Value="item.Value"
                                                              Label="@item.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                              Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                        case DevicePropertyType.String:
                                                            <MudItem xs="12" md="12">
                                                                <MudTextField @bind-Value="item.Value" Label="@item.DisplayName" Format="F1" Variant="Variant.Outlined" Clearable="true" />
                                                            </MudItem>
                                                            break;
                                                    }

                                                }
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }
                    </MudExpansionPanels>
                </MudTabPanel>
                @if (IsLoRa && Device != null && Commands != null)
                {
                    <MudTabPanel Text="LoRaWAN" Style=@(loraValidator.Validate(Device as LoRaDeviceDetails).IsValid ? "" : "color: red")>
                        <EditLoraDevice LoRaDevice="@(Device as LoRaDeviceDetails)" LoraValidator="@(loraValidator)" Commands="@Commands" />
                    </MudTabPanel>
                }
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>
@code {

    private MudForm form;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsLoRa
    {
        get;
        set;
    }

    private string ApiUrlBase => this.IsLoRa ? "/api/lorawan/devices" : "api/devices";
    private DeviceDetailsValidator standardValidator = new DeviceDetailsValidator();
    private LoRaDeviceDetailsValidator loraValidator = new LoRaDeviceDetailsValidator();

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private DeviceModel DeviceModel { get;set; } = new DeviceModel();

    private bool isLoaded = false;
    
    private IEnumerable<DeviceModelCommand> Commands { get; set; }

    private IEnumerable<DeviceTag> TagList { get; set; } = Array.Empty<DeviceTag>();

    private IEnumerable<DevicePropertyValue> Properties = Array.Empty<DevicePropertyValue>();

    protected override async Task OnInitializedAsync()
    {
        if (IsLoRa)
        {
            Device = await Http.GetFromJsonAsync<LoRaDeviceDetails>($"{ApiUrlBase}/{DeviceID}");
            Commands = await Http.GetFromJsonAsync<DeviceModelCommand[]>($"/api/lorawan/models/{Device.ModelId}/commands");
            DeviceModel = await Http.GetFromJsonAsync<DeviceModel>($"api/lorawan/models/{Device.ModelId}");
        }
        else
        {
            Device = await Http.GetFromJsonAsync<DeviceDetails>($"{ApiUrlBase}/{DeviceID}");
            Properties = await Http.GetFromJsonAsync<List<DevicePropertyValue>>($"{ApiUrlBase}/{DeviceID}/properties");
            DeviceModel = await Http.GetFromJsonAsync<DeviceModel>($"api/models/{Device.ModelId}");
        }

        TagList = await Http.GetFromJsonAsync<List<DeviceTag>>($"/api/settings/device-tags");

        isLoaded = true;
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to add the new device to the Azure IoT Hub
    /// </summary>
    public async void Save()
    {
        await form.Validate();
        bool tagValidationError = CheckTagsError();



        if (!standardValidator.Validate(Device).IsValid
            || (IsLoRa && !this.loraValidator.Validate(this.Device as LoRaDeviceDetails).IsValid)
            || tagValidationError)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            //if (IsLoRa)
            //{
            //    var loraValidation = this.loraValidator.Validate(this.Device as LoRaDeviceDetails);
            //    loraValidation.Errors.ForEach(x => Console.WriteLine(x.ErrorMessage));
            //}

            return;
        }

        HttpResponseMessage result;

        if (IsLoRa)
            result = await Http.PutAsJsonAsync(ApiUrlBase, Device as LoRaDeviceDetails);
        else
            result = await Http.PutAsJsonAsync(ApiUrlBase, Device);

        result.EnsureSuccessStatusCode();

        await Http.PostAsJsonAsync($"{ApiUrlBase}/{DeviceID}/properties", Properties);

        result.EnsureSuccessStatusCode();

        // Prompts a snack bar to inform the action was successful
        Snackbar.Add($"Device {Device.DeviceName} has been successfully updated!", Severity.Success);

        // Go back to the list of devices
        NavManager.NavigateTo("devices");
    }
    public void ShowConnectionString()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ConnectionStringDialog.deviceId), this.DeviceID);

        DialogService.Show<ConnectionStringDialog>("Device Credentials", parameters);
    }

    private bool CheckTagsError()
    {
        bool tagValidationError = false;

        foreach (DeviceTag tag in TagList)
        {
            if (tag.Required && string.IsNullOrEmpty(Device.Tags[tag.Name]))
            {
                tagValidationError = true;
            }
        }
        return tagValidationError;
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <param name="device">Device to delete from the hub</param>
    /// <returns></returns>
    private async Task DeleteDevice()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceID", Device.DeviceID);
        parameters.Add("deviceName", Device.DeviceName);
        var result = await DialogService.Show<DeleteDevicePage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices
        NavManager.NavigateTo("devices");
    }
}
