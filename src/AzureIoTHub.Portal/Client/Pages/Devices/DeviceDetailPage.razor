@page "/devices/{DeviceID}"
@using AzureIoTHub.Portal.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Shared.Models.Device
@using System.Text.Json;
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@attribute [Authorize]
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Details</MudText>

<MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="General">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Align="Align.Center" Typo="Typo.h5">@Device.DeviceID</MudText>
                        </CardHeaderContent>
                        <CardHeaderAvatar>
                            @if (Device.IsConnected)
                            {
                                <MudTooltip Text="@($"Device connected since {StatusUpdatedTimeString}")">
                                    <MudIcon Icon="@Icons.Filled.Wifi" Color="Color.Success" />
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="@($"Device disconnected since {StatusUpdatedTimeString}")">
                                    <MudIcon Icon="@Icons.Filled.WifiOff" Color="Color.Error" />
                                </MudTooltip>
                            }
                        </CardHeaderAvatar>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex justify-center mb-4">
                            <MudAvatar Image="@Device.ImageUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                        </div>
                        <MudText Align="Align.Center" Typo="Typo.h6">@Device.ModelName</MudText>
                        @if (string.IsNullOrEmpty(Device.ModelId))
                        {
                            <MudText Align="Align.Center" Typo="Typo.body1" Color="Color.Error">No model selected</MudText>
                            <MudText Align="Align.Center" Typo="Typo.body2" Color="Color.Error">The device cannot be updated</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudCard>
                    <EditForm Model="@Device" OnValidSubmit="SaveDevice">
                        <DataAnnotationsValidator />
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Device Details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>                                
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="@Device.DeviceName" Label="Device name" Required="true" Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.AssetId" Label="IoT Asset ID" Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.LocationCode" Label="Location Asset ID" Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText>
                                        <b>Status</b>
                                    </MudText>
                                    <MudSwitch @bind-Checked="@Device.IsEnabled" Color="Color.Secondary" />
                                    @if (Device.IsEnabled)
                                    {
                                        <MudText Typo="Typo.body2">The device <b>can</b> connect to the platform.</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2">The device <b>cannot</b> connect to the platform.</MudText>
                                    }
                                </MudItem>

                                <MudSpacer />

                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.AppEUI" Label="OTAA AppEUI" Variant="Variant.Outlined" ReadOnly="true" Required="true" HelperText="OTAA AppEUI is automatically set from the selected model" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Device.AppKey" Label="OTAA AppKey" Variant="Variant.Outlined" />
                                </MudItem>

                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" @onclick="DeleteDevice">Delete Device</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-4">Save Changes</MudButton>
                        </MudCardActions>
                    </EditForm>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText>Device Commands</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudItem xs="12">
                            @foreach (var command in Device.Commands)
                            {
                                <MudItem xs="12" Class="custom-form command_button" Style="padding:3px;">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!Device.AlreadyLoggedInOnce)" OnClick="@(async () => await ExecuteMethod(command))"> @command.CommandId</MudButton>
                                </MudItem>
                            }
                        </MudItem>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {

    [Parameter]
    public string DeviceID { get; set; }

    private DeviceDetails Device { get; set; } = new DeviceDetails();

    private string StatusUpdatedTimeString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Sends a GET request to the DevicesController, to retrieve the specific device from Azure IoT Hub
            Device = await Http.GetFromJsonAsync<DeviceDetails>($"api/Devices/{DeviceID}");

            // Gets the DeviceModel Name from the DeviceModel ID
            if (!string.IsNullOrEmpty(Device.ModelId))
            {
                DeviceModel model = await Http.GetFromJsonAsync<DeviceModel>($"api/DeviceModels/{Device.ModelId}");
                Device.ModelName = model?.Name;
            }

            // StatusUpdatedTime set to string to have a more human-readable format
            StatusUpdatedTimeString = Device.StatusUpdatedTime.ToString();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    /// <summary>
    /// Sends a POST request to the DevicesController, to update the device in the Azure IoT Hub
    /// </summary>
    public async void SaveDevice()
    {
        var result = await Http.PutAsJsonAsync<DeviceDetails>($"api/Devices", Device);

        if (result.IsSuccessStatusCode)
        {
            // Prompts a snack bar to inform the action was successful
            Snackbar.Add($"Device {Device.DeviceID} has been successfully updated!", Severity.Success);

            // Go back to the list of device
            NavManager.NavigateTo("devices");
        }

        // TODO : Deal more effectively with different error messages
        else
        {
            string errorMsg = await result.Content.ReadAsStringAsync();
            Snackbar.Add($"Oh oh, something went wrong while updating device {Device.DeviceID}... <br> {errorMsg}", Severity.Error);
        }
    }

    /// <summary>
    /// Prompts a pop-up windows to confirm the device's deletion.
    /// </summary>
    /// <returns></returns>
    private async Task DeleteDevice()
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceID", Device.DeviceID);
        var result = await DialogService.Show<DeleteDevicePage>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Go back to the list of devices after the deletion
        NavManager.NavigateTo("devices");
    }

    private async Task ExecuteMethod(Command method)
    {

        var result = await Http.PostAsJsonAsync($"api/Devices/{Device.DeviceID}/{method.CommandId}", method);

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add($"{method.CommandId} has been successfully executed!",
                Severity.Success);
        }
        else
        {
            Snackbar.Add(await result.Content.ReadAsStringAsync(), Severity.Error, (option) => { option.VisibleStateDuration = 1000; });
        }
    }
}

