@page "/edge/configurations/{ConfigurationID}"
@using AzureIoTHub.Portal.Client.Pages.EdgeModels.EdgeModule
@using AzureIoTHub.Portal.Models.v10
@using System.Text.RegularExpressions;
@attribute [Authorize]
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEdgeDeviceConfigurationsClientService EdgeDeviceConfigurationsClientService

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <EditForm Model="@Config">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudTooltip Text="Return" Placement="Placement.Left">
                                <MudFab Icon="@Icons.Outlined.ArrowBack" Color="Color.Secondary" Size="Size.Small" OnClick="Return" id="returnButton" />
                            </MudTooltip>
                            <MudTooltip Placement="Placement.Top">
                                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4"> Edge Models detail</MudText>
                            </MudTooltip>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (Config.ConfigurationID == null)
                        {
                            <MudItem Class="custom-centered-container">
                                <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
                            </MudItem>
                        }
                        else
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudItem xs="6" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Configuration ID : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudText Typo="Typo.h6">@Config.ConfigurationID</MudText>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Owner : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@ConditionOwner" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Environment : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@ConditionEnv" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                    <MudItem xs="12" Class="custom-form">
                                        <MudItem md="3" sm="12">
                                            <MudText>Type : </MudText>
                                        </MudItem>
                                        <MudItem md="9" sm="12">
                                            <MudTextField @bind-Value="@ConditionType" Margin="Margin.Dense" Class="custom-disabled" ReadOnly="true" Variant="Variant.Outlined"></MudTextField>
                                        </MudItem>
                                    </MudItem>
                                </MudItem>
                                <MudItem md="6" xs="12">
                                </MudItem>
                            </MudGrid>
                        }
                    </MudCardContent>
                </MudCard>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudTable Items="@Config.Modules" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true>
                <ColGroup>
                    <col style="width: 40%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 20%;" />
                </ColGroup>
                <HeaderContent>
                    <MudTh Style="text-align: center">Module Name</MudTh>
                    <MudTh Style="text-align: center">Version</MudTh>
                    <MudTh Style="text-align: center">Status</MudTh>
                    <MudTh Style="text-align: center"></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Module Name" Style="word-break: break-all;">@context.ModuleName</MudTd>
                    <MudTd DataLabel="Version" Style="text-align: center">@context.Version</MudTd>
                    <MudTd DataLabel="Status" Style="text-align: center">@context.Status</MudTd>
                    <MudTd DataLabel="Device" Style="text-align: center">
                        <MudTooltip Text="See details">
                            <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" OnClick="@(async () => await ShowModuleDetail(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    public Error Error {get; set;}

    [Parameter]
    public string ConfigurationID { get; set; }

    private ConfigListItem Config { get; set; } = new();

    public string ConditionEnv { get; set; }
    public string ConditionType { get; set; }
    public string ConditionOwner { get; set; }
    private void Return() => NavigationManager.NavigateTo("edge/configurations");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Sends a GET request to the ConfigController, to retrieve a specific deployment from Azure IoT Hub
            Config = await EdgeDeviceConfigurationsClientService.GetDeviceConfiguration(ConfigurationID);
            ConditionOwner = RetrieveCondition("owner");
            ConditionEnv = RetrieveCondition("env");
            ConditionType = RetrieveCondition("type");
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    /// <summary>
    /// Parse the Conditions string to extract owner, environment and type values using regex.
    /// </summary>
    /// <param name="field">Specific condition to retrieve</param>
    /// <returns>Corresponding condition value, or an empty string if it doesn't exist.</returns>
    private string RetrieveCondition(string field)
    {
        // Condition string looks like : tags.owner='value1' and tags.env='value2' and tags.type='value3'
        string regex = @"tags\." + field + @"\s?=\s?'(?<field>\S*)'";
        if (!string.IsNullOrEmpty(Config.Conditions) && Regex.IsMatch(Config.Conditions, regex))
        {
            return Regex.Matches(Config.Conditions, regex).First().Groups[1].Value;
        }
        else
        {
            return string.Empty;
        }
    }

    /// <summary>
    /// Prompts a pop-up windows to show modules details (environment variables and identity twin settings)
    /// </summary>
    /// <param name="module">Selected module</param>
    /// <returns></returns>
    public async Task ShowModuleDetail(IoTEdgeModule module)
    {
        var parameters = new DialogParameters();
        parameters.Add("module", module);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        var result = await DialogService.Show<ModuleDialog>(module.ModuleName, parameters, options).Result;

        if (result.Cancelled)
        {
            return;
        }
    }
}

