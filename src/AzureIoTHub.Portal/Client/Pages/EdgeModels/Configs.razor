@page "/edge/configurations"
@using AzureIoTHub.Portal.Models.v10
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IEdgeDeviceConfigurationsClientService EdgeDeviceConfigurationsClientService

<MudGrid>
    <MudItem xs="12">
        <MudTable T="ConfigListItem" Items="@result" Loading="IsLoading" Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true OnRowClick="@((e) => GoToDetails(e.Item))" RowStyle="cursor: pointer;">
            <ColGroup>
                <col style="width: 20%;" />
                <col style="width: 20%;" />
                <col style="width: 12%;" />
                <col style="width: 18%;" />
                <col style="width: 4%;" />
                <col style="width: 18%;" />
                <col style="width: 4%;" />
                <col style="width: 4%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Edge Models</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="LoadConfigurations" Class="ma-2"></MudIconButton>
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh Style="text-align: center">Conditions</MudTh>
                <MudTh Style="text-align: center">System Metrics</MudTh>
                <MudTh Style="text-align: center">Device Metrics</MudTh>
                <MudTh Style="text-align: center">Priority</MudTh>
                <MudTh Style="text-align: center">Creation date</MudTh>
                <MudTh Style="text-align: center">Detail</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID" Style="word-break: break-all;">
                    @context.ConfigurationID
                </MudTd>
                <MudTd DataLabel="Conditions" Style="word-break: break-all; ">
                    @context.Conditions
                </MudTd>
                <MudTd DataLabel="System Metrics" Style="text-align: center;">
                    @context.MetricsTargeted targeted<br />
                    @context.MetricsApplied applied <br />
                </MudTd>
                <MudTd DataLabel="Device Metrics" Style="text-align: center;">
                    @context.MetricsSuccess reporting success <br />
                    @context.MetricsFailure reporting failure <br />
                </MudTd>
                <MudTd DataLabel="Priority" Style="text-align: center">@context.Priority</MudTd>
                <MudTd DataLabel="Creation date" Style="text-align: center;">@context.CreationDate</MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <MudTooltip Text="See details">
                        <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error Error {get; set;}
    
    private IList<ConfigListItem> result = new List<ConfigListItem>();
    private bool IsLoading { get; set; } = true;
    private readonly int[] pageSizeOptions = { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurations();
    }

    /// <summary>
    /// Sends a GET request to the ConfigsController, to retrieve all deployments from Azure IoT Hub
    /// </summary>
    /// <returns></returns>
    private async Task LoadConfigurations()
    {
        try
        {
            IsLoading = true;
            result = await EdgeDeviceConfigurationsClientService.GetDeviceConfigurations();
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
            result = Array.Empty<ConfigListItem>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void GoToDetails(ConfigListItem item)
    {
        NavigationManager.NavigateTo($"/edge/configurations/{item.ConfigurationID}");
    }
}
