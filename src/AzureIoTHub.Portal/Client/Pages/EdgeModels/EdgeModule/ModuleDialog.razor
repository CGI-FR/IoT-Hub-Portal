@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Shared.Models.v10
@inject HttpClient Http
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="@Module.ModuleName"
                              id=@nameof(IoTEdgeModule.ModuleName)
                              Label="Module Name"
                              Variant="Variant.Outlined"
                              For="@(()=> Module.ModuleName)"
                              Required="true" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="@Module.Version"
                              id=@nameof(IoTEdgeModule.Version)
                              Label="Image URI"
                              Variant="Variant.Outlined"
                              For="@(()=> Module.Version)"
                              Required="true" />
            </MudItem>
        </MudGrid>

        <MudTabs Elevation="1" Class="mt-10" Rounded="true" PanelClass="mt-6">

            <MudTabPanel Text="Environment variables">
                <ModuleDialogTab1 EnvironmentVariables="@currentEnvironmentVariables" />
            </MudTabPanel>

            <MudTabPanel Text="Module identity twin settings">
                <ModuleDialogTab2 ModuleIdentityTwinSettings="@currentModuleIdentityTwinSettings" />
            </MudTabPanel>

            <MudTabPanel Text="Commands">
                <ModuleDialogTab3 Commands="@currentCommands" />
            </MudTabPanel>

        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public IoTEdgeModule Module { get; set; }

    private List<IoTEdgeModuleEnvironmentVariable> currentEnvironmentVariables;
    private List<IoTEdgeModuleTwinSetting> currentModuleIdentityTwinSettings;
    private List<IoTEdgeModuleCommand> currentCommands;


    public bool IsLoading;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        currentEnvironmentVariables = new List<IoTEdgeModuleEnvironmentVariable>(Module.EnvironmentVariables.ToArray());
        currentModuleIdentityTwinSettings = new List<IoTEdgeModuleTwinSetting>(Module.ModuleIdentityTwinSettings.ToArray());
        currentCommands = new List<IoTEdgeModuleCommand>(Module.Commands.ToArray());
        await Task.Delay(0);
        IsLoading = false;
    }

    public void Submit()
    {
        Module.EnvironmentVariables = new List<IoTEdgeModuleEnvironmentVariable>(currentEnvironmentVariables.ToArray());
        Module.ModuleIdentityTwinSettings = new List<IoTEdgeModuleTwinSetting>(currentModuleIdentityTwinSettings.ToArray());
        Module.Commands = new List<IoTEdgeModuleCommand>(currentCommands.ToArray());
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();


}
