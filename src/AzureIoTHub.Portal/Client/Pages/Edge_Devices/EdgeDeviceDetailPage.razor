@page "/edge/devices/{deviceId}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Models.v10
@using System.Net.Http.Json

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Edge Device Details</MudText>

@if (loading)
{
    <MudGrid>
        <MudItem xs="12">
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudForm Model="@Gateway">
        <MudGrid>
            <MudItem xs="12" sm="4" md="3">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5" Align="Align.Center">@Gateway.DeviceId</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardActions Class="pb-4 pl-4 justify-center">
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Filled.Cable" OnClick="ShowConnectionString">Connect</MudButton>
                    </MudCardActions>
                </MudCard>
                <MudItem xs="12" Class="d-flex justify-space-around py-2 px-1 mt-4">
                    @if (processingDelete)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mx-1" Disabled="true">
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />Processing
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Error" OnClick="ShowDeleteModal">Delete edge device</MudButton>
                    }
                    @if (processingUpdate)
                    {
                        <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" Disabled="true">
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />Processing
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="UpdateDevice">Save Changes</MudButton>
                    }
                </MudItem>
            </MudItem>
            <MudItem xs="12" sm="8" md="9">
                <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6">
                    <MudTabPanel Text="General">
                        <MudExpansionPanels MultiExpansion="true">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Edge Device Details" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">Edge Device Details</MudText></TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                <MudItem xs="12" md="6">
                                                    <MudTextField @bind-Value="@Gateway.Type" Label="Type" Variant="Variant.Outlined" ReadOnly="true" Required="true" />
                                                </MudItem>
                                                <MudItem xs="12" md="6">
                                                    <MudSelect T="string" @bind-Value="@Gateway.Environment" Label="Environment" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined">
                                                        <MudSelectItem Value="@("Development")" />
                                                        <MudSelectItem Value="@("Production")" />
                                                        <MudSelectItem Value="@("Industry")" />
                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="12" md="6">
                                                <MudText>
                                                    <b>Status</b>
                                                </MudText>
                                                <MudRadioGroup @bind-SelectedOption="@Gateway.Status">
                                                    <MudRadio Option=@("Enabled") Color="Color.Primary">
                                                        Enabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>can</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                    <MudRadio Option=@("Disabled") Color="Color.Primary">
                                                        Disabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>cannot</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                </MudRadioGroup>
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudText>
                                                    <b>Runtime response</b>
                                                </MudText>
                                                @if (Gateway.RuntimeResponse == "running")
                                                    {
                                                        <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                                                    }
                                                    else
                                                    {
                                                        <MudItem>
                                                            <MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" />
                                                        </MudItem>
                                                    }
                                                </MudItem>
                                                <MudItem xs="12" md="6">
                                                    <MudTextField @bind-Value="@Gateway.NbDevices" Label="Nbr of connected devices" Variant="Variant.Outlined" ReadOnly="true" />
                                                </MudItem>
                                                <MudItem xs="12" md="6">
                                                    <MudTextField @bind-Value="@Gateway.NbModules" Label="Nbr of desired modules" Variant="Variant.Outlined" ReadOnly="true" />
                                                </MudItem>
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Tags">
                                        <TitleContent><MudText Typo="Typo.h6">Last deployment</MudText></TitleContent>
                                        <ChildContent>
                                            <MudGrid>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="@Gateway.LastDeployment.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="@Gateway.LastDeployment.DateCreation" Label="Date" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                                                </MudItem>
                                                <MudItem xs="12" md="4">
                                                    <MudTextField @bind-Value="@Gateway.LastDeployment.Status" Label="Status" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                                                </MudItem>
                                            </MudGrid>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Modules" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">Modules</MudText></TitleContent>
                                        <ChildContent>
                                            <MudTable Items="@Gateway.Modules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                <ColGroup>
                                                    <col style="width: 40%;" />
                                                    <col style="width: 10%;" />
                                                    <col style="width: 10%;" />
                                                    <col style="width: 20%;" />
                                                </ColGroup>
                                                <HeaderContent>
                                                    <MudTh Style="text-align: center">Module Name</MudTh>
                                                    <MudTh Style="text-align: center">Version</MudTh>
                                                    <MudTh Style="text-align: center">Status</MudTh>
                                                    <MudTh Style="text-align: center"></MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd DataLabel="Module Name" Style="word-break: break-all;">@context.ModuleName</MudTd>
                                                    <MudTd DataLabel="Version" Style="text-align: center">@context.Version</MudTd>
                                                    <MudTd DataLabel="Status" Style="text-align: center">@context.Status</MudTd>
                                                    <MudTd DataLabel="Device" Style="text-align: center">
                                                        <MudButton Variant="Variant.Filled" Class="btn" Color="Color.Dark" Disabled="btn_disable" OnClick="@(async () => await OnMethod(context,"GetModuleLogs") )">logs</MudButton>
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="btn_disable" OnClick="@(async () => await OnMethod(context,"RestartModule") )">reboot</MudButton>
                                                    </MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        </MudExpansionPanels>
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    </MudForm>
}

@code {
    [Parameter]
    public string deviceId { get; set; }
    private bool loading = true;
    private bool btn_disable = false;
    private bool processingUpdate = false;
    private bool processingDelete = false;

    private IoTEdgeDevice Gateway;

    protected override async Task OnInitializedAsync()
    {
        Gateway = new IoTEdgeDevice();
        await LoadDevice();
    }

    public async Task LoadDevice()
    {
        Gateway = await Http.GetFromJsonAsync<IoTEdgeDevice>($"api/edge/devices/{deviceId}");

        if (Gateway.ConnectionState == "Disconnected")
        {
            btn_disable = true;
        }
        loading = false;
    }

    public async Task UpdateDevice()
    {
        processingUpdate = true;
        var result = await Http.PutAsJsonAsync($"api/edge/devices/{Gateway.DeviceId}", Gateway);

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add($"Device {Gateway.DeviceId} has been successfully updated!", Severity.Success);
        }
        else if (result.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
        }
        else
        {
            Snackbar.Add("Something unexpected occurred", Severity.Warning);
        }

        processingUpdate = false;
    }

    public async Task OnMethod(IoTEdgeModule module, string methodName)
    {
        var result = await Http.PostAsJsonAsync($"api/edge/devices/{Gateway.DeviceId}/{module.ModuleName}/{methodName}", module);

        var c2dResult = result.Content.ReadFromJsonAsync<C2Dresult>().Result;

        if (c2dResult.Status == 200)
        {
            Snackbar.Add("Command successfully executed.", Severity.Success);
            if (methodName == "GetModuleLogs")
            {
                var parameter = new DialogParameters();
                parameter.Add("info", c2dResult);

                _ = await DialogService.Show<ModuleLogsDialog>("Edge device log", parameter).Result;
            }
        }
        else
        {
            Snackbar.Add($"Error<br>Status : {c2dResult.Status};<br>Payload : {c2dResult.Payload};", Severity.Error,
                (option) =>
                {
                    option.VisibleStateDuration = 10000;
                });
        }
    }

    public void ShowConnectionString()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ConnectionStringDialog.deviceId), this.deviceId);

        DialogService.Show<ConnectionStringDialog>("Edge Device Connection String", parameters);
    }

    public async Task ShowDeleteModal()
    {
        processingDelete = true;
        var parameter = new DialogParameters();

        parameter.Add(nameof(Gateway.DeviceId), Gateway.DeviceId);

        var result = await DialogService.Show<EdgeDeviceDeleteConfirmationDialog>("Edge device deletion confirmation", parameter).Result;
        processingDelete = false;

        if (result.Cancelled)
        {
            return;
        }

        NavigationManager.NavigateTo("/edge/devices");
    }
}
