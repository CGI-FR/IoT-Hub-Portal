@page "/edge/devices"
@using AzureIoTHub.Portal
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using AzureIoTHub.Portal.Models.v10
@using System.Net.Http.Json
@using Blazored.Modal
@using Blazored.Modal.Services
@using System.Web

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Edge Device List</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Search panel">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchModel.DeviceId" Placeholder="Name"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" Label="Type" @bind-Value="searchModel.Type">
                            <MudSelectItem Value=@("") />
                            <MudSelectItem Value=@("LoRa Network Server") />
                            <MudSelectItem Value=@("Other") />
                        </MudSelect>
                    </MudItem>
                    <MudItem sm="12" md="6">
                        <MudText>Status</MudText>
                        <MudRadioGroup @bind-SelectedOption="@searchModel.Status" Style="display:flex;align-items:baseline">
                            <MudItem md="4" sm="12">
                                <MudRadio Option=@("true") Color="Color.Primary">Enabled</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option=@("false") Color="Color.Primary">Disabled</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option=@("true") Color="Color.Secondary">All</MudRadio>
                            </MudItem>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="12" Class="pb-4 pl-4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Class="ml-auto" OnClick="Search">Search</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="ml-4" OnClick="ResetFiltre">Reset</MudButton>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    <MudItem xs="12">
        <MudTable ServerData=@LoadItems Dense=true Breakpoint="Breakpoint.Sm" Hover=true Bordered=true Striped=true @ref="table" Loading="@IsLoading">
            <ColGroup>
                <col style="width: 40%;" />
                <col style="width: 10%;" />
                <col style="width: 20%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Edge Devices</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="Search" Class="ma-2"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Add device">
                    <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="ShowAddDialog" />
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh Style="text-align: center">Status</MudTh>
                <MudTh Style="text-align: center">Type</MudTh>
                <MudTh Style="text-align: center">Nb devices</MudTh>
                <MudTh Style="text-align: center">See details</MudTh>
                <MudTh Style="text-align: center">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Device" Style="word-break: break-all;">
                    <a href="/edge/devices/@context.DeviceId">@context.DeviceId</a>
                </MudTd>
                <MudTd DataLabel="Status" Style="text-align: center">
                    @if (context.Status == "Enabled")
                    {
                        <MudTooltip Text="Device can connect">
                            <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Device cannot connect">
                            <MudIcon Icon="@Icons.Filled.Error" Color="Color.Default" />
                        </MudTooltip>
                    }
                </MudTd>

                <MudTd DataLabel="Type" Style="text-align: center">@context.Type</MudTd>
                <MudTd DataLabel="NbDevices" Style="text-align: center">@context.NbDevices</MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <a href="/edge/devices/@context.DeviceId">
                        <MudTooltip Text="See device details">
                            <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" />
                        </MudTooltip>
                    </a>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudTooltip Text="Delete device">
                        <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => ShowDeleteDialog(context))"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    private MudTable<IoTEdgeListItem> table;
    private SearchModel searchModel = new SearchModel();

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private Dictionary<int, string> Pages { get; set; } = new();

    private bool IsLoading { get; set; } = true;

    private void Search()
    {
        Pages.Clear();

        table.ReloadServerData();
    }

    private async Task<TableData<IoTEdgeListItem>> LoadItems(TableState state)
    {
        PaginationResult<IoTEdgeListItem> result;

        if (Pages.Keys.Contains(state.Page))
        {
            result = await Http.GetFromJsonAsync<PaginationResult<IoTEdgeListItem>>(Pages[state.Page]);
        }
        else
        {
            var uri = $"api/edge/devices?pageSize={state.PageSize}&searchText={HttpUtility.UrlEncode(searchModel.DeviceId)}&searchStatus={searchModel.Status}&searchType={searchModel.Type}";

            _ = Pages.TryAdd(state.Page, uri);

            result = await Http.GetFromJsonAsync<PaginationResult<IoTEdgeListItem>>(uri);
        }

        _ = Pages.TryAdd(state.Page + 1, result.NextPage);

        IsLoading = false;

        return new TableData<IoTEdgeListItem>
            {
                Items = result.Items,
                TotalItems = result.TotalItems
            };
    }

    private void ResetFiltre()
    {
        this.searchModel = new SearchModel();

        Search();
    }

    private void RedirectToDetail(string id)
    {
        NavigationManager.NavigateTo($"/edge-device/detail/{id}");
    }

    private async Task ShowAddDialog()
    {
        var result = await DialogService.Show<CreateEdgeDeviceDialog>("Add IoT Edge", maxWidth).Result;

        if (result.Cancelled)
        {
            return;
        }

        Search();
    }

    public async Task ShowDeleteDialog(IoTEdgeListItem gateway)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(IoTEdgeDevice.DeviceId), gateway.DeviceId);
        var result = await DialogService.Show<EdgeDeviceDeleteConfirmationDialog>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Update the list of gateways after the deletion
        Search();
    }
}
