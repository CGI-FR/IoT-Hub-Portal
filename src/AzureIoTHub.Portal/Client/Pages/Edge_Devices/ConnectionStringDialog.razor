@using AzureIoTHub.Portal.Client.Services
@using Microsoft.AspNetCore.Authorization
@using AzureIoTHub.Portal.Models.v10

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject ClipboardService ClipboardService

<div class="ConnectionString-dialog">
    <MudDialog>
        <DialogContent>
            @if (loading)
            {
                <MudItem Class="custom-centered-container">
                    <MudProgressCircular Class="custom-centered-item" Color="Color.Default" Indeterminate="true" />
                </MudItem>
            }
            else
            {
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Style="text-decoration:underline"><b>Service Endpoint</b></MudText>
                                <MudTextField @bind-Value="@Credentials.ProvisioningEndpoint" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true"  Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(Credentials.ProvisioningEndpoint))" />
                            </MudItem>
                            <MudItem Class="mt-0" xs="12">
                                <MudText Style="text-decoration:underline"><b>Device Id</b></MudText>
                                <MudTextField @bind-Value="@Credentials.RegistrationID" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true"  Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(Credentials.RegistrationID))" />
                            </MudItem>
                            <MudItem Class="mt-0" xs="12">
                                <MudText Style="text-decoration:underline"><b>Symmetric Key</b></MudText>
                                <MudTextField @bind-Value="@Credentials.SymmetricKey" Variant="Variant.Text" InputType="InputType.Password" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(Credentials.SymmetricKey))" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</div>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string deviceId { get; set; }
    private EnrollmentCredentials Credentials;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            Credentials = await this.Http.GetFromJsonAsync<EnrollmentCredentials>($"api/edge/devices/{deviceId}/credentials");
            loading = false;

        }
        catch (HttpRequestException e)
        {
            if (e.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("Cannot obtain the connection string <br> because the enrollment group does not exist.", Severity.Error);
            }
            else
            {
                Snackbar.Add($"Something went wrong.", Severity.Error);
            }

            MudDialog.Close();
        }
    }


    void Cancel() => MudDialog.Cancel();
}
