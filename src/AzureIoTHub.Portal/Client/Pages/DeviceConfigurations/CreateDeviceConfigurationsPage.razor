@page "/device-configurations/new"
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models

@attribute [Authorize]
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IDeviceConfigurationsClientService DeviceConfigurationsClientService
@inject IDeviceModelsClientService DeviceModelsClientService
@inject IDeviceTagSettingsClientService DeviceTagSettingsClientService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device Configuration</MudText>

<MudForm Model="Configuration">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Configuration Info</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            Specify a name for the configuration.
                            <MudTextField @bind-Value="Configuration.ConfigurationId" Label="Configuration name" Variant="Variant.Outlined" Dense=true Required/>
                        </MudItem>
                        <MudItem xs="12">
                            Select a device model to configure.
                            <MudAutocomplete T="DeviceModelDto"
                                             id="selectDeviceModel"
                                             Label="Targeted Device model*"
                                             Dense=true
                                             Variant="Variant.Outlined"
                                             ToStringFunc="@(x => x?.Name)"
                                             SearchFunc="@Search"
                                             ValueChanged="@(async (model) => await SelectModel(model))"
                                             ResetValueOnEmptyText=true
                                             Immediate=true
                                             Clearable=true
                                             CoerceText=true
                                             CoerceValue=false>
                                <ItemTemplate>
                                    @context.Name
                                    <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">
                                        @((!string.IsNullOrEmpty(@context.Description) && @context.Description.Length > 100) ? @context.Description.Substring(0, 100) + "..." : @context.Description)
                                    </MudText>
                                </ItemTemplate>
                            </MudAutocomplete>
                        </MudItem>
                    </MudGrid>
                    
                </MudCardContent>
            </MudCard>
            <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="Save" id="saveButton" Disabled="isProcessing">Save Changes</MudButton>
            </MudItem>
        </MudItem>

        <MudItem xs="12" sm="8" md="9">
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Text="Target conditions" IsInitiallyExpanded="true">
                    <TitleContent>
                        <MudText Typo="Typo.h6">Target conditions</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText>This configuration will be applied on devices that have the selected tags:</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudGrid>
                                    <MudItem xs="12" md="6" sm="8">
                                        <MudSelect @bind-Value="@SelectedTag"
                                                   Label="Tag"
                                                   HelperText="Select the tag and click 'Add Tag' to add a new restriction."
                                                   HelperTextOnFocus="false"
                                                   Margin="Margin.Dense"
                                                   Variant="Variant.Outlined">
                                            @foreach (var tag in AvailableTags.Where(x => !Configuration.Tags.ContainsKey(x.Name)))
                                            {
                                                <MudSelectItem Value="@(tag.Name)">@tag.Label</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" md="4" sm="4">
                                        <MudButton Variant="Variant.Outlined"
                                                   Color="Color.Primary"
                                                   Disabled="string.IsNullOrEmpty(SelectedTag)"
                                                   OnClick="AddSelectedTag"
                                                   StartIcon="@Icons.Filled.Add" id="addTagButton">Add Tag</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                @foreach (var item in Configuration.Tags.Keys)
                                {
                                    <MudForm Model="item">
                                        <MudGrid id="@($"tag-{item}")">
                                            <MudItem xs="8" md="10">
                                                <MudTextField Label="@AvailableTags.Single(c => c.Name == item).Label"
                                                          @bind-Value="@Configuration.Tags[item]"
                                                          HelperText="The Value of the tag"
                                                          HelperTextOnFocus="true"
                                                          Variant="Variant.Outlined"
                                                          Required="true"></MudTextField>
                                            </MudItem>
                                            <MudItem xs="4" md="2">
                                                <MudIconButton id="deleteTagButton"  Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="() => Configuration.Tags.Remove(item)"></MudIconButton>
                                            </MudItem>
                                        </MudGrid>
                                    </MudForm>
                                }
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>

                <MudExpansionPanel Text="Properties" IsInitiallyExpanded="true">
                    <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText>This configuration will apply on devices these settings:</MudText>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudGrid>
                                    <MudItem xs="12" md="6" sm="8">
                                        <MudSelect @bind-Value="@SelectedProperty"
                                                   id="selectedProperty"
                                                   Label="Property"
                                                   HelperText="Select the property and click 'Add Property' to add a new setting."
                                                   HelperTextOnFocus="false"
                                                   Margin="Margin.Dense"
                                                   Variant="Variant.Outlined">
                                            @foreach (var prop in AvailableProperties
                                            .Where(x => x.IsWritable)
                                            .Where(x => !Configuration.Properties.ContainsKey(x.Name)))
                                            {
                                                <MudSelectItem Value="@(prop.Name)">@prop.DisplayName</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" md="4" sm="4">
                                        <MudButton Variant="Variant.Outlined"
                                                   Color="Color.Primary"
                                                   Disabled="string.IsNullOrEmpty(SelectedProperty)"
                                                   OnClick="AddSelectedProperty"
                                                   StartIcon="@Icons.Filled.Add" id="addPropertyButton">Add Property</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                @foreach (var item in Configuration.Properties.Keys)
                                {
                                    <MudForm Model="item">
                                        <MudGrid  id="@($"property-{item}")">
                                            <MudItem xs="8" md="10">
                                                @{
                                                    var property = this.AvailableProperties.Single(x => x.Name == item);
                                                }
                                                @switch (property.PropertyType)
                                                {
                                                    case DevicePropertyType.Boolean:
                                                        <MudCheckBox @bind-Checked="@Configuration.Properties[item]"
                                                         Label="@property.DisplayName" Color="@Color.Primary"
                                                         Converter="@(new StringToBoolConverter())"
                                                         TriState="true" />
                                                        break;
                                                    case DevicePropertyType.Double:
                                                        <MudTextField @bind-Value="@Configuration.Properties[item]"
                                                          Label="@property.DisplayName"
                                                          Variant="Variant.Outlined"
                                                          Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                          Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.Float:
                                                        <MudTextField @bind-Value="@Configuration.Properties[item]"
                                                          Label="@property.DisplayName"
                                                          Variant="Variant.Outlined"
                                                          Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                          Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.Integer:
                                                        <MudTextField @bind-Value="@Configuration.Properties[item]"
                                                          Label="@property.DisplayName"
                                                          Variant="Variant.Outlined"
                                                          Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                          Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.Long:
                                                        <MudTextField @bind-Value="@Configuration.Properties[item]"
                                                          Label="@property.DisplayName"
                                                          Variant="Variant.Outlined"
                                                          Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                          Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.String:
                                                        <MudTextField @bind-Value="@Configuration.Properties[item]"
                                                          Label="@property.DisplayName"
                                                          Format="F1"
                                                          Variant="Variant.Outlined"
                                                          Clearable="true" />
                                                        break;
                                                }
                                            </MudItem>
                                            <MudItem xs="4" md="2">
                                                <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="() => Configuration.Properties.Remove(item)"></MudIconButton>
                                            </MudItem>
                                        </MudGrid>
                                    </MudForm>
                                }
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
</MudForm>


@code {
    [CascadingParameter]
    public Error Error {get; set;}

    public DeviceConfig Configuration { get; set; } = new();

    IEnumerable<DeviceTagDto> AvailableTags { get; set; } = Array.Empty<DeviceTagDto>();
    IEnumerable<DeviceProperty> AvailableProperties = Array.Empty<DeviceProperty>();
    IEnumerable<DeviceModelDto> AvailableModels = Array.Empty<DeviceModelDto>();

    public string SelectedTag { get; set; }
    public string SelectedProperty { get; set; }

    private bool isProcessing;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isProcessing = true;

            var models = await DeviceModelsClientService.GetDeviceModels();
            AvailableModels = models.Where(c => !c.SupportLoRaFeatures).ToArray();

            AvailableTags = await DeviceTagSettingsClientService.GetDeviceTags();
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task Save()
    {
        try
        {
            isProcessing = true;

            await DeviceConfigurationsClientService.CreateDeviceConfiguration(Configuration);

            // Prompts a snack bar to inform the action was successful
            Snackbar.Add($"{Configuration.ConfigurationId} has been successfully created!", Severity.Success);

            navigationManager.NavigateTo("/device-configurations");
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    public async Task SelectModel(DeviceModelDto model)
    {
        if (model == null)
        {
            Configuration.ModelId = string.Empty;
            return;
        }
        try
        {
            Configuration.ModelId = model.ModelId;
            AvailableProperties = await DeviceModelsClientService.GetDeviceModelModelProperties(model.ModelId);
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    private async Task<IEnumerable<DeviceModelDto>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return AvailableModels;

        return AvailableModels
            .Where(x => x.Name.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void AddSelectedTag()
    {
        Configuration.Tags.Add(SelectedTag, string.Empty);
        SelectedTag = String.Empty;
    }

    private void AddSelectedProperty()
    {
        Configuration.Properties.Add(SelectedProperty, string.Empty);
        SelectedProperty = String.Empty;
    }
}
