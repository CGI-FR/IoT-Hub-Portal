@page "/device_configurations/new"
@using AzureIoTHub.Portal.Models.v10
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@attribute [Authorize]
@inject HttpClient HttpClient
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device Configuration</MudText>

<MudForm Model="deviceConfiguration" @ref="form">

    <MudExpansionPanels MultiExpansion="true">
        <MudGrid>
            <MudItem xs="12">
                    <MudTextField @bind-Value="deviceConfiguration.ConfigurationID" Label="Id" Variant="Variant.Outlined" Dense=true Required/>
            </MudItem>
                    
            <MudItem xs="12">
                    <MudSelect
                    T="DeviceModel"
                    ValueChanged="@(async (DeviceModel model) => await LoadProperties(model))"
                    Label="Target model" Variant="Variant.Outlined"
                    Dense=true AnchorOrigin="Origin.BottomCenter">
                        @if (Models != null)
                        {
                            @foreach (var item in Models)
                            {
                                <MudSelectItem Value="@(item)"> @item.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="12">
                <MudExpansionPanel Text="Target conditions">
                    <TitleContent><MudText Typo="Typo.h6">Target conditions</MudText></TitleContent>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12" md="9">
                                <MudTable Items="@TagsValues" Dense=true Hover=true Bordered=true Striped=true>
                                    <ColGroup>
                                        <col style="width: 40%;" />
                                        <col style="width: 40%;" />
                                        <col style="width: 10%;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Value</MudTh>
                                        <MudTh Style="text-align: center">Delete</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="TagContexte">
                                        
                                        <MudTd DataLabel="Name" Style="word-break: break-all;">
                                            <MudForm Model="TagContexte">
                                                    <MudSelect
                                                    T="string"
                                                    Label="Tag Name"
                                                    Required="true"
                                                    @bind-Value="@TagContexte.Name"
                                                    For="@(() => TagContexte.Name)"
                                                    HelperText="Name that will be registered in the device twin" HelperTextOnFocus="true"
                                                    Margin="Margin.Dense" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" >
                                                        @foreach (var item in TagsValues)
                                                        {
                                                            <MudSelectItem Value="@(item.Name)" >@item.Name</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                            </MudForm>
                                        </MudTd>
                                        <MudTd>
                                            <MudForm Model="TagContexte">
                                                <MudTextField @bind-Value="@TagContexte.Value" Label="Value"
                                                    HelperText="The Value of the tag" HelperTextOnFocus="true"
                                                    For="@(() => TagContexte.Value)" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true"></MudTextField>
                                            </MudForm>
                                        </MudTd>
                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteTag(TagContexte))"></MudIconButton>
                                        </MudTd>
                                    </RowTemplate>
                                    <FooterContent>
                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddTag">Add a new Tag</MudButton>
                                    </FooterContent>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="12">
                <MudExpansionPanel Text="Properties">
                    <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                    <ChildContent>
                        <MudItem xs="12" md="9">

                            <MudTable Items="@Properties" Dense=true Hover=true Bordered=true Striped=true>
                                <ColGroup>
                                    <col style="width: 40%;" />
                                    <col style="width: 40%;" />
                                    <col style="width: 10%;" />
                                 </ColGroup>
                                 <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Value</MudTh>
                                    <MudTh Style="text-align: center">Delete</MudTh>
                                 </HeaderContent>
                                 <RowTemplate Context="PropertiesContext">
                                     @if (Properties.Count > 0)
                                     {
                                        <MudTd DataLabel="Value" Style="word-break: break-all;">
                                            <MudForm>
                                                <MudTextField @bind-Value="@PropertiesContext.Name" Label="Name"
                                                    HelperText="the value of the property" HelperTextOnFocus="true"
                                                    For="@(() => PropertiesContext.Name)" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true"></MudTextField>
                                            </MudForm>
                                        </MudTd>
                                        <MudTd DataLabel="Value" Style="word-break: break-all;">
                                            <MudForm>
                                                <MudTextField @bind-Value="@PropertiesContext.Value" Label="Value"
                                                    HelperText="the value of the property" HelperTextOnFocus="true"
                                                    For="@(() => PropertiesContext.Value)" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true"></MudTextField>
                                            </MudForm>
                                        </MudTd>
                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteProperty(PropertiesContext))"></MudIconButton>
                                        </MudTd>
                                      }
                                 </RowTemplate>
                                 <FooterContent>
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddProperty">Add a new Property</MudButton>
                                 </FooterContent>
                            </MudTable>

                        </MudItem>
                    </ChildContent>
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>
    </MudExpansionPanels>

    <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save Changes</MudButton>
    </MudItem>
</MudForm>


@code {
    private MudForm form;

    private List<TagValue> TagsValues = new List<TagValue>();
    private List<DevicePropertyValue> Properties = new List<DevicePropertyValue>();

    private List<DeviceModel> Models;
    private DeviceConfig deviceConfiguration = new DeviceConfig();

    protected override async Task OnInitializedAsync()
    {
        await LoadTags();
        Models = await HttpClient.GetFromJsonAsync<List<DeviceModel>>("api/models");

    }

    private async Task Save()
    {
        await form.Validate();

        foreach (var item in TagsValues)
        {
            deviceConfiguration.Tags.Add(item.Name, item.Value);
        }

        foreach (var item in Properties)
        {
            deviceConfiguration.Properties.Add(item.Name, item.Value);
        }

        var result = await HttpClient.PostAsJsonAsync($"api/device/configurations", deviceConfiguration);

        result.EnsureSuccessStatusCode();
    }

    private async Task LoadTags()
    {
        var list = await HttpClient.GetFromJsonAsync<List<DeviceTag>>($"api/settings/device-tags");

        foreach (var item in list)
        {
            TagsValues.Add(new TagValue{ Name = item.Name, Value = ""});
        }
    }

    private void AddTag()
    {
        var last = TagsValues.LastOrDefault();

        if (TagsValues.Count == 0 || (last.Name is not null && last.Value is not null))
        {
            TagsValues.Add(new TagValue());
        }
    }

    private void DeleteTag(TagValue item)
    {
        TagsValues.Remove(item);
    }

    private async Task LoadProperties(DeviceModel model)
    {
        deviceConfiguration.model = model;
        var list = await HttpClient.GetFromJsonAsync<IEnumerable<DevicePropertyValue>>($"api/models/{model.ModelId}/properties");
        this.Properties = list.ToList();
    }

    private void AddProperty()
    {
        var last = Properties.LastOrDefault();

        if (Properties.Count == 0 || (last.Name is not null && last.Value is not null))
        {
            Properties.Add(new DevicePropertyValue());
        }
    }

    private void DeleteProperty(DevicePropertyValue item)
    {
        Properties.Remove(item);
    }

    private class TagValue
    {
        public string Name { get; set; }

        public string Value { get; set; }
    }
}
