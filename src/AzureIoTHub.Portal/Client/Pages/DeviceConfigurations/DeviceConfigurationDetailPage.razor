@page "/device/configurations/{ConfigId}"
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@attribute [Authorize]
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager

@if (deviceConfig == null)
{

}
else
{
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Configuration detail</MudText>
    
    <MudForm Model="deviceConfig" @ref="form">

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Disabled="true" IsInitiallyExpanded="true" HideIcon="true">
            <MudGrid>
                <MudItem xs="12">
                        <MudTextField @bind-Value="deviceConfig.ConfigurationID" Label="Id" Variant="Variant.Outlined" ReadOnly="true" Required/>
                </MudItem>

                <MudItem xs="12">
                        <MudTextField @bind-Value="deviceConfig.model.Name" Label="Model" Variant="Variant.Outlined" ReadOnly="true" Required />
                </MudItem>
            </MudGrid>
        </MudExpansionPanel>

        <MudGrid>
            <MudItem xs="12">
                <MudExpansionPanel Text="Target conditions">
                    <TitleContent><MudText Typo="Typo.h6">Target conditions</MudText></TitleContent>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12" md="9">
                                <MudTable Items="@TagsValues" Dense=true Hover=true Bordered=true Striped=true>
                                    <ColGroup>
                                        <col style="width: 40%;" />
                                        <col style="width: 40%;" />
                                        <col style="width: 10%;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Value</MudTh>
                                        <MudTh Style="text-align: center">Delete</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="TagContexte">

                                        <MudTd DataLabel="Name" Style="word-break: break-all;">
                                            <MudForm Model="TagContexte">
                                                    <MudSelect
                                                    T="string"
                                                    Label="Tag Name"
                                                    Required="true"
                                                    @bind-Value="@TagContexte.Name"
                                                    For="@(() => TagContexte.Name)"
                                                    HelperText="Name that will be registered in the device twin" HelperTextOnFocus="true"
                                                    Margin="Margin.Dense" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" >
                                                    @foreach (var item in TagsName)
                                                    {
                                                                    <MudSelectItem Value="@(item)" >@item</MudSelectItem>
                                                    }
                                                    </MudSelect>
                                            </MudForm>
                                        </MudTd>
                                        <MudTd>
                                            <MudForm Model="TagContexte">
                                                <MudTextField @bind-Value="@TagContexte.Value" Label="Value"
                                                    HelperText="The Value of the tag" HelperTextOnFocus="true"
                                                    For="@(() => TagContexte.Value)" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true"></MudTextField>
                                            </MudForm>
                                        </MudTd>
                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                            <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteTag(TagContexte))"></MudIconButton>
                                        </MudTd>
                                    </RowTemplate>
                                    <FooterContent>
                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddTag" Disabled="cantAddTags">Add a new Tag</MudButton>
                                    </FooterContent>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="12">
                <MudExpansionPanel Text="Properties">
                    <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                    <ChildContent>
                        <MudItem xs="12" md="9">

                            <MudTable Items="@Properties" Dense=true Hover=true Bordered=true Striped=true>
                                <ColGroup>
                                    <col style="width: 40%;" />
                                    <col style="width: 40%;" />
                                    <col style="width: 10%;" />
                                 </ColGroup>
                                 <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Value</MudTh>
                                    <MudTh Style="text-align: center">Delete</MudTh>
                                 </HeaderContent>
                                 <RowTemplate >
                                    @if (Properties.Any())
                                    {
                                                <MudTd DataLabel="Name" Style="word-break: break-all;">
                                                    <MudForm>
                                                        <MudSelect
                                                Label="Name"
                                                Required="true"
                                                ValueChanged="@((DevicePropertyValue property) => UpdateProperty(property, context))"
                                                For="@(() => context)"
                                                Margin="Margin.Dense" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" >
                                                    @foreach (var item in PropertiesList)
                                                {
                                                                <MudSelectItem Value="@(item)" >@item.Name</MudSelectItem>
                                                }
                                                </MudSelect>
                                            </MudForm>
                                        </MudTd>
                                                <MudTd DataLabel="Value" Style="word-break: break-all;">
                                                    <MudForm>
                                                @switch (context?.PropertyType)
                                                {
                                                    case DevicePropertyType.Boolean:
                                                                                <MudCheckBox @bind-Checked="@context.Value" Label="@context.DisplayName" Color="@Color.Primary" Converter="@(new StringToBoolConverter())" TriState="true" />
                                                        break;
                                                    case DevicePropertyType.Double:
                                                                                <MudTextField @bind-Value="@context.Value"
                                                              Label="@context.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                              Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.Float:
                                                                                <MudTextField @bind-Value="@context.Value"
                                                              Label="@context.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                              Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.Integer:
                                                                                <MudTextField @bind-Value="@context.Value"
                                                              Label="@context.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                              Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.Long:
                                                                                <MudTextField @bind-Value="@context.Value"
                                                              Label="@context.DisplayName"
                                                              Variant="Variant.Outlined"
                                                              Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                              Clearable="true" />
                                                        break;
                                                    case DevicePropertyType.String:
                                                                                <MudTextField @bind-Value="@context.Value" Label="@context.DisplayName" Format="F1" Variant="Variant.Outlined" Clearable="true" />
                                                        break;
                                                    default:
                                                        break;
                                                }
                                                    </MudForm>
                                                </MudTd>
                                                <MudTd DataLabel="Delete" Style="text-align: center">
                                                    <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteProperty(context))"></MudIconButton>
                                                </MudTd>
                                    }
                                 </RowTemplate>
                                 <FooterContent>
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" Disabled="@(cantAddProperty)" OnClick="AddProperty">Add a new Property</MudButton>
                                 </FooterContent>
                            </MudTable>

                        </MudItem>
                    </ChildContent>
                </MudExpansionPanel>
            </MudItem>
        </MudGrid>
    </MudExpansionPanels>

    <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save Changes</MudButton>
    </MudItem>
    </MudForm>
}

@code {
    [Parameter]
    public string ConfigId { get; set; }

    public DeviceConfig deviceConfig { get; set; } = new DeviceConfig();

    private MudForm form;

    // List of tags we see
    private List<TagValue> TagsValues;
    // List of tags in the select
    private List<string> TagsName = new List<string>();
    private bool cantAddTags = false;

    // List of properties we see
    private List<DevicePropertyValue> Properties = new List<DevicePropertyValue>();
    // List of properties in the select
    private List<DevicePropertyValue> PropertiesList = new List<DevicePropertyValue>();
    private bool cantAddProperty = false;

    protected override async Task OnInitializedAsync()
    {
        deviceConfig = await HttpClient.GetFromJsonAsync<DeviceConfig>($"api/device/configurations/{ConfigId}");
        deviceConfig.model = await HttpClient.GetFromJsonAsync<DeviceModel>($"api/models/{deviceConfig.model.ModelId}");
        await LoadTags();
        await LoadProperties();
    }

    private async Task LoadTags()
    {
        var list = await HttpClient.GetFromJsonAsync<List<DeviceTag>>($"api/settings/device-tags");

        foreach (var item in list)
        {
            TagsName.Add(item.Name);
        }

        TagsValues = new List<TagValue>(TagsName.Count);
        foreach (var item in deviceConfig.Tags)
        {
            TagsValues.Add(new TagValue
            {
                Name = item.Key,
                Value = item.Value
            });
        }
    }

    private void AddTag()
    {
        var last = TagsValues.LastOrDefault();

        if ((!TagsValues.Any() || (last.Name is not null && last.Value is not null)) && TagsName.Count > 0)
        {
            TagsValues.Add(new TagValue
                {
                    Name = string.Empty,
                    Value = string.Empty
                });

            if (last != null)
            {
                for (var i = 0; i < TagsName.Count; i++)
                {
                    if (TagsName[i] == last.Name)
                    {
                        TagsName.RemoveAt(i);
                    }
                }
            }

            if (TagsName.Count == 1)
            {
                cantAddTags = true;
            }
            StateHasChanged();
        }

    }

    private void DeleteTag(TagValue item)
    {
        TagsValues.Remove(item);
        if (!TagsName.Any(c => c.Equals(item.Name)))
        {
            TagsName.Add(item.Name);
        }
        cantAddTags = false;
    }

    private async Task LoadProperties()
    {
        var list = await HttpClient.GetFromJsonAsync<IEnumerable<DevicePropertyValue>>($"api/models/{deviceConfig.model.ModelId}/properties");
        this.PropertiesList = list.ToList();

        Properties.Capacity = list.Count();
        foreach (var item in deviceConfig.Properties)
        {
            Properties.Add(new DevicePropertyValue
                {
                    Name = item.Key,
                    Value = item.Value.ToString()
                });
        }
    }

    private void AddProperty()
    {
        var last = Properties.LastOrDefault();

        if ((Properties.Count == 0 || (last.Name is not null && last.Value is not null)) && Properties.Count < PropertiesList.Count)
        {
            Properties.Add(new DevicePropertyValue());
        }
    }

    private void UpdateProperty(DevicePropertyValue propertyValueSelect, DevicePropertyValue propertyValue)
    {
        if (propertyValueSelect.Name != propertyValue?.Name)
        {
            int index = Properties.IndexOf(propertyValue);
            if (index != -1)
            {
                Properties[index] = propertyValueSelect;
            }
        }
        StateHasChanged();
    }

    private void DeleteProperty(DevicePropertyValue item)
    {
        Properties.Remove(item);
    }

    private async Task Delete()
    {

    }

    private async Task Save()
    {

    }

    private void CanAddProperties()
    {
        if (Properties.Count == PropertiesList.Count)
        {
            cantAddProperty = true;
        }
    }


    private class TagValue
    {
        public string Name { get; set; }

        public string Value { get; set; }
    }
}
