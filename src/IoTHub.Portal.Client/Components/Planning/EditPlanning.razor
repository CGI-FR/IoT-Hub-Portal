@using IoTHub.Portal.Client.Dialogs.EdgeModels.EdgeModule
@using IoTHub.Portal.Models
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Shared.Models.v10
@using IoTHub.Portal.Client.Validators
@using System.Net.Http.Headers
@using IoTHub.Portal.Shared.Constants
@using IoTHub.Portal.Client.Models
@using IoTHub.Portal.Shared.Models
@using IoTHub.Portal.Shared.Models.v10.Filters
@using IoTHub.Portal.Models.v10.LoRaWAN

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject PortalSettings Portal

@inject IPlanningClientService PlanningClientService
@inject IScheduleClientService ScheduleClientService
@inject ILayerClientService LayerClientService
@inject IDeviceModelsClientService DeviceModelsClientService
@inject ILoRaWanDeviceModelsClientService LoRaWanDeviceModelsClientService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">
    @mode Planning
    <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="Save" id="saveButton" Disabled="isProcessing">Save</MudButton>
</MudText>
@if (!isProcessing)
{
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="@planning.Name" For="@(() => planning.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                        </MudItem>
                        <MudTd DataLabel="Command" Style="text-align: center;">
                            <MudSelect @bind-Value="@SelectedModel" Label="Device Model" Margin="Margin.Dense" Variant="Variant.Outlined">
                                @foreach (string model in CommandDictionary.Keys.ToList())
                                {
                                    <MudSelectItem Value="@(model)">@model</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="Business Day" IsInitiallyExpanded="true">
                <TitleContent><MudText Typo="Typo.h6">Business Day</MudText></TitleContent>
                <ChildContent>
                    <MudItem xs="12">
                        <MudTable Items="@scheduleList" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                            <ColGroup>
                                <col style="width: 5%;" />
                                <col style="width: 5%;" />
                                <col style="width: 10%;" />
                                <col style="width: 5%;" />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh Style="text-align: center">From</MudTh>
                                <MudTh Style="text-align: center">To</MudTh>
                                <MudTh Style="text-align: center">Command</MudTh>
                                <MudTh Style="text-align: center">Delete</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="ContextSchedule">
                                <MudTd DataLabel="Start" Style="word-break: break-all;">
                                    <MudTextField @bind-Value="@ContextSchedule.Start" Margin="Margin.Dense" T="string" Label="Time" InputType="InputType.Time" For="@(() => ContextSchedule.Start )" Variant="Variant.Outlined" Required="true" Disabled="@(scheduleList.IndexOf(ContextSchedule)==0)"></MudTextField>
                                </MudTd>
                                <MudTd DataLabel="End" Style="word-break: break-all;">
                                    <MudTextField @bind-Value="@ContextSchedule.End" Margin="Margin.Dense" T="string" Label="Time" InputType="InputType.Time" For="@(() => ContextSchedule.Start )" Variant="Variant.Outlined" Required="true"></MudTextField>
                                </MudTd>
                                <MudTd DataLabel="Command" Style="text-align: center;">
                                    <MudSelect @bind-Value="@ContextSchedule.CommandId" Label="Command" Margin="Margin.Dense" Variant="Variant.Outlined">
                                        @foreach (var command in CommandDictionary[SelectedModel])
                                        {
                                            <MudSelectItem Value="@(@command.Id)">@command.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Delete" Style="text-align: center">
                                    <MudIconButton Color="Color.Default" Class="deleteRouteButton" OnClick="( () => DeleteSchedule(ContextSchedule))" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium"></MudIconButton>
                                </MudTd>
                            </RowTemplate>
                            <FooterContent>
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" id="addScheduleButton" OnClick="AddSchedule" Color="Color.Success">Add slot</MudButton>
                            </FooterContent>
                        </MudTable>
                        <div>
                            Days:
                            @foreach (string day in AvailableDay)
                            {
                                <MudButton Size="Size.Medium" id="addScheduleButton" OnClick="() => ChangeOffDay(day)" Color="@((planning.Day.Contains(day)) ? Color.Error : Color.Success)">@day</MudButton>
                            }
                        </div>
                    </MudItem>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="Off Day" IsInitiallyExpanded="true">
                <TitleContent><MudText Typo="Typo.h6">Off Day</MudText></TitleContent>
                <ChildContent>
                    <MudItem xs="12">
                        <MudTable Items="@scheduleOffList" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                            <ColGroup>
                                <col style="width: 5%;" />
                                <col style="width: 5%;" />
                                <col style="width: 10%;" />
                                <col style="width: 5%;" />
                            </ColGroup>
                            <HeaderContent>
                                <MudTh Style="text-align: center">From</MudTh>
                                <MudTh Style="text-align: center">To</MudTh>
                                <MudTh Style="text-align: center">Command</MudTh>
                                <MudTh Style="text-align: center">Delete</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="ContextSchedule">
                                <MudTd DataLabel="Start" Style="word-break: break-all;">
                                    <MudTextField Margin="Margin.Dense" Label="From 00:00" For="@(() => ContextSchedule.Start )" Variant="Variant.Outlined" Disabled="true"></MudTextField>
                                </MudTd>
                                <MudTd DataLabel="End" Style="word-break: break-all;">
                                    <MudTextField Margin="Margin.Dense" Label="To 24:00" For="@(() => ContextSchedule.End )" Variant="Variant.Outlined" Disabled="true" />
                                </MudTd>
                                <MudTd DataLabel="Command" Style="text-align: center;">
                                    <MudSelect @bind-Value="@planning.CommandId" Label="Command" Margin="Margin.Dense" Variant="Variant.Outlined">
                                        @foreach (var command in CommandDictionary[SelectedModel])
                                        {
                                            <MudSelectItem Value="@(@command.Id)">@command.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Delete" Style="text-align: center">
                                    <MudIconButton Color="Color.Default" Class="deleteRouteButton" OnClick="( () => DeleteSchedule(ContextSchedule))" Icon="@Icons.Material.Outlined.Delete" Size="Size.Medium"></MudIconButton>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <div>
                            Days:
                            @foreach (string day in AvailableDay)
                            {
                                <MudButton Size="Size.Medium" id="addScheduleButton" OnClick="() => ChangeOffDay(day)" Color="@((planning.Day.Contains(day)) ? Color.Success : Color.Error)">@day</MudButton>
                            }
                        </div>
                    </MudItem>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="Date of application of this planning" IsInitiallyExpanded="true">
                <TitleContent><MudText Typo="Typo.h6">Date of application of this planning</MudText></TitleContent>
                <ChildContent>
                    <MudTd DataLabel="From" Style="word-break: break-all;">
                        <MudSelect @bind-Value="@planning.Start" Label="From" Margin="Margin.Dense" Variant="Variant.Outlined">
                            @foreach (string month in AvailableMonth)
                            {
                                <MudSelectItem Value="@(month)">@month</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd DataLabel="To" Style="word-break: break-all;">
                        <MudSelect @bind-Value="@planning.End" Label="From" Margin="Margin.Dense" Variant="Variant.Outlined">
                            @foreach (string month in AvailableMonth)
                            {
                                <MudSelectItem Value="@(month)">@month</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
    <MudGrid>
        <MudItem xs="12">
            <MudExpansionPanel Text="Select your application areas" IsInitiallyExpanded="true">
                <TitleContent><MudText Typo="Typo.h6">Select your application areas</MudText></TitleContent>
                <ChildContent>
                    <MudPaper Class="overflow-y-auto" Elevation="0">
                        <MudTreeView Items="@Layers">
                            <ItemTemplate>
                                <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.Children">
                                    <Content>
                                        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@(context.Children.Count() != 0)" />
                                        <MudCheckBox T="bool?" Checked="@(context.LayerData.Planning == planning.Id)" CheckedChanged="@((e) => CheckedChanged(context))"></MudCheckBox>
                                        <MudText>@context.LayerData.Name</MudText>
                                    </Content>
                                </MudTreeViewItem>
                            </ItemTemplate>
                        </MudTreeView>
                    </MudPaper>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    [Parameter]
    public string mode { get; set; } = default!;
    [Parameter]
    public List<ScheduleDto> scheduleList { get; set; } = new List<ScheduleDto> { };
    [Parameter]
    public List<ScheduleDto> initScheduleList { get; set; } = new List<ScheduleDto> { };
    [Parameter]
    public PlanningDto planning { get; set; } = new PlanningDto();
    [Parameter]
    public string SelectedModel { get; set; } = "";

    public List<ScheduleDto> scheduleOffList { get; set; } = new List<ScheduleDto> { new ScheduleDto() };

    public IEnumerable<string> AvailableMonth { get; set; } = new List<string>() { "January", "February", "March", "April", "Mai", "June", "July", "August", "September", "October", "Novembre", "December" };
    public IEnumerable<string> AvailableDay { get; set; } = new List<string>() { "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su" };

    public IEnumerable<IDeviceModel> DeviceModels = new List<IDeviceModel>();
    Dictionary<string, List<DeviceModelCommandDto>> CommandDictionary = new Dictionary<string, List<DeviceModelCommandDto>>();

    private bool isProcessing;

    public HashSet<LayerHash> Layers { get; set; } = new HashSet<LayerHash> { };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isProcessing = true;

            if (planning.CommandId == null) SelectedModel = "Choose a Device Model";

            CommandDictionary.Add("Choose a Device Model", new List<DeviceModelCommandDto>());

            List<LayerDto> listLayers = await LayerClientService.GetLayers();
            ReloadSubLayers(listLayers);

            var filter = new DeviceModelFilter
                {
                    SearchText = "",
                    PageNumber = 0,
                    PageSize = 100,
                    OrderBy = new string[]
                                {
                    string.Empty
                                }
                };
            DeviceModels = (await DeviceModelsClientService.GetDeviceModels(filter)).Items.ToList<IDeviceModel>();
            foreach(var deviceModel in DeviceModels)
            {
                IList<DeviceModelCommandDto> commandList = await LoRaWanDeviceModelsClientService.GetDeviceModelCommands(deviceModel.ModelId);
                CommandDictionary.Add(deviceModel.Name, new List<DeviceModelCommandDto>(commandList));

                foreach(var command in commandList)
                {
                    if (command.Id == planning.CommandId)
                    {
                        SelectedModel = deviceModel.Name;
                    }
                }
            }
            CommandDictionary = CommandDictionary.Where(commands => commands.Value.Any() || commands.Key == "Choose a Device Model").ToDictionary(commands => commands.Key, commands => commands.Value);
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void DeleteSchedule(ScheduleDto schedule)
    {
        if (scheduleList.Count > 1) scheduleList.Remove(schedule);
    }

    private void AddSchedule()
    {
        var last = scheduleList.LastOrDefault();

        if (scheduleList.Count == 0 || (last?.Start is not null && last?.End is not null && last?.CommandId is not null))
        {
            ScheduleDto newSchedule = new ScheduleDto();
            scheduleList.Add(newSchedule);
        }
    }

    private void ChangeOffDay(string day)
    {
        string days = planning.Day;
        if (days.Contains(day)) days.Replace(day, "");
        else days += day;
        planning.Day = days;
        StateHasChanged();
    }

    public async void Save()
    {
        await SavePlanning();
        await SaveLayers(Layers);
        NavigationManager.NavigateTo($"/planning");
    }

    public async Task SavePlanning()
    {
        try
        {
            planning.DayExceptions = "None";
            if (mode == "New") await PlanningClientService.CreatePlanning(planning);
            else await PlanningClientService.UpdatePlanning(planning);
            foreach (ScheduleDto schedule in scheduleList)
            {
                schedule.PlanningId = planning.Id;

                if (initScheduleList.Any(obj => obj.Id == schedule.Id))
                {
                    await ScheduleClientService.UpdateSchedule(schedule);
                }
                else
                {
                    await ScheduleClientService.CreateSchedule(schedule);
                }
            }
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    protected void CheckedChanged(LayerHash item)
    {
        if (item.LayerData.Planning == planning.Id) item.LayerData.Planning = "None";
        else item.LayerData.Planning = planning.Id;

        if (item.Children.Count() != 0)
        {
            foreach (LayerHash child in item.Children)
            {
                CheckedChanged(child);
            }
        }
    }

    private void ReloadSubLayers(List<LayerDto> layers)
    {
        if (layers.Count() == 0) return;

        LayerDto firstLayer = layers[0];
        bool isAdd = false;

        if (firstLayer.Father == "Init")
        {
            Layers.Add(new LayerHash(firstLayer, 0, false));
            isAdd = true;
        }
        else isAdd = addSubLayer(Layers, firstLayer);

        layers.RemoveAt(0);
        if (!isAdd) layers.Add(firstLayer);

        if (layers.Count() != 0) ReloadSubLayers(layers);
    }

    private bool addSubLayer(HashSet<LayerHash> childLayers, LayerDto layer)
    {
        foreach (LayerHash subLayer in childLayers)
        {
            if (subLayer.LayerData.Id == layer.Father)
            {
                subLayer.Children.Add(new LayerHash(layer, 0, false));
                return true;
            }
            else
            {
                bool isAdd = addSubLayer(subLayer.Children, layer);
                if (isAdd) return true;
            }
        }
        return false;
    }

    public async Task SaveLayers(HashSet<LayerHash> saveLayers)
    {
        try
        {
            foreach (LayerHash layer in saveLayers)
            {
                await LayerClientService.UpdateLayer(layer.LayerData);

                if (layer.Children.Count() != 0)
                {
                    await SaveLayers(layer.Children);
                }
            }
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }
}
