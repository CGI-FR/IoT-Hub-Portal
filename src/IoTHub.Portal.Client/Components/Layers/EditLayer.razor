@using IoTHub.Portal.Client.Dialogs.EdgeModels.EdgeModule
@using IoTHub.Portal.Models
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Shared.Models.v10
@using IoTHub.Portal.Client.Validators 
@using System.Net.Http.Headers
@using IoTHub.Portal.Shared.Constants
@using IoTHub.Portal.Client.Models
@using IoTHub.Portal.Client.Dialogs.Devices;

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject PortalSettings Portal

@inject ILayerClientService LayerClientService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">
    @mode Layer
    <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="() => Save(layers, true)" id="saveButton">Save</MudButton>
</MudText>
<MudGrid>
    <MudItem xs="12">
        <MudTreeView Items="@layers" Hover="true" Width="100%" ExpandOnClick="true">
            <ItemTemplate Context="item">
                <MudTreeViewItem Items="@item.Children" @bind-Expanded="@item.IsExpanded">
                    <BodyContent>
                        <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%"  @onmouseover="() => printDetails = item.LayerData.Id">
                            <div style="width: 75%">
                                @if (editItem == item.LayerData.Id)
                                {
                                    <MudTextField @bind-Value="@item.LayerData.Name" For="@(() => item.LayerData.Name)" @onkeypress="@(e => HandleKeyPress(e))" />
                                }
                                else
                                {
                                    <MudText>@item.LayerData.Name</MudText>

                                }
                            </div>
                            <div style="justify-self: end;">
                                @if (printDetails == item.LayerData.Id)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" @onclick="() => editItem = item.LayerData.Id" />
                                    <MudIconButton Icon="@(item.LayerData.Father != "Init" ? Icons.Material.Filled.Delete : @Icons.Material.Outlined.Delete)" Size="Size.Medium" Color="Color.Inherit" @onclick="() => DeleteLayer(item, layers)" />
                                    <MudIconButton Icon="@(item.Level != LAYER_NAMES.Count() ? Icons.Material.Filled.AddBox : @Icons.Material.Outlined.AddBox)" Size="Size.Medium" Color="Color.Inherit" @onclick="() => AddLayer(item)" />
                                }
                                <MudIconButton Icon="@Icons.Material.TwoTone.Memory" Size="Size.Medium" Color="Color.Inherit" @onclick="() => OpenDevices(item.LayerData)" />
                            </div>
                        </div>
                    </BodyContent>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </MudItem>
</MudGrid>

@code {
    public List<string> LAYER_NAMES = new List<string>() { "Main Layer", "Sub-Layer 1", "Sub-Layer 2" };

    [CascadingParameter]
    public Error Error { get; set; } = default!;

    [Parameter]
    public string mode { get; set; } = default!;
    [Parameter]
    public HashSet<LayerHash> layers { get; set; } = new HashSet<LayerHash> { };
    [Parameter]
    public List<LayerDto> initLayers { get; set; } = new List<LayerDto>();
    public List<LayerDto> deleteLayers { get; set; } = new List<LayerDto>();

    public string printDetails { get; set; } = "Init";
    public string editItem { get; set; } = "";

    public void AddLayer(LayerHash layer)
    {
        try
        {
            if (layer.Level + 1 <= LAYER_NAMES.Count())
            {
                LayerDto newLayer = new LayerDto();
                newLayer.Name = "New Layer";
                newLayer.Father = layer.LayerData.Id;
                layer.Children.Add(new LayerHash(newLayer, layer.Level + 1, false));
                layer.IsExpanded = true;
            }

        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public void DeleteLayer(LayerHash delLayer, HashSet<LayerHash> fatherLayers)
    {
        foreach (LayerHash layer in fatherLayers)
        {
            if (layer.Children.Contains(delLayer))
            {
                RemoveChild(delLayer);
                layer.Children.Remove(delLayer);
            }
            else
            {
                DeleteLayer(delLayer, layer.Children);
            }
        }
    }

    public void RemoveChild(LayerHash delLayer)
    {
        if (delLayer.Children.Count() != 0)
            foreach (LayerHash layer in delLayer.Children) RemoveChild(layer);

        deleteLayers.AddRange(initLayers.Where(obj => obj.Id == delLayer.LayerData.Id).ToList());
    }

    public async Task Save(HashSet<LayerHash> layerHash, bool quit)
    {
        await SaveLayer(layerHash, true);
        foreach (LayerDto layer in deleteLayers)
        {
            await LayerClientService.DeleteLayer(layer.Id);
        }
        if (quit) NavigationManager.NavigateTo($"/layer");
    }

    public async Task SaveLayer(HashSet<LayerHash> layerHash, bool isFirst = false)
    {
        try
        {
            foreach (LayerHash layer in layerHash)
            {
                if (initLayers.Any(obj => obj.Id == layer.LayerData.Id))
                {
                    await LayerClientService.UpdateLayer(layer.LayerData);
                }
                else
                {
                    layer.LayerData.Planning = "None";
                    await LayerClientService.CreateLayer(layer.LayerData);
                }

                await SaveLayer(layer.Children);
            }

        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public async void OpenDevices(LayerDto layer)
    {
        await Save(layers, false);

        var parameter = new DialogParameters { { "Layer", layer } };

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, CloseButton = true };

        var result = await DialogService.Show<LinkDeviceLayerDialog>("Select your " + layer.Name + " devices", parameter, options).Result;
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "Escape")
        {
            editItem = "";
        }
    }
}

