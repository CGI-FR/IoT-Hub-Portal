@inject PortalSettings Portal

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 600px; overflow-y: scroll">
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudTextField @bind-Value="@currentModuleName"
                                  id=@nameof(IoTEdgeModule.ModuleName)
                                  Label="Module name"
                                  Variant="Variant.Outlined"
                                  For="@(() => Module.ModuleName)"
                                  Required="true"/>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudTextField @bind-Value="@currentStartupOrder"
                                  id=@nameof(IoTEdgeModule.StartupOrder)
                                  Label="Startup Order"
                                  Variant="Variant.Outlined"
                                  For="@(() => Module.StartupOrder)"
                                  Required="false" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="@currentImage"
                                  id=@nameof(IoTEdgeModule.Image)
                                  Label="Image URI"
                                  Variant="Variant.Outlined"
                                  For="@(() => Module.Image)"
                                  Required="true"/>
                </MudItem>

                @if (Portal.CloudProvider.Equals(CloudProviders.Azure))
                {
                    <MudItem xs="12">
                        <MudTextField @bind-Value="@currentContainerCreateOptions"
                                      id=@nameof(IoTEdgeModule.ContainerCreateOptions)
                                  Label="Container Create Options"
                                  Variant="Variant.Outlined"
                                  For="@(() => Module.ContainerCreateOptions)" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info"><MudLink Href="https://learn.microsoft.com/en-us/azure/iot-edge/how-to-use-create-options" Target="_blank ">How to configure container create options for IoT Edge modules</MudLink></MudAlert>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="5">
                        <MudTextField @bind-Value="@currentNumVersion"
                                      id=@nameof(IoTEdgeModule.Version)
                                  Label="Version Number"
                                  Variant="Variant.Outlined"
                                  For="@(() => Module.Version)"
                                  Required="true"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Warning">The Version Number should be incremented when updating the component</MudAlert>
                    </MudItem>
                }

            </MudGrid>

            <MudTabs Elevation="1" Class="mt-10" Rounded="true" PanelClass="mt-6">

                <MudTabPanel Text="Environment variables">
                    <ModuleDialogTab1 EnvironmentVariables="@currentEnvironmentVariables"/>
                </MudTabPanel>

                @if (Portal.CloudProvider.Equals(CloudProviders.Azure))
                {
                    <MudTabPanel Text="Module identity twin settings">
                        <ModuleDialogTab2 ModuleIdentityTwinSettings="@currentModuleIdentityTwinSettings" />
                    </MudTabPanel>

                    <MudTabPanel Text="Commands">
                        <ModuleDialogTab3 Commands="@currentCommands" />
                    </MudTabPanel>
                }

            </MudTabs>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton id="SubmitButton" Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public IoTEdgeModule Module { get; set; } = default!;

    private string currentModuleName = default!;
    private string currentImage = default!;
    private string currentContainerCreateOptions = default!;
    private string currentNumVersion = "1.0.0";
    private int currentStartupOrder;

    private List<IoTEdgeModuleEnvironmentVariable> currentEnvironmentVariables = new();
    private List<IoTEdgeModuleTwinSetting> currentModuleIdentityTwinSettings = new();
    private List<IoTEdgeModuleCommand> currentCommands = new();


    public bool IsLoading;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        currentModuleName = Module.ModuleName;
        currentImage = Module.Image;
        currentContainerCreateOptions = Module.ContainerCreateOptions;
        currentNumVersion = Module.Version;
        currentStartupOrder = Module.StartupOrder;
        currentEnvironmentVariables = new List<IoTEdgeModuleEnvironmentVariable>(Module.EnvironmentVariables.ToArray());
        currentModuleIdentityTwinSettings = new List<IoTEdgeModuleTwinSetting>(Module.ModuleIdentityTwinSettings.ToArray());
        currentCommands = new List<IoTEdgeModuleCommand>(Module.Commands.ToArray());
        await Task.Delay(0);
        IsLoading = false;
    }

    public void Submit()
    {
        Module.ModuleName = currentModuleName;
        Module.Image = currentImage;
        Module.ContainerCreateOptions = currentContainerCreateOptions;
        Module.StartupOrder = currentStartupOrder;

        if (Portal.CloudProvider.Equals(CloudProviders.Azure)) { Module.Version = " "; }
        else { Module.Version = currentNumVersion; }

        Module.EnvironmentVariables = new List<IoTEdgeModuleEnvironmentVariable>(currentEnvironmentVariables.ToArray());
        Module.ModuleIdentityTwinSettings = new List<IoTEdgeModuleTwinSetting>(currentModuleIdentityTwinSettings.ToArray());
        Module.Commands = new List<IoTEdgeModuleCommand>(currentCommands.ToArray());
        MudDialog.Close(DialogResult.Ok(true));
    }
}
