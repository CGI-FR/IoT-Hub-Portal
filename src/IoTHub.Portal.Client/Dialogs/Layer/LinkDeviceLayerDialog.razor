@inject IDeviceClientService DeviceClientService
@inject ILayerClientService LayerClientService
@inject IDeviceModelsClientService DeviceModelsClientService

<MudDialog MaxWidth="800px" MaxHeight="600px">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="@LayerName" For="@(() => LayerName)" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" xd="12">
                @if (!IsLoading)
                {
                    <div style="display: flex; align-items: center;">
                        <MudSelect @bind-Value="@SelectedModel" Label="Device Model" Margin="Margin.Dense" Variant="Variant.Outlined">
                            @foreach (IDeviceModel model in DeviceModels)
                            {
                                <MudSelectItem Value="@(model)">@model.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Primary" OnClick="Search" id="saveButton">Search</MudButton>
                    </div>
                }
                <MudTable T="DeviceListItem" ServerData=@LoadItems Dense=true Hover=true Bordered=true Striped=true @ref="_table" Loading="@IsLoading" RowStyle="cursor: pointer;">
                    <ColGroup>
                        <col style="width: 10%;" />
                        <col style="width: 70%;" />
                        <col style="width: 20%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh>Device</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="text-align: center">
                            <img height="25" src="@context.Image" />
                        </MudTd>
                        <MudTd DataLabel="Device">
                            <MudItem>
                                <MudText Typo="Typo.body1" Inline="true">@context.DeviceName</MudText>
                            </MudItem>
                        </MudTd>
                        <MudTd DataLabel="Delete" Style="text-align: center">
                            @if ((context.LayerId != null && context.LayerId == InitLayer.Id) || DeviceList.Contains(context.DeviceID))
                            {
                                <MudTooltip Text="Already registered">
                                    <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.CheckBox" Size="Size.Medium" @onclick="() => UpdateChecked(context)"></MudIconButton>
                                </MudTooltip>
                            }
                            else if (context.LayerId != null && context.LayerId.Contains('-'))
                            {
                                <MudTooltip Text="Registered on other Layer">
                                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.IndeterminateCheckBox" Size="Size.Medium" @onclick="() => UpdateChecked(context)"></MudIconButton>
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="Add device">
                                    <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" Size="Size.Medium" @onclick="() => UpdateChecked(context)"></MudIconButton>
                                </MudTooltip>
                            }
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new[] { 5, 10 }" />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton id="cancel" OnClick="Cancel">Cancel</MudButton>
        <MudButton id="save" Color="Color.Primary" OnClick="SaveDevice">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public LayerDto InitLayer { get; set; } = default!;
    [Parameter] public HashSet<LayerHash> LayerList { get; set; } = default!;

    public string LayerName { get; set; } = default!;

    private IEnumerable<DeviceListItem> Devices { get; set; } = new List<DeviceListItem>();
    private MudTable<DeviceListItem>? _table;

    private readonly string? _searchId = "";

    public IDeviceModel SelectedModel = new DeviceModelDto();
    public IEnumerable<IDeviceModel> DeviceModels = new List<IDeviceModel>();
    public bool ModelIdLoad;

    public List<string> DeviceList { get; init; } = new();
    public List<string> DeviceRemoveList { get; init; } = new();

    private bool IsLoading { get; set; } = true;

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        LayerName = InitLayer.Name;
        var filter = new DeviceModelFilter
            {
                SearchText = "",
                PageNumber = 0,
                PageSize = 100,
                OrderBy = new[]
                {
                    string.Empty
                }
            };

        DeviceModels = (await DeviceModelsClientService.GetDeviceModelsAsync(filter)).Items.ToList<IDeviceModel>();

        if (DeviceModels.Count() != 0) SelectedModel = DeviceModels.First();

        IsLoading = false;
    }

    private void Search()
    {
        ModelIdLoad = true;
        _table?.ReloadServerData();
    }

    private async Task<TableData<DeviceListItem>> LoadItems(TableState state)
    {
        try
        {
            var uri = $"api/devices?pageNumber={state.Page}&pageSize={state.PageSize}&searchText={HttpUtility.UrlEncode(_searchId)}";
            if (ModelIdLoad) uri += $"&modelId={SelectedModel.ModelId}";

            var result = await DeviceClientService.GetDevices(uri);
            Devices = result.Items;

            return new TableData<DeviceListItem>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        catch (ProblemDetailsException exception)
        {
            Error.ProcessProblemDetails(exception);

            return new TableData<DeviceListItem>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    public void UpdateChecked(DeviceListItem device)
    {
        if (device.LayerId != null && device.LayerId == InitLayer.Id)
        {
            if (DeviceRemoveList.Contains(device.DeviceID)) DeviceRemoveList.Remove(device.DeviceID);
            else
            {
                DeviceList.Remove(device.DeviceID);
                DeviceRemoveList.Add(device.DeviceID);
                device.LayerId = null;
            }
        }
        else
        {
            if (DeviceList.Contains(device.DeviceID)) DeviceList.Remove(device.DeviceID);
            else DeviceList.Add(device.DeviceID);
        }
    }

    private async Task SaveDevice()
    {
        try
        {
            InitLayer.Name = LayerName;
            await LayerClientService.UpdateLayer(InitLayer);
            foreach (string deviceRemove in DeviceRemoveList)
            {
                DeviceDetails updatedDevice = FindDevice(deviceRemove);
                updatedDevice.LayerId = null;
                await DeviceClientService.UpdateDevice(updatedDevice);
            }
            foreach (string device in DeviceList)
            {
                DeviceDetails updatedDevice = FindDevice(device);
                updatedDevice.LayerId = InitLayer.Id;
                await DeviceClientService.UpdateDevice(updatedDevice);
            }
        }
        catch (ProblemDetailsException exception)
        {
            Error.ProcessProblemDetails(exception);
        }
        finally
        {
            MudDialog.Close(DialogResult.Ok(InitLayer.Name));
        }
    }

    private DeviceDetails FindDevice(string deviceId)
    {
        var device = Devices.FirstOrDefault(device => device.DeviceID == deviceId);

        var deviceDetails = new DeviceDetails();

        if (device == null) return deviceDetails;

        deviceDetails.DeviceID = device.DeviceID;
        deviceDetails.DeviceName = device.DeviceName;
        deviceDetails.ModelId = device.DeviceModelId;
        deviceDetails.Image = device.Image;
        deviceDetails.IsConnected = device.IsConnected;
        deviceDetails.IsEnabled = device.IsEnabled;
        deviceDetails.StatusUpdatedTime = device.StatusUpdatedTime;
        deviceDetails.LastActivityTime = device.LastActivityTime;
        deviceDetails.Labels = device.Labels.ToList();
        deviceDetails.LayerId = device.LayerId;

        return deviceDetails;
    }
}
