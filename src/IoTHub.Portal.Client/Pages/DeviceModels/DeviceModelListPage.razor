@page "/device-models"
@using IoTHub.Portal.Shared.Models.v1._0
@using IoTHub.Portal.Shared.Models.v1._0.Filters

@attribute [Authorize]
@inject NavigationManager navigationManager
@inject PortalSettings Portal
@inject IDialogService dialogService
@inject IDeviceModelsClientService DeviceModelsClientService

<MudGrid>
    <MudItem xs="12">
        <DeviceModelSearch OnSearch=@(async args => await Search(args)) />
    </MudItem>
    <MudItem xs="12">
        <MudTable T="DeviceModelDto" ServerData=@LoadDeviceModels Loading="@IsLoading" @ref="table" Dense=true Hover=true Bordered=true Striped=true OnRowClick="@((e) => GoToDetails(e.Item))" RowStyle="cursor: pointer;">
            <ColGroup>
                <col style="width: 5%;" />
                <col style="width: 30%;" />
                <col style="width: 30%;" />
                <col style="width: 5%;" />
                <col style="width: 5%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Device Models</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="@Refresh" Class="ma-2" id="tableRefreshButton"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Add device model">
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="AddDeviceModel" id="addDeviceModelButton" />
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Name" T="DeviceModelDto" id="NameLabel">Name</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="Description" T="DeviceModelDto" id="DescriptionLabel">Description</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center">Details</MudTh>
                <MudTh Style="text-align: center">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align: center">
                    <img height="25" src="@context.ImageUrl" />
                </MudTd>
                <MudTd DataLabel="Name">
                    <MudItem>
                        <MudText Typo="Typo.body1" Inline="true">
                            @context.Name
                        </MudText>
                    </MudItem>
                    <MudItem>
                        <Labels Items="@context.Labels" />
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Description" Style="word-break: break-all; ">
                    @context.Description
                </MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <MudTooltip Text="See device model details">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudTooltip Text="Delete device model">
                        <MudIconButton Color="Color.Default" Disabled="context.IsBuiltin" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => DeleteDeviceModel(context))" id="deleteButton"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>
    </MudItem>

</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private MudTable<DeviceModelDto> table = default!;

    private readonly Dictionary<int, string> pages = new();

    //private List<DeviceModelDto> DeviceModelList = new List<DeviceModelDto>();

    private bool IsLoading = true;

    private DeviceModelSearchInfo deviceModelSearchInfo = new();

    //protected override async Task OnInitializedAsync()
    //{
    //    table.ReloadServerData();
    //}

    private void AddDeviceModel()
    {
        navigationManager.NavigateTo("/device-models/new");
    }

    /// <summary>
    ///  Sends a GET request to the DeviceModelsController, to retrieve all device models from the database
    /// </summary>
    /// <returns></returns>
    private async Task<TableData<DeviceModelDto>> LoadDeviceModels(TableState state)
    {
        try
        {
            IsLoading = true;

            string orderBy = default!;

            switch (state.SortDirection)
            {
                case SortDirection.Ascending:
                    orderBy = $"{state.SortLabel} asc";
                    break;
                case SortDirection.Descending:
                    orderBy = $"{state.SortLabel} desc";
                    break;
            }

            var result = await DeviceModelsClientService.GetDeviceModels(new DeviceModelFilter
                {
                    SearchText = this.deviceModelSearchInfo.SearchText!,
                    PageNumber = state.Page,
                    PageSize = state.PageSize,
                    OrderBy = new string[] { orderBy }
                });

            return new TableData<DeviceModelDto>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
            return new TableData<DeviceModelDto>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task DeleteDeviceModel(DeviceModelDto deviceModel)
    {
        var parameters = new DialogParameters();
        parameters.Add("deviceModelID", deviceModel.ModelId);
        parameters.Add("deviceModelName", deviceModel.Name);
        var result = await dialogService.Show<DeleteDeviceModelPage>("Confirm Deletion", parameters).Result;

        if (result.Canceled)
        {
            return;
        }

        // Update the list of devices after the deletion
        // await LoadDeviceModels();
        await Search();
    }

    private void GoToDetails(DeviceModelDto item)
    {
        navigationManager.NavigateTo($"/device-models/{item.ModelId}{((item.SupportLoRaFeatures && Portal.IsLoRaSupported) ? "?isLora=true" : "")}");
    }

    private async Task Search(DeviceModelSearchInfo? deviceModelSearchInfo = null)
    {
        if (deviceModelSearchInfo == null)
        {
            this.deviceModelSearchInfo = new();
        }
        else
        {
            this.deviceModelSearchInfo = deviceModelSearchInfo;
        }

        await table.ReloadServerData();
    }

    private async void Refresh()
    {
        await table.ReloadServerData();
    }
}
