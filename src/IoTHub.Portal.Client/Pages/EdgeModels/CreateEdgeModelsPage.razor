@page "/edge/models/new"

@using IoTHub.Portal.Client.Dialogs.EdgeModels.EdgeModule
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Shared.Models.v10
@using IoTHub.Portal.Client.Validators
@using IoTHub.Portal.Shared.Constants

@attribute [Authorize]
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEdgeModelClientService EdgeModelService
@inject PortalSettings Portal

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Edge Device Model</MudText>

<MudForm Model="@_model" @ref="_form" id="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar>
                            <MudImage Src="@_imageData" />
                        </MudAvatar>
                    </div>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    @if (_imageData != null && _imageData != DeviceModelImageOptions.DefaultImage)
                    {
                        <MudButton OnClick="DeleteAvatar" id="deleteAvatarBtn" Color="Color.Error">Delete Picture</MudButton>
                    }
                    else
                    {
                        <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                        <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Change Picture</MudButton>
                    }
                </MudCardActions>
            </MudCard>
            <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="_isProcessing" OnClick="@(async () => await Save())" id="SaveButton">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content" id="tabs">
                <MudTabPanel Text="General">
                    <MudExpansionPanels MultiExpansion="true" id="general">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudTextField id="@nameof(_model.Name)" @bind-Value="@_model.Name" For="@(() => _model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField id="@nameof(_model.Description)" @bind-Value="@_model.Description" For="@(() => _model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                                            </MudItem>

                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                        @if (Portal.CloudProvider.Equals(CloudProviders.Azure))
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="System Modules" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">System Modules</MudText></TitleContent>
                                        <ChildContent>
                                            <MudItem xs="12">
                                                <MudTable Items="_model.SystemModules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                    <ColGroup>
                                                        <col style="width: 15%;" />
                                                        <col style="width: 50%;" />
                                                        <col style="width: 10%;" />
                                                    </ColGroup>

                                                    <HeaderContent>
                                                        <MudTh Style="text-align: center">Module name</MudTh>
                                                        <MudTh Style="text-align: center">Image URI</MudTh>
                                                        <MudTh Style="text-align: center">Detail</MudTh>
                                                    </HeaderContent>

                                                    <RowTemplate Context="sysModule">
                                                        <MudTd DataLabel="System module Name" Style="word-break: break-all;">
                                                            <MudTextField id=@nameof(EdgeModelSystemModule.Name) @bind-Value="@sysModule.Name" Margin="Margin.Dense" Label="Module name" For="@(() => sysModule.Name )" Variant="Variant.Outlined" Disabled />
                                                        </MudTd>
                                                        <MudTd DataLabel="System module Image URI" Style="word-break: break-all;">
                                                            <MudTextField id=@($"{nameof(EdgeModelSystemModule.Name)}-image") @bind-Value="@sysModule.Image" Margin="Margin.Dense" Label="Image" For="@(() => sysModule.Image )" Variant="Variant.Outlined" />
                                                        </MudTd>
                                                        <MudTd DataLabel="See detail" Style="text-align: center;">
                                                            <MudButton Variant="Variant.Filled" id="@("editSystModuleButton_"+sysModule.Name)" OnClick="@(async () => await ShowSystemModuleDetail(sysModule))">Detail</MudButton>
                                                        </MudTd>
                                                    </RowTemplate>
                                                </MudTable>
                                            </MudItem>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Modules" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">Modules</MudText></TitleContent>
                                        <ChildContent>
                                            <MudItem xs="12">
                                                <MudTable Items="@EdgeModules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                    <ColGroup>
                                                        <col style="width: 30%;" />
                                                        <col style="width: 40%;" />
                                                        <col style="width: 10%;" />
                                                        <col style="width: 5%;" />
                                                    </ColGroup>
                                                    <HeaderContent>
                                                        <MudTh Style="text-align: center">Module name</MudTh>
                                                        <MudTh Style="text-align: center">Image URI</MudTh>
                                                        <MudTh Style="text-align: center">See detail</MudTh>
                                                        <MudTh Style="text-align: center">Delete</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="moduleContext">
                                                        <MudTd DataLabel="module Name" Style="word-break: break-all;">
                                                            <MudTextField id="@(nameof(IoTEdgeModule.ModuleName))" @bind-Value="@moduleContext.ModuleName" Margin="Margin.Dense" Label="Module name" For="@(() => moduleContext.ModuleName )" Variant="Variant.Outlined" Required="true"></MudTextField>
                                                        </MudTd>
                                                        <MudTd DataLabel="module Image URI" Style="word-break: break-all;">
                                                            <MudTextField id="@(nameof(IoTEdgeModule.Image))" @bind-Value="@moduleContext.Image" Margin="Margin.Dense" Label="Image" For="@(() => moduleContext.Image )" Variant="Variant.Outlined" Required="true" />
                                                        </MudTd>
                                                        <MudTd DataLabel="See detail" Style="text-align: center;">
                                                            <MudButton Variant="Variant.Filled" id="editButton" OnClick="@(async () => await ShowAddEdgeModuleDialog(moduleContext))">Detail</MudButton>
                                                        </MudTd>
                                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                                            <MudIconButton Class="deleteModuleButton" Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteModule(moduleContext))"></MudIconButton>
                                                        </MudTd>
                                                    </RowTemplate>
                                                    <FooterContent>
                                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" id="addModuleButton" OnClick="AddModule">Add new module</MudButton>
                                                    </FooterContent>
                                                </MudTable>
                                            </MudItem>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Routes" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">Routes</MudText></TitleContent>
                                        <ChildContent>
                                            <MudItem xs="12">
                                                <MudTable Items="@_model.EdgeRoutes" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                    <ColGroup>
                                                        <col style="width: 20%;" />
                                                        <col style="width: 20%;" />
                                                        <col style="width: 10%;" />
                                                        <col style="width: 10%;" />
                                                        <col style="width: 5%;" />
                                                    </ColGroup>
                                                    <HeaderContent>
                                                        <MudTh Style="text-align: center">Name</MudTh>
                                                        <MudTh Style="text-align: center">Value</MudTh>
                                                        <MudTh Style="text-align: center">Priority</MudTh>
                                                        <MudTh Style="text-align: center">Time To Live (Secs)</MudTh>
                                                        <MudTh Style="text-align: center">Delete</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="RouteContext">
                                                        <MudTd DataLabel="Name" Style="word-break: break-all;">
                                                            <MudTextField id="@(nameof(IoTEdgeRoute.Name))" @bind-Value="@RouteContext.Name" Margin="Margin.Dense" Label="Name" For="@(() => RouteContext.Name )" Variant="Variant.Outlined" Required="true"></MudTextField>
                                                        </MudTd>
                                                        <MudTd DataLabel="Value" Style="word-break: break-all;">
                                                            <MudTextField id="@(nameof(IoTEdgeRoute.Value))" @bind-Value="@RouteContext.Value" Margin="Margin.Dense" Label="Value" For="@(() => RouteContext.Value )" Variant="Variant.Outlined" Required="true" />
                                                        </MudTd>
                                                        <MudTd DataLabel="Priority" Style="text-align: center;">
                                                            <MudNumericField @bind-Value="@RouteContext.Priority" Label="Priority" For="@(() => RouteContext.Priority)" Variant="Variant.Outlined"></MudNumericField>
                                                        </MudTd>
                                                        <MudTd DataLabel="Time To Live (Secs)" Style="text-align: center;">
                                                            <MudNumericField @bind-Value="@RouteContext.TimeToLive" Label="TTL" For="@(() => RouteContext.TimeToLive)" Variant="Variant.Outlined"></MudNumericField>
                                                        </MudTd>
                                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                                            <MudIconButton Color="Color.Default" Class="deleteRouteButton" OnClick="( () => DeleteRoute(RouteContext))" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium"></MudIconButton>
                                                        </MudTd>
                                                    </RowTemplate>
                                                    <FooterContent>
                                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" id="addRouteButton" OnClick="AddRoute" Color="Color.Success">Add new route</MudButton>
                                                    </FooterContent>
                                                </MudTable>
                                            </MudItem>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }
                        @if (Portal.CloudProvider.Equals(CloudProviders.AWS))
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Modules" IsInitiallyExpanded="true">
                                        <TitleContent><MudText Typo="Typo.h6">Modules</MudText></TitleContent>
                                        <ChildContent>
                                            <MudItem xs="12">
                                                <MudTable Items="@EdgeModules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                    <ColGroup>
                                                        <col style="width: 70%;" />
                                                        <col style="width: 10%;" />
                                                        <col style="width: 5%;" />
                                                    </ColGroup>
                                                    <HeaderContent>
                                                        <MudTh Style="text-align: center">Module name</MudTh>
                                                        <MudTh Style="text-align: center">See detail</MudTh>
                                                        <MudTh Style="text-align: center">Delete</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="moduleContext">
                                                        <MudTd DataLabel="module Name" Style="word-break: break-all;">
                                                            @moduleContext.ModuleName
                                                        </MudTd>
                                                        <MudTd DataLabel="See detail" Style="text-align: center;">
                                                            <MudButton Variant="Variant.Filled" id="edit-edge-module" Disabled="@(!string.IsNullOrEmpty(moduleContext.Id))" OnClick="@(async () => await ShowAddEdgeModuleDialog(moduleContext))">Detail</MudButton>
                                                        </MudTd>
                                                        <MudTd DataLabel="Delete" Style="text-align: center">
                                                            <MudIconButton Class="deleteModuleButton" Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteModule(moduleContext))"></MudIconButton>
                                                        </MudTd>
                                                    </RowTemplate>
                                                    <FooterContent>
                                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" id="add-edge-module" OnClick="ShowAddNewEdgeModuleDialog">Add new module</MudButton>
                                                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" id="add-public-edge-modules" OnClick="ShowAddEdgePublicModulesDialog">Add public modules</MudButton>
                                                    </FooterContent>
                                                </MudTable>
                                            </MudItem>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Labels">
                                    <TitleContent><MudText Typo="Typo.h6">Labels</MudText></TitleContent>
                                    <ChildContent>
                                        <LabelsEditor Labels="_model.Labels" />
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                    </MudExpansionPanels>
                </MudTabPanel>

            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private List<IoTEdgeModule> EdgeModules { get; } = new();
    private readonly EdgeModelValidator _edgeModelValidator = new();
    private readonly IoTEdgeModuleValidator _edgeModuleValidator = new();
    private readonly IoTEdgeRouteValidator _edgeRouteValidator = new();

    private MudForm _form = default!;
    private bool _isProcessing;

    private readonly IoTEdgeModel _model = new()
    {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private string? _imageData = DeviceModelImageOptions.DefaultImage;

    private void DeleteAvatar()
    {
        _imageData = DeviceModelImageOptions.DefaultImage;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var file = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);
        _imageData = await file.ToBase64(e.File.ContentType);
    }

    private void AddModule()
    {
        EdgeModules.Add(new IoTEdgeModule());
    }

    private async Task ShowAddEdgePublicModulesDialog()
    {
        var parameters = new DialogParameters { { "EdgeModules", EdgeModules } };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        await (await DialogService.ShowAsync<AwsGreengrassPublicComponentsDialog>(string.Empty, parameters, options)).Result;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ShowAddEdgeModuleDialog(IoTEdgeModule module)
    {
        var parameters = new DialogParameters();

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        if (Portal.CloudProvider.Equals(CloudProviders.Azure))
        {
            if (!string.IsNullOrWhiteSpace(module.ModuleName))
            {

                parameters.Add("module", module);
                await (await DialogService.ShowAsync<ModuleDialog>(module.ModuleName, parameters, options)).Result;
            }
        }
        else
        {
            parameters.Add("Context", Context.Edit);
            parameters.Add("Module", module);

            await (await DialogService.ShowAsync<AwsGreengrassComponentDialog>(module.ModuleName, parameters, options)).Result;
        }
    }

    private async Task ShowAddNewEdgeModuleDialog()
    {
        var parameters = new DialogParameters();

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        parameters.Add("Context", Context.Create);
        parameters.Add("EdgeModules", EdgeModules);

        await (await DialogService.ShowAsync<AwsGreengrassComponentDialog>(string.Empty, parameters, options)).Result;
    }

    private async Task ShowSystemModuleDetail(EdgeModelSystemModule systemModule)
    {
        var parameters = new DialogParameters { { "module", systemModule } };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        _ = await (await DialogService.ShowAsync<SystemModuleDialog>(systemModule.Name, parameters, options)).Result;
    }

    private async Task Save()
    {
        _isProcessing = true;

        // Displays validation error message for each field
        await _form.Validate();

        if (!(await _edgeModelValidator.ValidateAsync(_model)).IsValid)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            _isProcessing = false;

            return;
        }

        if (EdgeModules.Any() && !(await _edgeModuleValidator.ValidateAsync(EdgeModules)).IsValid)
        {
            Snackbar.Add("One or more validation errors occurred with the module.", Severity.Error);

            _isProcessing = false;

            return;
        }

        if (_model.EdgeRoutes.Any() && !(await _edgeRouteValidator.ValidateAsync(_model.EdgeRoutes)).IsValid)
        {

            Snackbar.Add("One or more validation errors occured with the routes.", Severity.Error);

            _isProcessing = false;

            return;
        }

        try
        {
            _model.EdgeModules = EdgeModules;

            await EdgeModelService.CreateIoTEdgeModel(_model);

            if (_imageData is not null)
            {
                var imageContent = new StringContent(_imageData);
                await EdgeModelService.ChangeAvatar(_model.ModelId, imageContent);
            }

            Snackbar.Add("Device model successfully created.", Severity.Success);
            NavigationManager.NavigateTo("/edge/models");
        }
        catch (ProblemDetailsException exception)
        {
            Error.ProcessProblemDetails(exception);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void DeleteModule(IoTEdgeModule module)
    {
        EdgeModules.Remove(module);
    }

    private void DeleteRoute(IoTEdgeRoute route)
    {
        _model.EdgeRoutes.Remove(route);
    }

    private void AddRoute()
    {
        var last = _model.EdgeRoutes.LastOrDefault();

        if (_model.EdgeRoutes.Count == 0 || (last?.Name is not null && last.Value is not null))
        {
            _model.EdgeRoutes.Add(new IoTEdgeRoute());
        }
    }
}
