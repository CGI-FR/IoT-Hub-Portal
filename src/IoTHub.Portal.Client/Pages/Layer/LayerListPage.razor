@page "/layer"

@using IoTHub.Portal.Client.Dialogs.EdgeModels.EdgeModule
@using IoTHub.Portal.Models
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Shared.Models.v10
@using IoTHub.Portal.Client.Validators
@using System.Net.Http.Headers
@using IoTHub.Portal.Shared.Constants
@using IoTHub.Portal.Client.Models
@using IoTHub.Portal.Client.Dialogs.Devices

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject PortalSettings Portal

@inject ILayerClientService LayerClientService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">
    Layer
</MudText>
<MudGrid>
    <MudItem xs="12">
        <MudTreeView Items="@Layers" Hover="true" Width="100%" ExpandOnClick="true">
            <ItemTemplate Context="item">
                <MudTreeViewItem Items="@item.Children" @bind-Expanded="@item.IsExpanded">
                    <BodyContent>
                        <div id="editLayerElement" style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%" @onmouseover="() => printDetails = item.LayerData.Id">
                            <div style="width: 75%">
                                @if (editItem != null && editItem.Id == item.LayerData.Id)
                                {
                                    <MudTextField @bind-Value="@item.LayerData.Name" For="@(() => item.LayerData.Name)" />
                                }
                                else
                                {
                                    <MudText>@item.LayerData.Name</MudText>
                                }
                            </div>
                            <div style="justify-self: end;">
                                @if (printDetails == item.LayerData.Id)
                                {
                                    <MudIconButton id="editLayerEditLayer" Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" @onclick="() => EditLayer(item.LayerData)" />
                                    <MudIconButton id="editLayerDeleteLayer" Icon="@(item.LayerData.Father != "Init" ? Icons.Material.Filled.Delete : @Icons.Material.Outlined.Delete)" Size="Size.Medium" Color="Color.Inherit" @onclick="() => DeleteLayer(item, Layers)" />
                                    <MudIconButton id="editLayerAddLayer" Icon="@Icons.Material.Filled.AddBox" Size="Size.Medium" Color="Color.Inherit" @onclick="() => AddLayer(item)" />
                                }
                                <MudIconButton id="editLayerDevice" Icon="@Icons.Material.TwoTone.Memory" Size="Size.Medium" Color="Color.Inherit" @onclick="() => OpenDevices(item.LayerData)" />
                            </div>
                        </div>
                    </BodyContent>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    public HashSet<LayerHash> Layers { get; set; } = new HashSet<LayerHash> { };

    public string printDetails { get; set; } = "Init";
    public LayerDto? editItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        List<LayerDto> listLayers = await LayerClientService.GetLayers();
        OrderLayers(listLayers);
    }

    private void OrderLayers(List<LayerDto> layers)
    {
        if (layers.Count() == 0) return;

        LayerDto firstLayer = layers[0];
        bool isAdd = false;

        if (firstLayer.Father == "Init")
        {
            Layers.Add(new LayerHash(firstLayer, 0, false));
            isAdd = true;
        }
        // Look for the layer's father within Layer
        else isAdd = addSubLayer(Layers, firstLayer);

        // If the layer hasn't been added, place it at the end of the list to wait for its father to be added to "Layers"
        layers.RemoveAt(0);
        if (!isAdd) layers.Add(firstLayer);

        OrderLayers(layers);
    }

    private bool addSubLayer(HashSet<LayerHash> fatherLayer, LayerDto layer)
    {
        foreach (LayerHash father in fatherLayer)
        {
            if (father.LayerData.Id == layer.Father)
            {
                father.Children.Add(new LayerHash(layer, father.Level + 1, false));

                // If father has been found, return true
                return true;
            }
            else
            {
                // Look for the layer's father within Layer
                bool isAdd = addSubLayer(father.Children, layer);

                // If father has been found, return true
                if (isAdd) return true;
            }
        }
        return false;
    }

    public async Task AddLayer(LayerHash layer)
    {
        try
        {
            LayerDto newLayer = new LayerDto
                {
                    Name = "New Layer",
                    Father = layer.LayerData.Id,
                    Planning = "None"
                };
            newLayer.Id = await LayerClientService.CreateLayer(newLayer);

            layer.Children.Add(new LayerHash(newLayer, layer.Level + 1, false));
            layer.IsExpanded = true;
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public async Task EditLayer(LayerDto layer)
    {
        try
        {
            if (editItem != null) await LayerClientService.UpdateLayer(editItem);
            editItem = layer;
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public async Task DeleteLayer(LayerHash delLayer, HashSet<LayerHash> fatherLayers)
    {
        foreach (LayerHash layer in fatherLayers)
        {
            if (layer.Children.Contains(delLayer))
            {
                await RemoveChild(delLayer);
                layer.Children.Remove(delLayer);
                StateHasChanged();
            }
            else
            {
                await DeleteLayer(delLayer, layer.Children);
            }
        }
    }

    public async Task RemoveChild(LayerHash delLayer)
    {
        if (delLayer.Children.Count() != 0)
            foreach (LayerHash layer in delLayer.Children) await RemoveChild(layer);
        try
        {
            await LayerClientService.DeleteLayer(delLayer.LayerData.Id);
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public async void OpenDevices(LayerDto layer)
    {
        var parameter = new DialogParameters { { "Layer", layer } };

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true, CloseButton = true };

        var result = await DialogService.Show<LinkDeviceLayerDialog>("Select your " + layer.Name + " devices", parameter, options).Result;
    }
}
