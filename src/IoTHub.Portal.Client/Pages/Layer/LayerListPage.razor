@page "/layer"

@using System.Web
@using System.IO
@using System.Text.RegularExpressions
@using System.Net.Http.Headers

@using Microsoft.AspNetCore.WebUtilities

@using IoTHub.Portal
@using IoTHub.Portal.Models
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Models.v10.LoRaWAN
@using IoTHub.Portal.Shared.Models
@using IoTHub.Portal.Shared.Constants;
@using IoTHub.Portal.Shared.Models.v10;
@using IoTHub.Portal.Shared.Models.v10.Filters
@using IoTHub.Portal.Client.Enums
@using IoTHub.Portal.Client.Validators
@using IoTHub.Portal.Client.Pages.Devices
@using IoTHub.Portal.Client.Dialogs.Devices
@using IoTHub.Portal.Client.Dialogs.Building

@attribute [Authorize]

@inject NavigationManager navigationManager
@inject PortalSettings Portal
@inject ILayerClientService LayerClientService
@inject IPlanningClientService PlanningClientService
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12">
        <MudItem xs="12">
            <MudTable T="LayerDto" Items="@MainLayers" Loading="IsLoading" Dense=true OnRowClick="@((e) => GoToDetails(e.Item))" Hover=true Bordered=true Striped=true RowStyle="cursor: pointer;">
                <ColGroup>
                    <col style="width: 50%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                    <col style="width: 10%;" />
                </ColGroup>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Layers</MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh list">
                        <MudIconButton id="layerListDetailRefresh" Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="@GetLayers" Class="ma-2"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Add new Layer">
                        <MudFab id="layerListAddLayer" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" OnClick="@AddLayer" Size="Size.Medium"/>
                    </MudTooltip>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<LayerDto, object>(x => x.Name)" id="NameLabel">Name</MudTableSortLabel></MudTh>
                    <MudTh>SubLayers</MudTh>
                    <MudTh>Planning</MudTh>
                    <MudTh>Detail</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudItem>
                            <MudText Typo="Typo.body1" Inline="true">
                                @context.Name
                            </MudText>
                        </MudItem>
                    </MudTd>
                    <MudTh>@SubLayers[@context.Name]</MudTh>
                    <MudTd DataLabel="Planning" Style="word-break: break-all; ">
                        @(plannings.FirstOrDefault(item => item.Id == context.Planning)!= null ? plannings.FirstOrDefault(item => item.Id == context.Planning).Name : "None")
                    </MudTd>
                    <MudTd DataLabel="Details" Style="text-align: center">
                        <MudIconButton id="layerListDetailDetail" Icon="@Icons.Material.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
                </PagerContent>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
            </MudTable>
        </MudItem>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    public HashSet<LayerHash> Layers { get; } = new HashSet<LayerHash> { };

    public List<LayerDto> MainLayers = new List<LayerDto>();
    public Dictionary<string, int> SubLayers = new Dictionary<string, int>();
    public List<PlanningDto> plannings = new List<PlanningDto>();

    public bool IsLoading { get; set; } = true;
    public readonly int[] pageSizeOptions = { 10, 5, 3 };

    protected override async Task OnInitializedAsync()
    {
        await GetLayers();
        plannings = await PlanningClientService.GetPlannings();
    }

    private async Task GetLayers()
    {
        try
        {
            IsLoading = true;
            SubLayers.Clear();
            List<LayerDto> listLayers = await LayerClientService.GetLayers();
            OrderLayers(listLayers);

            for (var i = 0; i < Layers.Count; i++)
            {
                MainLayers.Add(Layers.ElementAt(i).LayerData);
                CountLayer(Layers.ElementAt(i).LayerData.Name, Layers.ElementAt(i).Children);
            }

        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OrderLayers(List<LayerDto> layers)
    {
        if (layers.Count() == 0) return;

        LayerDto firstLayer = layers[0];
        bool isAdd = false;

        if (firstLayer.Father == "Init")
        {
            Layers.Add(new LayerHash(firstLayer, 0, true));
            isAdd = true;
        }
        // Look for the layer's father within Layer
        else isAdd = addSubLayer(Layers, firstLayer);

        // If the layer hasn't been added, place it at the end of the list to wait for its father to be added to "Layers"
        layers.RemoveAt(0);
        if (!isAdd) layers.Add(firstLayer);

        OrderLayers(layers);
    }

    private bool addSubLayer(HashSet<LayerHash> fatherLayer, LayerDto layer)
    {
        foreach (LayerHash father in fatherLayer)
        {
            if (father.LayerData.Id == layer.Father)
            {
                father.Children.Add(new LayerHash(layer, father.Level + 1, true));

                // If father has been found, return true
                return true;
            }
            else
            {
                // Look for the layer's father within Layer
                bool isAdd = addSubLayer(father.Children, layer);

                // If father has been found, return true
                if (isAdd) return true;
            }
        }
        return false;
    }

    private void CountLayer(string mainLayerName, HashSet<LayerHash> layerList)
    {
        if (!SubLayers.ContainsKey(mainLayerName)) SubLayers.Add(mainLayerName, 0);

        SubLayers[mainLayerName] += 1;
        foreach (var layer in layerList) CountLayer(mainLayerName, layer.Children);
    }

    private void GoToDetails(LayerDto item)
    {
        navigationManager.NavigateTo($"/layer/{item.Id}");
    }

    private void AddLayer()
    {
        navigationManager.NavigateTo($"/layer/new");
    }
}
