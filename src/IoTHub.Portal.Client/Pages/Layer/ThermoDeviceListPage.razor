@page "/thermo/devices"
@using IoTHub.Portal
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Shared.Models.v10;
@using IoTHub.Portal.Client.Dialogs.Devices
@using System.Web
@using System.IO
@using System.Text.RegularExpressions
@using System.Net.Http.Headers
@using IoTHub.Portal.Shared.Models.v10.Filters;

@attribute [Authorize]

@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject PortalSettings Portal
@inject ISnackbar Snackbar
@inject IDeviceTagSettingsClientService DeviceTagSettingsClientService
@inject IDeviceClientService DeviceClientService
@inject IJSRuntime JS
@inject IDeviceModelsClientService DeviceModelsClientService
@inject ILoRaWanDeviceModelsClientService LoRaWanDeviceModelsClientService

<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Search panel">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchID" Placeholder="DeviceID / DeviceName" id="searchID"></MudTextField>
                    </MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save" id="SaveButton">Save Changes</MudButton>
                    @foreach (DeviceTagDto tag in TagList)
                    {
                        if (tag.Searchable)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="searchTags[tag.Name]" Placeholder="@tag.Label"></MudTextField>
                            </MudItem>
                        }
                    }

                    <MudItem xs="12" md="6">
                        <MudSelect T="LabelDto" Label="Labels" MultiSelection="true" @bind-SelectedValues="selectedLabels"
                                   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                                   Variant="Variant.Outlined">
                            @foreach (var label in labels)
                            {
                                <MudSelectItem T="LabelDto" Value="@label">
                                    <MudChip Text="@label.Name" Color="Color.Primary" Style="@($"background-color: {label.Color};")" />
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="DeviceModelDto"
                                         id="@nameof(DeviceModelDto.ModelId)"
                        @bind-Value="Model"
                                         SearchFunc="@Search"
                                         Label="Model"
                                         Dense=true
                                         For=@(() => this.Model)
                                         Variant="Variant.Outlined"
                                         ToStringFunc="@(x => x?.Name)"
                                         ResetValueOnEmptyText=true
                                         Immediate=true
                                         Clearable=true
                                         CoerceText=true
                                         CoerceValue=false>
                            <ItemTemplate>
                                @context.Name
                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">
                                    @((!string.IsNullOrEmpty(@context.Description) && @context.Description.Length > 100) ? @context.Description.Substring(0, 100) + "..." : @context.Description)
                                </MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudGrid>
                        <MudItem sm="12" md="6">
                            <MudText>Status</MudText>
                            <MudRadioGroup @bind-SelectedOption="@searchStatus" Style="display:flex;align-items:baseline" id="searchStatus">
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("true") Color="Color.Primary" id="searchStatusEnabled">Enabled</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("false") Color="Color.Primary" id="searchDisabled">Disabled</MudRadio>
                                </MudItem>
                                <MudItem md="4" sm="12">
                                    <MudRadio Option=@("") Color="Color.Secondary" id="searchStatusAll">All</MudRadio>
                                </MudItem>
                            </MudRadioGroup>

                        </MudItem>
                    </MudGrid>

                    <MudItem xs="12">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" Style="margin:0.5em;" id="searchButton" OnClick=Search>Search</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Style="margin:0.5em;" OnClick="Reset" id="resetSearch">Reset</MudButton>
                    </MudItem>

                </MudGrid>

            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
    <MudItem xs="12">
        <MudTable T="DeviceListItem" ServerData=@LoadItems Dense=true Hover=true Bordered=true Striped=true @ref="table" Loading="@IsLoading" OnRowClick="@((e) => GoToDetails(e.Item))" RowStyle="cursor: pointer;">
            <ColGroup>
                <col style="width: 5%;" />
                <col style="width: 40%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
                <col style="width: 15%;" />
                @if (Portal.IsLoRaSupported)
                {
                    <col style="width: 10%;" />
                }
                <col style="width: 10%;" />
                <col style="width: 10%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Devices</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="@Refresh" Size="Size.Medium" id="tableRefreshButton" Class="ma-1"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Add device">
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="AddDevice" id="addDeviceButton" Class="ma-1" />
                </MudTooltip>

                <MudButton id="manageDevicesButtonToggle" Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpen">
                    Manage devices
                    <MudPopover Open="@menuIsOpen" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopRight">
                        <MudItem>
                            <MudButton id="exportDevicesButton" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Download" OnClick="ExportDeviceList">Export device list</MudButton>
                        </MudItem>
                        <MudItem>
                            <MudButton id="exportTemplateButton" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportTemplateFile">Download template file</MudButton>
                        </MudItem>
                        <MudItem>
                            <MudFileUpload T="IBrowserFile" FilesChanged="ImportDeviceList">
                                <ButtonTemplate>
                                    <MudButton id="importDevicesButton" Variant="Variant.Text"
                                               HtmlTag="label"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Outlined.Upload"
                                               for="@context">
                                        Import device list
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        </MudItem>
                    </MudPopover>
                </MudButton>

            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel id="sortDeviceId" SortLabel="Id" T="DeviceListItem">Device</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="IsConnected" T="DeviceListItem">Connection state</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center">See details</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align: center">
                    <img height="25" src="@context.ImageUrl" />
                </MudTd>
                <MudTd DataLabel="Device">
                    <MudItem>
                        <MudText Typo="Typo.body1" Inline="true">@context.DeviceName</MudText>
                        <MudText Class="pl-2" Typo="Typo.caption" Style="@($"color:{Theme.CurrentTheme.Palette.GrayLight};")" Inline="true">@context.DeviceID</MudText>
                    </MudItem>
                    <MudItem>
                        <Labels Items="@context.Labels" SearchedLabels="@labels" />
                    </MudItem>
                </MudTd>

                <MudTd DataLabel="Connection" Style="text-align: center">
                    @if (context.IsConnected)
                    {
                        <MudTooltip Text="Device is connected">
                            <MudIcon Icon="@Icons.Material.Filled.Wifi" Color="Color.Success" />
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Device is not connected">
                            <MudIcon Icon="@Icons.Material.Filled.WifiOff" Color="Color.Error" />
                        </MudTooltip>
                    }
                </MudTd>

                <MudTd DataLabel="Details" Style="text-align: center">
                    <MudTooltip Text="See device details">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                    </MudTooltip>
                </MudTd>

            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager HideRowsPerPage=true />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error? Error { get; set; }

    private string? searchID = "";
    private string? searchStatus;
    private string? searchState;

    private MudTable<DeviceListItem>? table;
    private Dictionary<string, string> searchTags = new();

    private bool IsLoading { get; set; } = true;

    private DeviceModelDto Model { get; set; } = default!;

    private IEnumerable<DeviceTagDto> TagList { get; set; } = new List<DeviceTagDto>();

    private IEnumerable<LabelDto> labels = new List<LabelDto>();
    private IEnumerable<LabelDto> selectedLabels = new List<LabelDto>();

    private int[] pageSizeOptions = new int[] { 2, 5, 10 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Gets the custom tags that can be searched via the panel
            TagList = await DeviceTagSettingsClientService.GetDeviceTags();
            foreach (var tag in TagList)
            {
                if (tag.Searchable)
                    searchTags.Add(tag.Name, "");
            }
            labels = await DeviceClientService.GetAvailableLabels();
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    private async Task<TableData<DeviceListItem>> LoadItems(TableState state)
    {
        try
        {
            string? orderBy = null;

            switch (state.SortDirection)
            {
                case SortDirection.Ascending:
                    orderBy = $"{state.SortLabel} asc";
                    break;
                case SortDirection.Descending:
                    orderBy = $"{state.SortLabel} desc";
                    break;
            }

            var uri = $"api/devices?pageNumber={state.Page}&pageSize={state.PageSize}&searchText={HttpUtility.UrlEncode(searchID)}&searchStatus={searchStatus}&searchState={searchState}&orderBy={orderBy}&modelId={this.Model?.ModelId}";

            foreach (var searchTag in searchTags.Where(c => !string.IsNullOrEmpty(c.Value)))
            {
                uri += $"&tag.{searchTag.Key}={searchTag.Value}";
            }

            foreach (var label in selectedLabels)
            {
                uri += $"&labels={label.Name}";
            }

            var result = await DeviceClientService.GetDevices(uri);

            return new TableData<DeviceListItem>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);

            return new TableData<DeviceListItem>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void AddDevice()
    {
        navigationManager.NavigateTo("devices/new");
    }

    /// <summary>
    /// Reset all the fields in the search panel
    /// </summary>
    /// <returns></returns>
    private void Reset()
    {
        searchID = "";
        searchStatus = "";
        searchState = "";
        searchTags = searchTags.ToDictionary(tag => tag.Key, tag => "");
        selectedLabels = new List<LabelDto>();

        Search();
    }

    private void Search()
    {
        table?.ReloadServerData();
    }

    private void Refresh()
    {
        table?.ReloadServerData();
    }

    private void GoToDetails(DeviceListItem item)
    {
        navigationManager.NavigateTo($"devices/{item.DeviceID}{((item.SupportLoRaFeatures && Portal.IsLoRaSupported) ? "?isLora=true" : "")}");
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    public async Task<IEnumerable<DeviceModelDto>> Search(string value)
    {
        var filter = new DeviceModelFilter
            {
                SearchText = value,
                PageNumber = 0,
                PageSize = 10,
                OrderBy = new string[]
                    {
                string.Empty
                    }
            };
        return (await DeviceModelsClientService.GetDeviceModels(filter)).Items.ToList();
    }

    private async Task ExportDeviceList()
    {
        menuIsOpen = false;

        var export = await this.DeviceClientService.ExportDeviceList();
        var fileName = export?.Headers?.ContentDisposition?.Parameters.Single(c => c.Name == "filename").Value;

        using var streamRef = new DotNetStreamReference(stream: await (export?.ReadAsStreamAsync())!);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task ExportTemplateFile()
    {
        menuIsOpen = false;

        var export = await this.DeviceClientService.ExportTemplateFile();
        var fileName = export?.Headers?.ContentDisposition?.Parameters.Single(c => c.Name == "filename").Value;

        using var streamRef = new DotNetStreamReference(stream: await (export?.ReadAsStreamAsync())!);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task ShowDeviceTelemetry(DeviceListItem device)
    {
        var parameters = new DialogParameters { { "DeviceID", device.DeviceID } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        await DialogService.Show<LoRaDeviceTelemetryDialog>(string.Empty, parameters, options).Result;
    }

    private async Task ImportDeviceList(IBrowserFile file)
    {
        menuIsOpen = false;

        var fileContent = new StreamContent(file.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        var content = new MultipartFormDataContent();
        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: file.Name);

        var parameters = new DialogParameters { { "Content", content } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
        await DialogService.Show<ImportReportDialog>("Import summary", parameters, options).Result;
    }

    public bool menuIsOpen;

    public void ToggleOpen()
    {
        menuIsOpen = !menuIsOpen;
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} label{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    private async Task Save()
    {
        //var Room = new RoomDto();
        try
        {
            //await LoRaWanDeviceModelsClientService.CreateRoom((Room as RoomDto)!);

            Snackbar.Add("Room successfully created.", Severity.Success);
        }

        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }
}
