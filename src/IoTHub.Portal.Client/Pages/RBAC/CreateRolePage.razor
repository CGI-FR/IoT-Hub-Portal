@page "/roles/new"

@using IoTHub.Portal.Client.Services
@using IoTHub.Portal.Shared.Models.v10
@using Microsoft.AspNetCore.Authorization
@using MudBlazor

@attribute [Authorize]
@inject IRoleClientService RoleClientService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create a Role :</MudText>
<MudForm Model="@Role" @ref="form">
    <MudGrid>
        <MudItem xs="12">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content">
                <MudTabPanel Text="General">
                    <MudExpansionPanels MultiExpansion="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Détails</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudAvatar Style="@($"background-color: {Role.Color}; color: white;")" Size="Size.Large" Class="mr-2">
                                                    @if (!string.IsNullOrEmpty(Role.Name))
                                                    {
                                                        @Role.Name[0].ToString().ToUpper()
                                                    }
                                                </MudAvatar>
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField T="string" Label="Name" @bind-Value="Role.Name" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField T="string" Label="Description" @bind-Value="Role.Description" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudColorPicker Label="Color" @bind-Text="Role.Color" Style="@($"color: {Role.Color};")" Placeholder="Select Color" />
                                            </MudItem>
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudSelect T="string" MultiSelection="true" SelectAll="true" SelectAllText="Select all roles" HelperText="@value" @bind-Value="value" @bind-SelectedValues="options" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Label="Roles" AdornmentIcon="@Icons.Material.Filled.Search">
                            @foreach (var action in actions)
                            {
                                <MudSelectItem T="string" Value="@action">@action</MudSelectItem>
                            }
                        </MudSelect>
                    </MudExpansionPanels>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
        <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
            <MudButtonRole Color="Color.Primary" Variant="Variant.Filled">
                <MudButton id="SaveButton" OnClick="Save" Disabled="isProcessing">@saveButtonText</MudButton>
            </MudButtonRole>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private RoleDetailsModel Role = new RoleDetailsModel();
    private MudForm form;
    private bool isProcessing = false;
    private string saveButtonText = "Save";

    private async Task Save()
    {
        isProcessing = true;
        try
        {
            await RoleClientService.CreateRole(Role);
            Snackbar.Add($"Role {Role.Name} has been successfully created !", Severity.Success);
            NavigationManager.NavigateTo("/role");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error while creating the role : {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }


    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { "CreateEdgeDevice" };

    private string[] actions =
    {
        "RemoveEdgeDevice", "CreateEdgeDevice", "CreateGroup", "EditRole", "RemoveUser", "CreateUser", "RemoveLora"
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} role{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }
}
