@page "/groupsList"

@using IoTHub.Portal.Shared.Models.v10
@using IoTHub.Portal.Shared.Models.v10.Filters;
@using Microsoft.AspNetCore.Authorization
@using IoTHub.Portal.Models.v10
@using IoTHub.Portal.Client.Dialogs.EdgeModels.EdgeModule
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@attribute [Authorize]
@inject IGroupsClientService GroupClientService
@inject IDialogService dialogService
@inject NavigationManager NavigationManager

<MudGrid>
    <MudItem xs="12">
        <EdgeModelSearch OnSearch=@Search />
    </MudItem>
    <MudItem xs="12">
        <MudTable T="GroupModel" Items="@GroupModelList" Loading="IsLoading" Dense=true OnRowClick="@((e) => GoToDetails(e.Item))" Hover=true Bordered=true Striped=true RowStyle="cursor: pointer;">
            <ColGroup>
                <col style="width: 5%;" />
                <col style="width: 30%;" />
                <col style="width: 30%;" />
                <col style="width: 5%;" />
                <col style="width: 5%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Groups</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" id="tableRefreshButton" OnClick="@LoadEdgeModels" Class="ma-2"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Add device model">
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" OnClick="@RedirectToCreatePage" Size="Size.Medium" id="addEdgeModelButton" />
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IoTEdgeModelListItem, object>(x => x.Name)" id="NameLabel">Name</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortBy="new Func<IoTEdgeModelListItem, object>(x => x.Description)" id="DescriptionLabel">Principal Id</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center">Details</MudTh>
                <MudTh Style="text-align: center">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align: center">
                    <img height="25" src="" />
                </MudTd>
                <MudTd DataLabel="Name">
                    <MudItem>
                        <MudText Typo="Typo.body1" Inline="true">
                            @context.Name
                        </MudText>
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Description" Style="word-break: break-all; ">
                    @context.PrincipalId
                </MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                    <MudTooltip Text="Go to the detail">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudTooltip Text="Delete device model">
                        <MudIconButton Color="Color.Default" Icon="@Icons.Material.Filled.Delete" OnClick="@(async () => await DeleteDeviceModel(context))" Size="Size.Medium" id="deleteButton"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="@pageSizeOptions"></MudTablePager>
            </PagerContent>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private List<GroupModel> GroupModelList = new List<GroupModel>();

    private bool IsLoading { get; set; } = true;
    private readonly int[] pageSizeOptions = { 3, 5, 10 };

    private string searchKeyword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEdgeModels();
    }

    private async Task LoadEdgeModels()
    {
        try
        {
            IsLoading = true;
            var query = await GroupClientService.GetGroups("api/groups");
            GroupModelList = query.Items.ToList();
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task Search(string searchKeyword)
    {
        this.searchKeyword = searchKeyword;

        await LoadEdgeModels();
    }

    public void RedirectToCreatePage()
    {
        NavigationManager.NavigateTo("/groups/new");
    }

    private async Task DeleteDeviceModel(GroupModel ioTEdgeModel)
    {
        @*var parameters = new DialogParameters();
        parameters.Add("deviceModelID", ioTEdgeModel.ModelId);
        parameters.Add("deviceModelName", ioTEdgeModel.Name);
        var result = await dialogService.Show<DeleteEdgeModelDialog>("Confirm Deletion", parameters).Result;

        if (result.Canceled)
        {
            return;
        }

        await this.LoadEdgeModels();*@
        throw new NotImplementedException();
    }

    private void GoToDetails(GroupModel item)
    {
        @*NavigationManager.NavigateTo($"/edge/models/{item.ModelId}");*@
        throw new NotImplementedException();
    }
}
