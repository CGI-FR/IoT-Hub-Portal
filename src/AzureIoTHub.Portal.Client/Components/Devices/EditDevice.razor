@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Shared.Models
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using AzureIoTHub.Portal.Shared.Models.v10.Filters;
@using Microsoft.AspNetCore.WebUtilities

@inject IDeviceModelsClientService DeviceModelsClientService
@inject ILoRaWanDeviceModelsClientService LoRaWanDeviceModelsClientService
@inject IDeviceTagSettingsClientService DeviceTagSettingsClientService
@inject IDeviceClientService DeviceClientService
@inject ILoRaWanDeviceClientService LoRaWanDeviceClientService
@inject IDeviceLayoutService DeviceLayoutService
@inject NavigationManager NavigationManager

@if (context.Equals(CreateEditMode.Create))
{
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content">
        <MudTabPanel Text="General" Style=@(this.CheckGeneralValidation() ? "color: red": "")>
            <MudExpansionPanels MultiExpansion="true">
                <MudGrid>
                    <MudItem xs="12">
                        <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                            <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                            <ChildContent>
                                <MudGrid>
                                    <MudItem xs="12" md="6">
                                        @if (duplicateDevice)
                                        {
                                            <DeviceToDuplicateSelector />
                                        }
                                        else
                                        {
                                            <MudAutocomplete T="IDeviceModel"
                                                             id="@nameof(DeviceDetails.ModelId)"
                                                     @bind-Value="DeviceModel"
                                                     SearchFunc="@Search"
                                                     Label="Model*"
                                                     Dense=true
                                                     For=@(() => this.DeviceModel)
                                                     Variant="Variant.Outlined"
                                                     ToStringFunc="@(x => x?.Name)"
                                                     ResetValueOnEmptyText=true
                                                     Immediate=true
                                                     Clearable=true
                                                     CoerceText=true
                                                     CoerceValue=false>
                                                <ItemTemplate>
                                                    @context.Name
                                                    <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">
                                                        @((!string.IsNullOrEmpty(@context.Description) && @context.Description.Length > 100) ? @context.Description.Substring(0, 100) + "..." : @context.Description)
                                                    </MudText>
                                                </ItemTemplate>
                                            </MudAutocomplete>
                                            @if (Device.ModelId == null && displayValidationErrorMessages)
                                            {
                                                <p class="validation-error-message">The Model is required.</p>
                                            }
                                        }
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        @if (IsLoRa)
                                        {
                                            <MudTextField @bind-Value="@Device.DeviceID"
                                                          id=@nameof(LoRaDeviceDetails.DeviceID)
                                                  Label="Device ID / DevEUI"
                                                  Variant="Variant.Outlined"
                                                  Validation=@(loraValidator.ValidateValue)
                                                  For="@(()=> Device.DeviceID)"
                                                  Mask="@maskLoRaDeviceID"
                                                  HelperText="Device EUI must contain 16 hexadecimal characters (numbers from 0 to 9 and/or letters from A to F)" />
                                        }
                                        else
                                        {
                                            <MudTextField @bind-Value="@Device.DeviceID"
                                                          id=@nameof(DeviceDetails.DeviceID)
                                                  Label="Device ID"
                                                  Variant="Variant.Outlined"
                                                  Validation=@(standardValidator.ValidateValue)
                                                  For="@(()=> Device.DeviceID)"
                                                  HelperText="The device identifier should be of ASCII 7-bit alphanumeric characters plus certain special characters" />
                                        }
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudSwitch @bind-Checked="@duplicateDevice" Label="Or select a device to copy" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="@Device.DeviceName"
                                                      id="@nameof(DeviceDetails.DeviceName)"
                                                  Label="Device name"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceName)"
                                                  Required="true" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudText>
                                            <b>Status</b>
                                        </MudText>
                                        <MudRadioGroup @bind-SelectedOption="@Device.IsEnabled">
                                            <MudRadio Option=@(true) Color="Color.Primary">
                                                Enabled
                                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>can</b> connect to the platform.</MudText>
                                            </MudRadio>
                                            <MudRadio Option=@(false) Color="Color.Primary">
                                                Disabled
                                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>cannot</b> connect to the platform.</MudText>
                                            </MudRadio>
                                        </MudRadioGroup>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12">
                        <MudExpansionPanel Text="Tags">
                            <TitleContent><MudText Typo="Typo.h6" Style=@(CheckTagsError() ? "color: red" : "")>Tags</MudText></TitleContent>
                            <ChildContent>
                                <MudGrid>
                                    @foreach (DeviceTagDto tag in TagList)
                                    {
                                        <MudItem xs="12" md="6">
                                            <MudTextField @bind-Value="Device.Tags[tag.Name]" Label="@tag.Label"
                                                  Required="@tag.Required"
                                                  Variant="Variant.Outlined" />
                                        </MudItem>
                                    }
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="12">
                        <MudExpansionPanel Text="Labels">
                            <TitleContent><MudText Typo="Typo.h6">Labels</MudText></TitleContent>
                            <ChildContent>
                                <LabelsEditor ReadOnlyLabels="DeviceModel?.Labels" Labels="Device.Labels" />
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>

                @if (!IsLoRa && Properties.Any())
                {
                    <MudGrid>
                        <MudItem xs="12">
                            <MudExpansionPanel Text="Properties">
                                <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                <ChildContent>
                                    <MudGrid>
                                        @foreach (var item in Properties.OrderBy(c => c.Order))
                                        {
                                            switch (item.PropertyType)
                                            {
                                                case DevicePropertyType.Boolean:
                                                    <MudItem xs="12" md="4">
                                                        <MudCheckBox @bind-Checked="item.Value" Label="@item.DisplayName" Color="@Color.Primary" Converter="@(new StringToBoolConverter())" TriState="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Double:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Float:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Integer:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Long:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.String:
                                                    <MudItem xs="12" md="12">
                                                        <MudTextField @bind-Value="item.Value" Label="@item.DisplayName" Format="F1" Variant="Variant.Outlined" Clearable="true" />
                                                    </MudItem>
                                                    break;
                                            }
                                        }
                                    </MudGrid>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudItem>
                    </MudGrid>
                }
            </MudExpansionPanels>
        </MudTabPanel>
        @if (IsLoRa)
        {
            <MudTabPanel Text="LoRaWAN" Style=@(this.CheckLoRaValidation() ? "color: red": "")>
                <CreateLoraDevice LoRaDevice="@(Device as LoRaDeviceDetails)" LoraModelDto="@(LoRaDeviceModelDto)" LoraValidator="@(loraValidator)" />
            </MudTabPanel>
        }
    </MudTabs>
}
else if (context.Equals(CreateEditMode.Edit))
{
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content">
        <MudTabPanel Text="General" Style=@(this.CheckGeneralValidation() ? "color: red": "")>
            <MudExpansionPanels MultiExpansion="true">
                <MudGrid>
                    <MudItem xs="12">
                        <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                            <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                            <ChildContent>
                                <MudGrid>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="@Device.DeviceID"
                                                      id=@nameof(DeviceDetails.DeviceID)
                                                  Label="Device ID"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceID)"
                                                  Required="true"
                                                  ReadOnly="true"
                                                  HelperText="DeviceID must contain 16 hexadecimal characters (numbers from 0 to 9 and/or letters from A to F)" />
                                    </MudItem>
                                    <MudItem xs="12" md="6">
                                        <MudTextField @bind-Value="@Device.DeviceName"
                                                      id=@nameof(DeviceDetails.DeviceName)
                                                  Label="Device name"
                                                  Variant="Variant.Outlined"
                                                  For="@(()=> Device.DeviceName)"
                                                  Required="true" />
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudText>
                                            <b>Status</b>
                                        </MudText>
                                        <MudRadioGroup @bind-SelectedOption="@Device.IsEnabled">
                                            <MudRadio Option=@(true) Color="Color.Primary">
                                                Enabled
                                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>can</b> connect to the platform.</MudText>
                                            </MudRadio>
                                            <MudRadio Option=@(false) Color="Color.Primary">
                                                Disabled
                                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>cannot</b> connect to the platform.</MudText>
                                            </MudRadio>
                                        </MudRadioGroup>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="12">
                        <MudExpansionPanel Text="Tags">
                            <TitleContent><MudText Typo="Typo.h6" Style=@(CheckTagsError() ? "color: red" : "")>Tags</MudText></TitleContent>
                            <ChildContent>
                                <MudGrid>
                                    @foreach (DeviceTagDto tag in TagList)
                                    {
                                        <MudItem xs="12" md="6">
                                            @if (!Device.Tags.ContainsKey(tag.Name))
                                            {
                                                Device.Tags.Add(tag.Name, "");
                                            }
                                            <MudTextField @bind-Value="Device.Tags[tag.Name]" Label="@tag.Label"
                                                  Required="@tag.Required"
                                                  Variant="Variant.Outlined" />
                                        </MudItem>
                                    }
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="12">
                        <MudExpansionPanel Text="Labels">
                            <TitleContent><MudText Typo="Typo.h6">Labels</MudText></TitleContent>
                            <ChildContent>
                                <LabelsEditor ReadOnlyLabels="DeviceModel.Labels" Labels="Device.Labels" />
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudItem>
                </MudGrid>

                @if (!IsLoRa && Properties.Any())
                {
                    <MudGrid>
                        <MudItem xs="12">
                            <MudExpansionPanel Text="Properties">
                                <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                <ChildContent>
                                    <MudGrid>
                                        @foreach (var item in Properties.OrderBy(c => c.Order))
                                        {
                                            switch (item.PropertyType)
                                            {
                                                case DevicePropertyType.Boolean:
                                                    <MudItem xs="12" md="4">
                                                        <MudCheckBox @bind-Checked="item.Value" Label="@item.DisplayName" Color="@Color.Primary" Converter="@(new StringToBoolConverter())" TriState="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Double:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || double.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Float:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || float.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Integer:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || int.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.Long:
                                                    <MudItem xs="12" md="4">
                                                        <MudTextField @bind-Value="item.Value"
                                                  Label="@item.DisplayName"
                                                  Variant="Variant.Outlined"
                                                  Validation=@((string c) => string.IsNullOrEmpty(c) || long.TryParse(c, out var result))
                                                  Clearable="true" />
                                                    </MudItem>
                                                    break;
                                                case DevicePropertyType.String:
                                                    <MudItem xs="12" md="12">
                                                        <MudTextField @bind-Value="item.Value" Label="@item.DisplayName" Format="F1" Variant="Variant.Outlined" Clearable="true" />
                                                    </MudItem>
                                                    break;
                                            }

                                        }
                                    </MudGrid>
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudItem>
                    </MudGrid>
                }
            </MudExpansionPanels>
        </MudTabPanel>
        @if (IsLoRa && Device != null && Commands != null)
        {
            <MudTabPanel Text="LoRaWAN" Style=@(this.CheckLoRaValidation() ? "color: red": "")>
                <EditLoraDevice LoRaDevice="@(Device as LoRaDeviceDetails)" LoraValidator="@(loraValidator)" LoRaDeviceModelDto="@(DeviceModel as LoRaDeviceModelDto)" Commands="@Commands" />
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    [Parameter]
    public CreateEditMode context { get; set; }

    [CascadingParameter]
    public Error Error { get; set; }

    private DeviceDetailsValidator standardValidator = new DeviceDetailsValidator();
    private LoRaDeviceDetailsValidator loraValidator = new LoRaDeviceDetailsValidator();

    private LoRaDeviceModelDto LoRaDeviceModelDto { get; set; }

    private IDeviceDetails Device { get; set; } = new DeviceDetails();

    public PatternMask maskLoRaDeviceID = new PatternMask("XXXXXXXXXXXXXXXX")
        {
            MaskChars = new[] { new MaskChar('X', @"[0-9a-fA-F]") },
            CleanDelimiters = false,
            Transformation = AllUpperCase
        };

    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];

    private IDeviceModel _deviceModel;

    private IDeviceModel DeviceModel
    {
        get
        {
            return _deviceModel;
        }
        set
        {
            if (context.Equals(CreateEditMode.Create))
            {
                Task.Run(async () => await ChangeModel(value));
            }
            else if (context.Equals(CreateEditMode.Edit))
            {
                _deviceModel = value;
            }
        }
    }

    private IEnumerable<DeviceTagDto> TagList { get; set; }
    private List<DevicePropertyValue> Properties;

    private bool displayValidationErrorMessages;

    private bool duplicateDevice;

    [Parameter]
    public string DeviceID { get; set; }

    private bool isLoaded;

    private bool isProcessing;

    private IEnumerable<DeviceModelCommandDto> Commands { get; set; }

    private void setPropertiesWithContext()
    {
        if (context.Equals(CreateEditMode.Create))
        {
            TagList = new List<DeviceTagDto>();
            Properties = new List<DevicePropertyValue>();

            displayValidationErrorMessages = false;
        }
        else if (context.Equals(CreateEditMode.Edit))
        {
            DeviceModel = new DeviceModelDto();

            isLoaded = false;

            TagList = Array.Empty<DeviceTagDto>();

            Properties = new List<DevicePropertyValue>();
        }
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsLoRa { get; set; }

    private void setIsLoRaWithContext()
    {
        if (context.Equals(CreateEditMode.Create))
        {
            IsLoRa = Device is LoRaDeviceDetails;
        }
        else if (context.Equals(CreateEditMode.Edit))
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

            IsLoRa = (QueryHelpers.ParseQuery(uri.Query).TryGetValue("isLoRa", out var isLora));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Début init");

        setPropertiesWithContext();
        setIsLoRaWithContext();

        Console.WriteLine("Définition des propriétés");

        try
        {
            if (context.Equals(CreateEditMode.Create))
            {
                DeviceLayoutService.RefreshDeviceOccurred += DeviceServiceOnRefreshDeviceOccurred;
                Device = DeviceLayoutService.GetSharedDevice() ?? this.Device;
                DeviceModel = DeviceLayoutService.GetSharedDeviceModel() ?? this.DeviceModel;

                // Enable device by default
                Device.IsEnabled = true;

                // Gets the custom tags that can be set when creating a device
                TagList = await DeviceTagSettingsClientService.GetDeviceTags();

                foreach (var tag in TagList)
                {
                    Device.Tags.TryAdd(tag.Name, string.Empty);
                }
            }
            else if (context.Equals(CreateEditMode.Edit))
            {
                isProcessing = true;

                if (IsLoRa)
                {
                    Device = await LoRaWanDeviceClientService.GetDevice(DeviceID);
                    Commands = await LoRaWanDeviceModelsClientService.GetDeviceModelCommands(Device.ModelId);
                    DeviceModel = await LoRaWanDeviceModelsClientService.GetDeviceModel(Device.ModelId);
                }
                else
                {
                    Device = await DeviceClientService.GetDevice(DeviceID);
                    Properties = (await DeviceClientService.GetDeviceProperties(DeviceID)).ToList();
                    DeviceModel = await DeviceModelsClientService.GetDeviceModel(Device.ModelId);
                }

                TagList = await DeviceTagSettingsClientService.GetDeviceTags();

                isLoaded = true;
                isProcessing = false;
            }
            Console.WriteLine("Récupération des contenus de l'API");
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public void Dispose()
    {
        DeviceLayoutService.ResetSharedDevice<DeviceDetails>();
        DeviceLayoutService.ResetSharedDeviceModel<DeviceModelDto>();
        DeviceLayoutService.RefreshDeviceOccurred -= DeviceServiceOnRefreshDeviceOccurred;
    }

    private void DeviceServiceOnRefreshDeviceOccurred(object sender, EventArgs e)
    {
        Device = DeviceLayoutService.GetSharedDevice();
        DeviceModel = DeviceLayoutService.GetSharedDeviceModel();
        StateHasChanged();
        Console.WriteLine("Refresh");
    }

    private bool CheckTagsError()
    {
        bool tagValidationError = false;

        foreach (DeviceTagDto tag in TagList)
        {
            if (tag.Required && string.IsNullOrEmpty(Device.Tags[tag.Name]))
            {
                tagValidationError = true;
            }
        }
        return tagValidationError;
    }

    private bool CheckLoRaValidation()
    {
        if (!IsLoRa)
        {
            return false;
        }

        if (this.Device is LoRaDeviceDetails loRaDeviceDetails)
        {
            return !this.loraValidator.Validate(loRaDeviceDetails).IsValid;
        }

        return true;
    }

    private bool CheckGeneralValidation()
    {
        if (!IsLoRa && this.Device is DeviceDetails deviceDetails)
        {
            return !this.standardValidator.Validate(deviceDetails).IsValid;
        }

        return CheckLoRaValidation();
    }

    private async Task<IEnumerable<IDeviceModel>> Search(string value)
    {
        var filter = new DeviceModelFilter
            {
                SearchText = value,
                PageNumber = 0,
                PageSize = 100,
                OrderBy = new string[]
                {
                    null
                }
            };
        return (await DeviceModelsClientService.GetDeviceModels(filter)).Items.ToList<IDeviceModel>();
    }

    internal async Task ChangeModel(IDeviceModel model)
    {
        try
        {
            Properties.Clear();

            _deviceModel = model;

            Device = new DeviceDetails
                {
                    DeviceID = Device.DeviceID,
                    ModelId = model?.ModelId,
                    ImageUrl = model?.ImageUrl,
                    DeviceName = Device.DeviceName,
                    IsEnabled = Device.IsEnabled,
                    Tags = Device.Tags
                };

            if (model == null || string.IsNullOrWhiteSpace(model.ModelId))
            {
                return;
            }

            if (model.SupportLoRaFeatures)
            {
                var loRaDeviceModelResult = await LoRaWanDeviceModelsClientService.GetDeviceModel(model.ModelId);

                this.Device = new LoRaDeviceDetails
                    {
                        DeviceID = this.Device.DeviceID,
                        ModelId = model.ModelId,
                        ImageUrl = model.ImageUrl,
                        DeviceName = this.Device.DeviceName,
                        IsEnabled = this.Device.IsEnabled,
                        Tags = this.Device.Tags,
                        SensorDecoder = loRaDeviceModelResult.SensorDecoder,
                        UseOTAA = loRaDeviceModelResult.UseOTAA
                    };

                LoRaDeviceModelDto = loRaDeviceModelResult;
            }
            else
            {
                var properties = await DeviceModelsClientService.GetDeviceModelModelProperties(model.ModelId);

                Properties.AddRange(properties.Select(x => new DevicePropertyValue
                    {
                        DisplayName = x.DisplayName,
                        IsWritable = x.IsWritable,
                        Name = x.Name,
                        Order = x.Order,
                        PropertyType = x.PropertyType
                    }));
            }
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
}
