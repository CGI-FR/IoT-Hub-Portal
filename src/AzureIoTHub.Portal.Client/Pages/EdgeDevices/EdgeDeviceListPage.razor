@page "/edge/devices"
@using AzureIoTHub.Portal
@using AzureIoTHub.Portal.Models.v10
@using System.Web
@using AzureIoTHub.Portal.Shared.Models.v10;

@attribute [Authorize]
@inject PortalSettings Portal
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEdgeDeviceClientService EdgeDeviceClientService
@inject IEdgeModelClientService EdgeModelClientService

<MudGrid>
    <MudItem xs="12">
        <MudExpansionPanels>
            <MudExpansionPanel Text="Search panel">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="searchModel.DeviceId" Placeholder="Name"></MudTextField>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudSelect T="LabelDto" Label="Labels" MultiSelection="true" @bind-SelectedValues="selectedLabels"
                                   MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                                   Variant="Variant.Outlined">
                            @foreach (var label in labels)
                            {
                                <MudSelectItem T="LabelDto" Value="@label">
                                    <MudChip Text="@label.Name" Color="Color.Primary" Style="@($"background-color: {label.Color};")" />
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudAutocomplete T="IoTEdgeModelListItem"
                                         id="@nameof(IoTEdgeModelListItem.ModelId)"
                                         @bind-Value="edgeModel"
                                         SearchFunc="@Search"
                                         Label="Model"
                                         Dense=true
                                         For=@(() => this.edgeModel)
                                         Variant="Variant.Outlined"
                                         ToStringFunc="@(x => x?.Name)"
                                         ResetValueOnEmptyText=true
                                         Immediate=true
                                         Clearable=true
                                         CoerceText=true
                                         CoerceValue=false>
                            <ItemTemplate>
                                @context.Name
                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">
                                    @((!string.IsNullOrEmpty(@context.Description) && @context.Description.Length > 100) ? @context.Description.Substring(0, 100) + "..." : @context.Description)
                                </MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem sm="12" md="6">
                        <MudText>Status</MudText>
                        <MudRadioGroup @bind-SelectedOption="@searchModel.Status" Style="display:flex;align-items:baseline">
                            <MudItem md="4" sm="12">
                                <MudRadio Option=@("true") Color="Color.Primary">Enabled</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option=@("false") Color="Color.Primary">Disabled</MudRadio>
                            </MudItem>
                            <MudItem md="4" sm="12">
                                <MudRadio Option=@("true") Color="Color.Secondary">All</MudRadio>
                            </MudItem>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="12" Class="pb-4 pl-4">
                        <MudButton id="searchFilterButton" Variant="Variant.Outlined" Color="Color.Success" Class="ml-auto" OnClick="Search">Search</MudButton>
                        <MudButton id="reset" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-4" OnClick="ResetFilter">Reset</MudButton>
                    </MudItem>
                </MudGrid>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>

    <MudItem xs="12">
        <MudTable T="IoTEdgeListItem" ServerData=@LoadItems Dense=true Hover=true Bordered=true Striped=true @ref="table" Loading="@IsLoading" OnRowClick="@((e) => GoToDetails(e.Item))" RowStyle="cursor: pointer;">
            <ColGroup>
                <col style="width: 5%;" />
                <col style="width: 40%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
                <col style="width: 10%;" />
            </ColGroup>
            <ToolBarContent>
                <MudText Typo="Typo.h6">Edge Devices</MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh list">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Medium" OnClick="@Refresh" id="tableRefreshButton" Class="ma-2"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Add device">
                    <MudFab Color="Color.Secondary" Icon="@Icons.Material.Filled.Add" Size="Size.Medium" OnClick="RedirectToCreatePage" />
                </MudTooltip>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Id" T="IoTEdgeListItem" id="sortDeviceId">Device ID</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="IsEnabled" T="IoTEdgeListItem">Allowed</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center"><MudTableSortLabel SortLabel="NbDevices" T="IoTEdgeListItem">Nb devices</MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center">See details</MudTh>
                <MudTh Style="text-align: center">Delete</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="text-align: center">
                    <img height="25" src="@context.ImageUrl" />
                </MudTd>
                <MudTd DataLabel="Device">
                    <MudItem>
                        <MudText Typo="Typo.body1" Inline="true">@context.DeviceName</MudText>
                        <MudText Class="pl-2" Typo="Typo.caption" Style="@($"color:{Theme.CurrentTheme.Palette.GrayLight};")" Inline="true">@context.DeviceId</MudText>
                    </MudItem>
                    <MudItem>
                        <Labels Items="@context.Labels" SearchedLabels="@labels" />
                    </MudItem>
                </MudTd>
                <MudTd DataLabel="Status" Style="text-align: center">
                    @if (context.Status == "Enabled")
                    {
                        <MudTooltip Text="Device can connect">
                            <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                        </MudTooltip>
                    }
                    else
                    {
                        <MudTooltip Text="Device cannot connect">
                            <MudIcon Icon="@Icons.Filled.Error" Color="Color.Default" />
                        </MudTooltip>
                    }
                </MudTd>

                <MudTd DataLabel="NbDevices" Style="text-align: center">@context.NbDevices</MudTd>
                <MudTd DataLabel="Details" Style="text-align: center">
                        <MudTooltip Text="See device details">
                        <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Default" OnClick="@(() => GoToDetails(context))" />
                        </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Delete" Style="text-align: center">
                    <MudTooltip Text="Delete device">
                        <MudIconButton id="@($"delete_{context.DeviceId}")" Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(e => ShowDeleteDialog(context))"></MudIconButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    private MudTable<IoTEdgeListItem> table;
    private SearchModel searchModel = new();

    private List<IoTEdgeModelListItem> edgeModelList = new List<IoTEdgeModelListItem>();
    private IoTEdgeModelListItem _edgeModel;
    public IoTEdgeModelListItem edgeModel
    {
        get => _edgeModel;
        set
        {
            Task.Run(async () => await ChangeModel(value));
        }
    }

    readonly DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private bool IsLoading { get; set; } = true;

    private IEnumerable<LabelDto> labels = new List<LabelDto>();
    private IEnumerable<LabelDto> selectedLabels = new List<LabelDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.edgeModelList = await EdgeModelClientService.GetIoTEdgeModelList();
            labels = await EdgeDeviceClientService.GetAvailableLabels();
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    private void Search()
    {
        table.ReloadServerData();
    }

    private void Refresh()
    {
        table.ReloadServerData();
    }

    private async Task<TableData<IoTEdgeListItem>> LoadItems(TableState state)
    {
        try
        {
            string orderBy = null;

            switch (state.SortDirection)
            {
                case SortDirection.Ascending:
                    orderBy = $"{state.SortLabel} asc";
                    break;
                case SortDirection.Descending:
                    orderBy = $"{state.SortLabel} desc";
                    break;
            }

            var uri = $"api/edge/devices?pageNumber={state.Page}&pageSize={state.PageSize}&searchText={HttpUtility.UrlEncode(searchModel.DeviceId)}&searchStatus={searchModel.Status}&orderBy={orderBy}&modelId={this.edgeModel?.ModelId}";

            foreach(var label in selectedLabels)
            {
                uri += $"&labels={label.Name}";
            }

            var result = await EdgeDeviceClientService.GetDevices(uri);

            return new TableData<IoTEdgeListItem>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);

            return new TableData<IoTEdgeListItem>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ResetFilter()
    {
        searchModel = new SearchModel();
        edgeModel = new IoTEdgeModelListItem();
        selectedLabels = new List<LabelDto>();

        Search();
    }

    private void RedirectToCreatePage() => NavigationManager.NavigateTo("/edge/devices/new");

    public async Task ShowDeleteDialog(IoTEdgeListItem gateway)
    {
        var parameters = new DialogParameters { { nameof(IoTEdgeDevice.DeviceId), gateway.DeviceId } };
        var result = await DialogService.Show<EdgeDeviceDeleteConfirmationDialog>("Confirm Deletion", parameters).Result;

        if (result.Cancelled)
        {
            return;
        }

        // Update the list of gateways after the deletion
        Search();
    }

    private void GoToDetails(IoTEdgeListItem item)
    {
        NavigationManager.NavigateTo($"/edge/devices/{item.DeviceId}");
    }

    /// <summary>
    /// Allows to autocomplete the Device Model field in the form.
    /// </summary>
    /// <param name="value">Text entered in the field</param>
    /// <returns>Item of the device model list that matches the user's value</returns>
    public async Task<IEnumerable<IoTEdgeModelListItem>> Search(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(0);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return edgeModelList;

        return edgeModelList
                    .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    internal async Task ChangeModel(IoTEdgeModelListItem edgeModel)
    {

        this._edgeModel = edgeModel;

        if (edgeModel == null || string.IsNullOrWhiteSpace(edgeModel.ModelId))
        {
            return;
        }

        await InvokeAsync(StateHasChanged);
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} label{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }
}
