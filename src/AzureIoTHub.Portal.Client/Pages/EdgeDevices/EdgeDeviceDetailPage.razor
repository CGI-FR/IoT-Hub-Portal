@page "/edge/devices/{deviceId}"

@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Shared.Models.v10;

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IEdgeDeviceClientService EdgeDeviceClientService
@inject IEdgeModelClientService EdgeModelClientService
@inject IEdgeDeviceLayoutService EdgeDeviceLayoutService
@inject IDeviceTagSettingsClientService DeviceTagSettingsClientService

<MudTooltip Text="Return" Placement="Placement.Left">
    <MudFab Icon="@Icons.Outlined.ArrowBack" Color="Color.Secondary" Size="Size.Small" OnClick="Return" id = "returnButton"/>       
</MudTooltip>
<MudTooltip Placement="Placement.Top">
<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">  Edge Device Details</MudText>
</MudTooltip>

<MudForm Model="@edgeDevice" @ref="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardHeader Class="DeviceCardHeader">
                    <CardHeaderContent>
                        <MudText Typo="Typo.body2" Class="mb-6" id=@nameof(IoTEdgeModel.Name)>Model: <b>@edgeModel.Name</b></MudText>
                        <MudText Typo="Typo.h5" Class="overflow-ellipsis" Align="Align.Center">@(string.IsNullOrEmpty(edgeDevice.DeviceName) ? edgeDevice.DeviceId : edgeDevice.DeviceName)</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar Image="@edgeDevice.ImageUrl?.ToString()" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                    </div>
                </MudCardContent>
                <MudCardActions Class="pb-4 pl-4 justify-center">
                    @if (isLoaded)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Filled.Cable" OnClick="ShowConnectionString" id="connectButton">Connect</MudButton>
                    }
                </MudCardActions>
            </MudCard>

            <MudItem xs="12" Class="d-flex justify-space-around py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Class="mx-1" Color="Color.Error" OnClick="ShowDeleteModal" id="deleteButton" Disabled="isProcessing">Delete edge device</MudButton>
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                    <MudButton id="saveButton" OnClick="ProcessActionOnDevice" Disabled="isProcessing">@saveButtonText</MudButton>
                    <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                        <MudMenuItem OnClick="() => SetSaveButtonText(DeviceSaveAction.Save)">Save</MudMenuItem>
                        <MudMenuItem OnClick="() => SetSaveButtonText(DeviceSaveAction.Duplicate)">Duplicate</MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content">
                <MudTabPanel Text="General">
                    <MudExpansionPanels MultiExpansion="true">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Edge Device Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Edge Device Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>

                                            <MudItem xs="12" md="6">
                                                <MudText>
                                                    <b>Status</b>
                                                </MudText>
                                                <MudRadioGroup @bind-SelectedOption="@edgeDevice.Status">
                                                    <MudRadio Option=@("Enabled") Color="Color.Primary">
                                                        Enabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>can</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                    <MudRadio Option=@("Disabled") Color="Color.Primary">
                                                        Disabled
                                                        <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>cannot</b> connect to the platform.</MudText>
                                                    </MudRadio>
                                                </MudRadioGroup>
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudText>
                                                    <b>Runtime response</b>
                                                </MudText>
                                                @if (edgeDevice.RuntimeResponse == "running")
                                                {
                                                    <MudTooltip Text="Runtime is running well">
                                                        <MudIcon Icon="@Icons.Filled.CheckCircle" Color="Color.Success" />
                                                    </MudTooltip>
                                                }
                                                else
                                                {
                                                    <MudItem>
                                                        <MudTooltip Text="Runtime has an error">
                                                            <MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" />
                                                        </MudTooltip>
                                                    </MudItem>
                                                }
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@edgeDevice.NbDevices" Label="Nbr of connected devices" Variant="Variant.Outlined" ReadOnly="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@edgeDevice.NbModules" Label="Nbr of desired modules" Variant="Variant.Outlined" ReadOnly="true" />
                                            </MudItem>

                                            <MudItem xs="12" md="6">
                                                <MudTextField @bind-Value="@edgeDevice.DeviceName"
                                                              id=@nameof(IoTEdgeDevice.DeviceName)
                                                              Label="Device name"
                                                              Variant="Variant.Outlined"
                                                              For="@(()=> edgeDevice.DeviceName)"
                                                              Required="true" />
                                            </MudItem>
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Tags">
                                    <TitleContent><MudText Typo="Typo.h6">Last deployment</MudText></TitleContent>
                                    <ChildContent>
                                    @if (edgeDevice.LastDeployment != null){                                                                                   
                                        <MudGrid>
                                            <MudItem xs="12" md="4">
                                                <MudTextField @bind-Value="@edgeDevice.LastDeployment.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="4">
                                                <MudTextField @bind-Value="@edgeDevice.LastDeployment.DateCreation" Label="Date" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="4">
                                                <MudTextField @bind-Value="@edgeDevice.LastDeployment.Status" Label="Status" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                                            </MudItem>
                                        </MudGrid>
                                     }
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Modules" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Modules</MudText></TitleContent>
                                    <ChildContent>
                                        <MudTable Items="@edgeDevice.Modules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                            <ColGroup>
                                                <col style="width: 40%;" />
                                                <col style="width: 10%;" />
                                                <col style="width: 20%;" />
                                            </ColGroup>
                                            <HeaderContent>
                                                <MudTh Style="text-align: center">Module Name</MudTh>
                                                <MudTh Style="text-align: center">Status</MudTh>
                                                <MudTh Style="text-align: center"></MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Module Name" Style="word-break: break-all;">@context.ModuleName</MudTd>
                                                <MudTd DataLabel="Status" Style="text-align: center">@context.Status</MudTd>
                                                <MudTd DataLabel="Device" Style="text-align: center;display:flex;justify-content:space-evenly;">
                                                    <MudButton Variant="Variant.Filled" Class="btn showLogs" Color="Color.Dark" Disabled="btn_disable" OnClick="@(async () => await ShowEdgeDeviceLogs(context) )">logs</MudButton>
                                                    <MudButton Variant="Variant.Filled" Class="rebootModule" Color="Color.Primary" Disabled="btn_disable" OnClick="@(async () => await OnMethod(context.ModuleName,"RestartModule") )">reboot</MudButton>
                                                    @foreach (var command in context.Commands)
                                                    {
                                                        <MudButton Variant="Variant.Filled" id="@(command.Name)" Disabled="btn_disable" Color="Color.Success" OnClick="@(async () => await OnMethod(context.ModuleName, command.Name) )">@command.Name</MudButton>
                                                    }
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Tags">
                                    <TitleContent><MudText Typo="Typo.h6" Style=@(CheckTagsError() ? "color: red" : "")>Tags</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            @foreach (DeviceTagDto tag in TagList)
                                            {
                                                <MudItem xs="12" md="6">
                                                    @if (!edgeDevice.Tags.ContainsKey(tag.Name))
                                                    {
                                                        edgeDevice.Tags.Add(tag.Name, "");
                                                    }
                                                    <MudTextField @bind-Value="edgeDevice.Tags[tag.Name]" Label="@tag.Label"
                                                              Required="@tag.Required"
                                                              Variant="Variant.Outlined" />
                                                </MudItem>
                                            }
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Labels">
                                    <TitleContent><MudText Typo="Typo.h6">Labels</MudText></TitleContent>
                                    <ChildContent>
                                        <LabelsEditor ReadOnlyLabels="edgeModel.Labels" Labels="edgeDevice.Labels" />
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                    </MudExpansionPanels>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [CascadingParameter]
    public Error Error {get; set;}

    private MudForm form;

    [Parameter]
    public string deviceId { get; set; }

    private bool btn_disable = false;
    private void Return() => NavigationManager.NavigateTo("edge/devices");

    private IoTEdgeDevice edgeDevice;
    private IoTEdgeModel edgeModel = new IoTEdgeModel();

    private IEnumerable<DeviceTagDto> TagList { get; set; } = Array.Empty<DeviceTagDto>();

    private bool isLoaded = false;
    private bool isProcessing;

    private DeviceSaveAction deviceSaveAction = DeviceSaveAction.Save;
    private string saveButtonText = "Save";

    protected override async Task OnInitializedAsync()
    {
        edgeDevice = new IoTEdgeDevice();
        await LoadDevice();
    }

    public async Task LoadDevice()
    {
        try
        {
            isProcessing = true;

            edgeDevice = await EdgeDeviceClientService.GetDevice(deviceId);

            if (edgeDevice.ConnectionState == "Disconnected")
            {
                btn_disable = true;
            }

            await LoadModel(edgeDevice.ModelId);

            foreach (var edgeModelModule in edgeModel.EdgeModules)
            {
                foreach (var item in edgeDevice.Modules)
                {
                    if (item.ModuleName.Equals(edgeModelModule.ModuleName, StringComparison.Ordinal))
                    {
                        item.Commands = edgeModelModule.Commands;
                    }
                }
            }

            TagList = await DeviceTagSettingsClientService.GetDeviceTags();
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isLoaded = true;
            isProcessing = false;
        }
    }

    public async Task LoadModel(string edgeDeviceId)
    {
        try
        {
            edgeModel = await EdgeModelClientService.GetIoTEdgeModel(edgeDeviceId);
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
    }

    public async Task UpdateDevice()
    {

        try
        {
            isProcessing = true;

            await form.Validate();

            if (CheckTagsError())
            {
                Snackbar.Add("One or more validation errors occurred", Severity.Error);

                isProcessing = false;

                return;
            }

            await EdgeDeviceClientService.UpdateDevice(edgeDevice);

            Snackbar.Add($"Device {edgeDevice.DeviceId} has been successfully updated!\r\nPlease note that changes might take some minutes to be visible in the list...", Severity.Success);
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ProcessActionOnDevice()
    {
        switch (deviceSaveAction)
        {
            case DeviceSaveAction.Save:
                await UpdateDevice();
                break;
            case DeviceSaveAction.Duplicate:
                EdgeDeviceLayoutService.DuplicateSharedDevice(edgeDevice);
                EdgeDeviceLayoutService.DuplicateSharedDeviceModel(edgeModel);
                NavigationManager.NavigateTo("edge/devices/new");
                break;
        }
    }

    public async Task OnMethod(string moduleName, string methodName)
    {
        isProcessing = true;

        try
        {
            var c2dResult = await EdgeDeviceClientService.ExecuteModuleMethod(edgeDevice.DeviceId, moduleName, methodName);

            if (c2dResult.Status == 200)
            {
                Snackbar.Add("Command successfully executed.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error<br>Status : {c2dResult.Status};<br>Payload : {c2dResult.Payload};", Severity.Error,
                    (option) =>
                    {
                        option.VisibleStateDuration = 10000;
                    });
            }
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    public async Task ShowEdgeDeviceLogs(IoTEdgeModule module)
    {
        var parameter = new DialogParameters
        {
            {"deviceId", deviceId},
            {"edgeModule", module}
        };

        _ = await DialogService.Show<ModuleLogsDialog>("Edge device log", parameter).Result;

    }

    public async Task ShowConnectionString()
    {
        var parameters = new DialogParameters {{nameof(ConnectionStringDialog.deviceId), this.deviceId}};

        _ =  await DialogService.Show<ConnectionStringDialog>("Edge Device Connection String", parameters).Result;
    }

    public async Task ShowDeleteModal()
    {
        isProcessing = true;

        var parameter = new DialogParameters {{nameof(edgeDevice.DeviceId), edgeDevice.DeviceId}};

        var result = await DialogService.Show<EdgeDeviceDeleteConfirmationDialog>("Edge device deletion confirmation", parameter).Result;

        isProcessing = false;

        if (result.Cancelled)
        {
            return;
        }

        NavigationManager.NavigateTo("/edge/devices");
    }

    private bool CheckTagsError()
    {
        bool tagValidationError = false;

        foreach (DeviceTagDto tag in TagList)
        {
            if (tag.Required && string.IsNullOrEmpty(edgeDevice.Tags[tag.Name]))
            {
                tagValidationError = true;
            }
        }
        return tagValidationError;
    }

    private void SetSaveButtonText(DeviceSaveAction saveAction)
    {
        deviceSaveAction = saveAction;
        saveButtonText = deviceSaveAction switch
        {
            DeviceSaveAction.Save => "Save",
            DeviceSaveAction.Duplicate => "Duplicate",
            _ => saveButtonText
        };
    }
}
