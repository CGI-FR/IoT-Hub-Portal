@page "/device-models/new"

@using System.Net.Http.Headers
@using AzureIoTHub.Portal.Client.Pages.DeviceModels
@using AzureIoTHub.Portal.Client.Validators
@using AzureIoTHub.Portal.Shared.Models
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Models.v10.LoRaWAN
@using AzureIoTHub.Portal.Models.v10.AWS
@using AzureIoTHub.Portal.Shared.Constants
@using AzureIoTHub.Portal.Client.Services.AWS

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject PortalSettings Portal
@inject ISnackbar Snackbar
@inject IDeviceModelsClientService DeviceModelsClientService
@inject ILoRaWanDeviceModelsClientService LoRaWanDeviceModelsClientService
@inject ILoRaWanDeviceModelsClientService LoRaWanDeviceModelsClientService
@inject IThingTypeClientService ThingTypeClientService

@if (Portal.CloudProvider.Equals(CloudProviders.AWS))
{
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Thing Type</MudText>
    
}
else
{
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Device Model</MudText>

}

<MudForm Model="@Model" @ref="form" id="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            @if (Portal.CloudProvider.Equals(CloudProviders.Azure))
            {
                <MudCard>
                    <MudCardContent>
                        <div class="d-flex justify-center mb-4">
                            <MudAvatar Image="@imageDataUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                        </div>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-center">
                        @if (imageDataUrl != null)
                        {
                            <MudButton OnClick="DeleteAvatar" Color="Color.Error">Delete Picture</MudButton>
                        }
                        else
                        {
                            <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                            <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Change Picture</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            }

            <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save" id="SaveButton" Disabled="isProcessing">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content" id="tabs">
                <MudTabPanel Text="General" Style=@(this.CheckGeneralValidation() ? "color: red": "")>
                    <MudExpansionPanels MultiExpansion="true" id="general">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                @if (Portal.CloudProvider.Equals(CloudProviders.AWS))
                                                {
                                                    <MudTextField id="@nameof(ThingType.ThingTypeName)" @bind-Value="@ThingType.ThingTypeName" For="@(() => ThingType.ThingTypeName)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />

                                                }
                                                else
                                                {
                                                    <MudTextField id="@nameof(Model.Name)" @bind-Value="@Model.Name" For="@(() => Model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                                                    
                                                }
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                @if (Portal.CloudProvider.Equals(CloudProviders.AWS))
                                                {
                                                    <MudTextField id="@nameof(ThingType.ThingTypeDescription)" @bind-Value="@ThingType.ThingTypeDescription" For="@(() => ThingType.ThingTypeDescription)" Label="Description" Variant="Variant.Outlined" Lines="5" />

                                                }
                                                else
                                                {
                                                    <MudTextField id="@nameof(Model.Description)" @bind-Value="@Model.Description" For="@(() => Model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                                                    @if (Portal.IsLoRaSupported)
                                                    {
                                                        <MudItem xs="12">
                                                            <MudText>
                                                                <b>LoRa Device</b>
                                                            </MudText>

                                                            <MudSwitch @bind-Checked="@IsLoRa" id="SupportLoRaFeatures" Color="Color.Secondary" Label="Support LoRa"></MudSwitch>
                                                            @if (IsLoRa)
                                                            {
                                                                <MudText Typo="Typo.subtitle1" Class="mud-input-helper-text">The device <b>is</b> a LoRa Device.</MudText>

                                                            }
                                                        </MudItem>
                                                    }
                                                }
                                            </MudItem>
                                            
                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        @if (!IsLoRa)
                        {
                            @if (Portal.CloudProvider.Equals(CloudProviders.AWS))
                            {
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudExpansionPanel Text="Tags">
                                            <TitleContent><MudText Typo="Typo.h6">Tags</MudText></TitleContent>
                                            <ChildContent>
                                                <MudGrid>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ThingTypeTags.Add(new ThingTypeTagDto()))" StartIcon="@Icons.Material.Filled.Add" id="addTagButton">Add tag</MudButton>
                                                    <MudItem xs="12">
                                                        @foreach (var tag in this.ThingTypeTags)
                                                        {
                                                            <MudGrid id="@($"tag-{tag.Key}")">
                                                                <MudItem md="4" xs="12">
                                                                    <MudTextField id="@nameof(tag.Key)"
                                                                          Label="Key"
                                                                          @bind-Value="@tag.Key"
                                                                          Variant="Variant.Outlined"
                                                                          For="@(()=> tag.Key)" />
                                                                </MudItem>
                                                                <MudItem md="3" xs="12">
                                                                    <MudTextField id="@nameof(tag.Value)"
                                                                          Label="Value"
                                                                          @bind-Value="@tag.Value"
                                                                          Variant="Variant.Outlined"
                                                                          For="@(()=> tag.Value)" />
                                                                </MudItem>

                                                                <MudItem md="1" xs="3">
                                                                    <MudIconButton id="deleteTagButton" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => ThingTypeTags.Remove(tag))">Remove</MudIconButton>
                                                                </MudItem>
                                                            </MudGrid>
                                                        }
                                                    </MudItem>
                                                </MudGrid>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudItem>
                                </MudGrid>
                            }
                            else
                            {
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudExpansionPanel Text="Properties">
                                            <TitleContent><MudText Typo="Typo.h6">Properties</MudText></TitleContent>
                                            <ChildContent>
                                                <MudGrid>
                                                    <MudItem xs="12">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => Properties.Add(new DeviceProperty() {  Order = Properties.Select(x => x.Order).Next() }))" StartIcon="@Icons.Material.Filled.Add" id="addPropertyButton">Add property</MudButton>
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        @foreach (var item in this.Properties.OrderBy(x => x.Order))
                                                        {
                                                            <MudGrid id="@($"property-{item.Name}")">
                                                                <MudItem md="4" xs="12">
                                                                    <MudTextField id="@nameof(item.DisplayName)"
                                                                      @bind-Value="@item.DisplayName"
                                                                      Label="Display name"
                                                                      Variant="Variant.Outlined"
                                                                      For="@(()=> item.DisplayName)"
                                                                      Required="true" />
                                                                </MudItem>
                                                                <MudItem md="3" xs="12">
                                                                    <MudTextField id="@nameof(item.Name)" @bind-Value="@item.Name"
                                                                      Label="Name"
                                                                      Variant="Variant.Outlined"
                                                                      For="@(()=> item.Name)"
                                                                      Required="true" />
                                                                </MudItem>
                                                                <MudItem md="1" xs="12">
                                                                    <MudNumericField id="@nameof(item.Order)"
                                                                         @bind-Value="@item.Order"
                                                                         Label="Order"
                                                                         Variant="Variant.Outlined"
                                                                         Min=0
                                                                         For="@(()=> item.Order)"
                                                                         Required="true" />
                                                                </MudItem>
                                                                <MudItem md="2" xs="6">
                                                                    <MudSelect id="@nameof(item.PropertyType)"
                                                                   @bind-Value="@item.PropertyType"
                                                                   Label="Type"
                                                                   Variant="Variant.Outlined"
                                                                   For="@(()=> item.PropertyType)"
                                                                   Required="true">
                                                                        @foreach (DevicePropertyType item in Enum.GetValues(typeof(DevicePropertyType)))
                                                                        {
                                                                            <MudSelectItem Value="@item">@item</MudSelectItem>
                                                                        }
                                                                    </MudSelect>
                                                                </MudItem>
                                                                <MudItem md="1" xs="3">
                                                                    <MudSwitch id="@nameof(item.IsWritable)" Label="Writable" @bind-Checked="@item.IsWritable" Color="Color.Secondary" />

                                                                </MudItem>
                                                                <MudItem md="1" xs="3">
                                                                    <MudIconButton id="deletePropertyButton" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Properties.Remove(item))">Remove</MudIconButton>
                                                                </MudItem>
                                                            </MudGrid>
                                                        }
                                                    </MudItem>
                                                </MudGrid>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    </MudItem>
                                </MudGrid>
                            }
                        }

                        @if (Portal.CloudProvider.Equals(CloudProviders.AWS))
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Searchable Attribute">
                                        <TitleContent><MudText Typo="Typo.h6">Searchable Attribute</MudText></TitleContent>
                                        <ChildContent>
                                            <MudItem xs="12" md="6">
                                                <MudItem xs="12">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => searchableAtt.Add(new ThingTypeSearchableAttDto()))" StartIcon="@Icons.Material.Filled.Add" id="addSearchableAttButton">Add Attribute</MudButton>
                                                </MudItem>
                                                <MudItem xs="12">
                                                    @foreach (var search in this.searchableAtt)
                                                    {
                                                        <MudGrid id="@($"search-{search.Name}")">
                                                            <MudItem md="4" xs="12">
                                                                <MudTextField id="@nameof(search.Name)"
                                                                      Label="Name"
                                                                      @bind-Value="@search.Name"
                                                                      Variant="Variant.Outlined"
                                                                      For="@(()=> search.Name)" />
                                                            </MudItem>
                                                         
                                                            <MudItem md="1" xs="3">
                                                                <MudIconButton id="deleteSearchableButton" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => searchableAtt.Remove(search))">Remove</MudIconButton>
                                                            </MudItem>
                                                        </MudGrid>
                                                    }
                                                </MudItem>
                                            </MudItem>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }
                        else
                        {
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudExpansionPanel Text="Labels">
                                        <TitleContent><MudText Typo="Typo.h6">Labels</MudText></TitleContent>
                                        <ChildContent>
                                            <LabelsEditor Labels="Model.Labels" />
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudItem>
                            </MudGrid>
                        }

                    </MudExpansionPanels>
                </MudTabPanel>
                @if (IsLoRa)
                {
                    <MudTabPanel Class="LoRaWANTab" Text="LoRaWAN" Style=@(this.CheckLoRaValidation() ? "color: red": "")>
                        <CreateLoraDeviceModel LoRaDeviceModel="@(Model as LoRaDeviceModelDto)"
                                           Commands="Commands" />
                    </MudTabPanel>
                }
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    private MudForm form = default!;

    private DeviceModelValidator standardValidator = new DeviceModelValidator();
    private ThingTypeValidator thingTypeValidator = new ThingTypeValidator();
    private LoRaDeviceModelValidator loraValidator = new LoRaDeviceModelValidator();
    private DevicePropertyValidator propertiesValidator = new DevicePropertyValidator();
    private List<DeviceModelCommandDto> Commands { get; set; } = new();
    private List<DeviceProperty> Properties { get; set; } = new List<DeviceProperty>();
    private Dictionary<string, string> Tags { get; set; } = new Dictionary<string, string>();
    private List<ThingTypeSearchableAttDto> searchableAtt { get; set; } = new List<ThingTypeSearchableAttDto>();
    private List<ThingTypeTagDto> ThingTypeTags { get; set; } = new List<ThingTypeTagDto>();
    private LoRaDeviceModelCommandValidator CommandValidator = new LoRaDeviceModelCommandValidator();
    internal ThingTypeDetails ThingType { get; set; } = new ThingTypeDetails()
    {
        ThingTypeID = Guid.NewGuid().ToString()
    };

    private bool isProcessing;

    private bool IsLoRa
    {
        get
        {
            return this.Model is LoRaDeviceModelDto;
        }
        set
        {
            if (value)
            {
                this.SetLoRaDeviceModel();
                return;
            }

            SetStandardDeviceModel();
        }
    }

    private void SetLoRaDeviceModel()
    {
        Model = new LoRaDeviceModelDto(Model);
        Commands = new List<DeviceModelCommandDto>();
    }

    private void SetStandardDeviceModel()
    {
        Model = new DeviceModelDto
            {
                ModelId = Model.ModelId,
                Name = Model.Name,
                IsBuiltin = Model.IsBuiltin,
                Description = Model.Description
            };
    }

    internal IDeviceModel Model { get; set; } = new DeviceModelDto
        {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private MultipartFormDataContent? content = default!;
    private string? imageDataUrl = default!;

    private bool CheckLoRaValidation()
    {
        if (IsLoRa && this.Model is LoRaDeviceModelDto loRaDeviceModel)
        {
            return !this.loraValidator.Validate(loRaDeviceModel).IsValid;
        }

        return true;
    }

    private bool CheckGeneralValidation()
    {
        if (Portal.CloudProvider.Equals(CloudProviders.AWS))
        {
            if(this.ThingType != null)
            {
                return !this.thingTypeValidator.Validate(this.ThingType).IsValid;
            }
        }
        else
        {
            if (!IsLoRa && this.Model is DeviceModelDto deviceModel)
            {
                return !this.standardValidator.Validate(deviceModel).IsValid;
            }
        }


        return CheckLoRaValidation();
    }

    private void DeleteAvatar()
    {
        content = null;
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task Save()
    {

        if(Portal.CloudProvider.Equals(CloudProviders.AWS))
        {
            await this.SaveThingType();
        }
        else
        {
            await this.SaveDeviceModel();
        }
    }

    private async Task SaveDeviceModel()
    {
        isProcessing = true;

        // Displays validation error message for each field
        await form.Validate();

        // Used to check commands
        bool duplicated = false;
        bool cmdValidationError = false;

        if (IsLoRa)
        {
            // Check duplicates in command name
            var query = Commands.GroupBy(x => x.Name)
                        .Where(x => x.Count() > 1)
                        .Select(x => x.Key)
                        .ToList();
            foreach (var item in query)
            {
                Snackbar.Add($"The command '{item}' appears more than once!", Severity.Warning);
                duplicated = true;
            }

            // Check validation error in commands
            foreach (var cmd in Commands)
            {
                if (!CommandValidator.Validate(cmd).IsValid)
                    cmdValidationError = true;
            }
        }

        if (!IsLoRa ? !standardValidator.Validate((Model as DeviceModelDto)!).IsValid :
            (!this.loraValidator.Validate((this.Model as LoRaDeviceModelDto)!).IsValid
            || duplicated
            || cmdValidationError))
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            isProcessing = false;

            return;
        }

        try
        {
            if (IsLoRa)
            {
                await LoRaWanDeviceModelsClientService.CreateDeviceModel((Model as LoRaDeviceModelDto)!);

                await LoRaWanDeviceModelsClientService.SetDeviceModelCommands(Model.ModelId, Commands);
            }
            else
            {

                await DeviceModelsClientService.CreateDeviceModel((Model as DeviceModelDto)!);

                await DeviceModelsClientService.SetDeviceModelModelProperties(Model.ModelId, Properties);


            }

            if (content is not null)
            {
                if (IsLoRa)
                {
                    await LoRaWanDeviceModelsClientService.ChangeAvatar(Model.ModelId, content);
                }
                else
                {
                    await DeviceModelsClientService.ChangeAvatar(Model.ModelId, content);
                }
            }

            Snackbar.Add("Device model successfully created.", Severity.Success);


            // Go back to the list of devices
            NavigationManager.NavigateTo("device-models");
        }

        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SaveThingType()
    {
        isProcessing = true;

        // Displays validation error message for each field
        await form.Validate();


        if (!thingTypeValidator.Validate(ThingType).IsValid)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            isProcessing = false;

            return;
        }

        try
        {

            if(this.ThingTypeTags != null)
            {
                if(this.ThingTypeTags.Count() > 0)
                {
                    foreach (var tag in this.ThingTypeTags)
                    {
                        this.Tags.Add(tag.Key, tag.Value);
                    }
                }
            }

            ThingType.Tags = this.Tags;
            ThingType.ThingTypeSearchableAttDtos = searchableAtt;

            await ThingTypeClientService.CreateThingType(ThingType);
            Snackbar.Add("Thing Type successfully created.", Severity.Success);

            // Go back to the list of devices
            NavigationManager.NavigateTo("device-models");
        }

        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
            //Reinitialize Tags When an error occured
            this.Tags = new Dictionary<string, string>();
        }
        finally
        {
            isProcessing = false;
        }
    }
}
