@page "/edge/models/new"

@using AzureIoTHub.Portal.Client.Pages.EdgeModels.EdgeModule
@using AzureIoTHub.Portal.Models
@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Shared.Models.v10
@using AzureIoTHub.Portal.Client.Validators
@using System.Net.Http.Headers

@attribute [Authorize]
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEdgeModelClientService EdgeModelService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Create Edge Device Model</MudText>

<MudForm Model="@Model" @ref="form" id="form">
    <MudGrid>
        <MudItem xs="12" sm="4" md="3">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex justify-center mb-4">
                        <MudAvatar Image="@imageDataUrl" id="@(nameof(IoTEdgeModel.ImageUrl))" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                    </div>
                </MudCardContent>
                <MudCardActions Class="d-flex justify-center">
                    @if (imageDataUrl != null)
                    {
                        <MudButton OnClick="DeleteAvatar" id="deleteAvatarBtn" Color="Color.Error">Delete Picture</MudButton>
                    }
                    else
                    {
                        <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                        <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload">Change Picture</MudButton>
                    }
                </MudCardActions>
            </MudCard>
            <MudItem xs="12" Class="d-flex justify-center py-2 px-1 mt-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="isProcessing" OnClick="@(async () => await Save())" id="SaveButton">Save Changes</MudButton>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6 scrollable-tab-content" id="tabs">
                <MudTabPanel Text="General">
                    <MudExpansionPanels MultiExpansion="true" id="general">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Details" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Details</MudText></TitleContent>
                                    <ChildContent>
                                        <MudGrid>
                                            <MudItem xs="12" md="6">
                                                <MudTextField id="@nameof(Model.Name)" @bind-Value="@Model.Name" For="@(() => Model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                                            </MudItem>
                                            <MudItem xs="12" md="6">
                                                <MudTextField id="@nameof(Model.Description)" @bind-Value="@Model.Description" For="@(() => Model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                                            </MudItem>

                                        </MudGrid>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="System Modules" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">System Modules</MudText></TitleContent>
                                    <ChildContent>
                                        <MudItem xs="12">
                                            <MudTable Items="Model.SystemModules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                <ColGroup>
                                                    <col style="width: 15%;" />
                                                    <col style="width: 50%;" />
                                                    <col style="width: 10%;" />
                                                </ColGroup>

                                                <HeaderContent>
                                                    <MudTh Style="text-align: center">Module name</MudTh>
                                                    <MudTh Style="text-align: center">Image URI</MudTh>
                                                    <MudTh Style="text-align: center">Detail</MudTh>
                                                </HeaderContent>

                                                <RowTemplate Context="sysModule">
                                                    <MudTd DataLabel="System module Name" Style="word-break: break-all;">
                                                        <MudTextField id=@nameof(EdgeModelSystemModule.Name) @bind-Value="@sysModule.Name" Margin="Margin.Dense" Label="Module name" For="@(() => sysModule.Name )" Variant="Variant.Outlined" Disabled />
                                                    </MudTd>
                                                    <MudTd DataLabel="System module Image URI" Style="word-break: break-all;">
                                                        <MudTextField id=@nameof(EdgeModelSystemModule.ImageUri) @bind-Value="@sysModule.ImageUri" Margin="Margin.Dense" Label="Image URI" For="@(() => sysModule.ImageUri )" Variant="Variant.Outlined" />
                                                    </MudTd>
                                                    <MudTd DataLabel="See detail" Style="text-align: center;">
                                                        <MudButton Variant="Variant.Filled" id="@("editSystModuleButton_"+sysModule.Name)" OnClick="@(async () => await ShowSystemModuleDetail(sysModule))">Detail</MudButton>
                                                    </MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        </MudItem>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Modules" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Modules</MudText></TitleContent>
                                    <ChildContent>
                                        <MudItem xs="12">
                                            <MudTable Items="@edgeModules" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                <ColGroup>
                                                    <col style="width: 30%;" />
                                                    <col style="width: 40%;" />
                                                    <col style="width: 10%;" />
                                                    <col style="width: 5%;" />
                                                </ColGroup>
                                                <HeaderContent>
                                                    <MudTh Style="text-align: center">Module name</MudTh>
                                                    <MudTh Style="text-align: center">Image URI</MudTh>
                                                    <MudTh Style="text-align: center">See detail</MudTh>
                                                    <MudTh Style="text-align: center">Delete</MudTh>
                                                </HeaderContent>
                                                <RowTemplate Context="moduleContext">
                                                    <MudTd DataLabel="module Name" Style="word-break: break-all;">
                                                        <MudTextField id="@(nameof(IoTEdgeModule.ModuleName))" @bind-Value="@moduleContext.ModuleName" Margin="Margin.Dense" Label="Module name" For="@(() => moduleContext.ModuleName )" Variant="Variant.Outlined" Required="true"></MudTextField>
                                                    </MudTd>
                                                    <MudTd DataLabel="module Image URI" Style="word-break: break-all;">
                                                        <MudTextField id="@(nameof(IoTEdgeModule.ImageURI))" @bind-Value="@moduleContext.ImageURI" Margin="Margin.Dense" Label="Image URI" For="@(() => moduleContext.ImageURI )" Variant="Variant.Outlined" Required="true" />
                                                    </MudTd>
                                                    <MudTd DataLabel="See detail" Style="text-align: center;">
                                                        <MudButton Variant="Variant.Filled" id="editButton" OnClick="@(async () => await ShowAddEdgeModuleDialog(moduleContext))">Detail</MudButton>
                                                    </MudTd>
                                                    <MudTd DataLabel="Delete" Style="text-align: center">
                                                        <MudIconButton Class="deleteModuleButton" Color="Color.Default" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" OnClick="@(() => DeleteModule(moduleContext))"></MudIconButton>
                                                    </MudTd>
                                                </RowTemplate>
                                                <FooterContent>
                                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" id="addModuleButton" OnClick="AddModule">Add new module</MudButton>
                                                </FooterContent>
                                            </MudTable>
                                        </MudItem>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Routes" IsInitiallyExpanded="true">
                                    <TitleContent><MudText Typo="Typo.h6">Routes</MudText></TitleContent>
                                    <ChildContent>
                                        <MudItem xs="12">
                                            <MudTable Items="@Model.EdgeRoutes" Dense=true Hover=true Bordered=true Striped=true Elevation=0>
                                                <ColGroup>
                                                    <col style="width: 20%;" />
                                                    <col style="width: 20%;" />
                                                    <col style="width: 10%;" />
                                                    <col style="width: 10%;" />
                                                    <col style="width: 5%;" />
                                                </ColGroup>
                                                <HeaderContent>
                                                    <MudTh Style="text-align: center">Name</MudTh>
                                                    <MudTh Style="text-align: center">Value</MudTh>
                                                    <MudTh Style="text-align: center">Priority</MudTh>
                                                    <MudTh Style="text-align: center">Time To Live (Secs)</MudTh>
                                                    <MudTh Style="text-align: center">Delete</MudTh>
                                                </HeaderContent>
                                                <RowTemplate Context="RouteContext">
                                                    <MudTd DataLabel="Name" Style="word-break: break-all;">
                                                        <MudTextField id="@(nameof(IoTEdgeRoute.Name))" @bind-Value="@RouteContext.Name" Margin="Margin.Dense" Label="Name" For="@(() => RouteContext.Name )" Variant="Variant.Outlined" Required="true"></MudTextField>
                                                    </MudTd>
                                                    <MudTd DataLabel="Value" Style="word-break: break-all;">
                                                        <MudTextField id="@(nameof(IoTEdgeRoute.Value))" @bind-Value="@RouteContext.Value" Margin="Margin.Dense" Label="Value" For="@(() => RouteContext.Value )" Variant="Variant.Outlined" Required="true" />
                                                    </MudTd>
                                                    <MudTd DataLabel="Priority" Style="text-align: center;">
                                                        <MudNumericField @bind-Value="@RouteContext.Priority" Label="Priority" For="@(() => RouteContext.Priority)" Variant="Variant.Outlined"></MudNumericField>
                                                    </MudTd>
                                                    <MudTd DataLabel="Time To Live (Secs)" Style="text-align: center;">
                                                        <MudNumericField @bind-Value="@RouteContext.TimeToLive" Label="TTL" For="@(() => RouteContext.TimeToLive)" Variant="Variant.Outlined"></MudNumericField>
                                                    </MudTd>
                                                    <MudTd DataLabel="Delete" Style="text-align: center">
                                                        <MudIconButton Color="Color.Default" Class="deleteRouteButton" OnClick="( () => DeleteRoute(RouteContext))" Icon="@Icons.Material.Filled.Delete" Size="Size.Medium"></MudIconButton>
                                                    </MudTd>
                                                </RowTemplate>
                                                <FooterContent>
                                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" id="addRouteButton" OnClick="AddRoute" Color="Color.Success">Add new route</MudButton>
                                                </FooterContent>
                                            </MudTable>
                                        </MudItem>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudExpansionPanel Text="Labels">
                                    <TitleContent><MudText Typo="Typo.h6">Labels</MudText></TitleContent>
                                    <ChildContent>
                                        <LabelsEditor Labels="Model.Labels" />
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudItem>
                        </MudGrid>

                    </MudExpansionPanels>
                </MudTabPanel>

            </MudTabs>
        </MudItem>
    </MudGrid>

</MudForm>

@code {
    [CascadingParameter]
    public Error Error { get; set; }

    readonly DialogOptions maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    public List<IoTEdgeModule> edgeModules { get; set; } = new List<IoTEdgeModule>();

    public EdgeModelValidator edgeModelValidator = new EdgeModelValidator();
    public IoTEdgeModuleValidator edgeModuleValidator = new IoTEdgeModuleValidator();
    public IoTEdgeRouteValidator edgeRouteValidator = new IoTEdgeRouteValidator();

    private MudForm form;
    private bool isProcessing;

    private IoTEdgeModel Model = new IoTEdgeModel()
        {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private MultipartFormDataContent content;
    private string imageDataUrl;

    private void DeleteAvatar()
    {
        content = null;
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private void AddModule()
    {
        edgeModules.Add(new IoTEdgeModule());
    }

    private async Task ShowAddEdgeModuleDialog(IoTEdgeModule module)
    {
        var parameters = new DialogParameters();
        parameters.Add("module", module);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        if (!string.IsNullOrWhiteSpace(module.ModuleName))
        {
            var result = await DialogService.Show<ModuleDialog>(module.ModuleName, parameters, options).Result;

            if (result.Cancelled)
            {
                return;
            }
        }
    }

    private async Task ShowSystemModuleDetail(EdgeModelSystemModule systemModule)
    {
        var parameters = new DialogParameters();
        parameters.Add("module", systemModule);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

        var result = await DialogService.Show<SystemModuleDialog>(systemModule.Name, parameters, options).Result;

        if (result.Cancelled)
        {
            return;
        }
    }

    private async Task Save()
    {
        isProcessing = true;

        // Displays validation error message for each field
        await form.Validate();

        if (!edgeModelValidator.Validate(Model).IsValid)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);

            isProcessing = false;

            return;
        }

        if (edgeModules.Any() && !edgeModuleValidator.Validate(edgeModules).IsValid)
        {
            Snackbar.Add("One or more validation errors occurred with the module.", Severity.Error);

            isProcessing = false;

            return;
        }

        if (Model.EdgeRoutes.Any() && !edgeRouteValidator.Validate(Model.EdgeRoutes).IsValid)
        {

            Snackbar.Add("One or more validation errors occured with the routes.", Severity.Error);

            isProcessing = false;

            return;
        }

        try
        {
            this.Model.EdgeModules = edgeModules;

            await EdgeModelService.CreateIoTEdgeModel(Model);

            if (content is not null)
            {
                await EdgeModelService.ChangeAvatar(Model.ModelId, content);
            }

            this.Snackbar.Add("Device model successfully created.", Severity.Success);
            this.NavigationManager.NavigateTo("/edge/models");
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void DeleteModule(IoTEdgeModule module)
    {
        edgeModules.Remove(module);
    }

    private void DeleteRoute(IoTEdgeRoute route)
    {
        Model.EdgeRoutes.Remove(route);
    }

    private void AddRoute()
    {
        var last = Model.EdgeRoutes.LastOrDefault();

        if (Model.EdgeRoutes.Count == 0 || (last.Name is not null && last.Value is not null))
        {
            Model.EdgeRoutes.Add(new IoTEdgeRoute());
        }
    }
}
