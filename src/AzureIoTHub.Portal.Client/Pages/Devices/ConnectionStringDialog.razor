@using AzureIoTHub.Portal.Models.v10
@using AzureIoTHub.Portal.Shared.Models.v10

@inject ClipboardService ClipboardService
@inject IDeviceClientService DeviceClientService

<div class="ConnectionString-dialog">
    <MudDialog>
        <DialogContent>
            <MudCard Outlined="true">
                <MudCardContent>
                    <MudGrid>
                        @if (credentials.AuthenticationMode != null && AuthenticationMode.SymmetricKey.Equals(credentials.AuthenticationMode))
                        {
                            @if (credentials.SymmetricCredentials != null)
                            {
                                <MudItem xs="12">
                                    <MudText Style="text-decoration:underline"><b>Service Endpoint</b></MudText>
                                    <MudTextField @bind-Value="@credentials.SymmetricCredentials.ProvisioningEndpoint" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.SymmetricCredentials.ProvisioningEndpoint))"/>
                                </MudItem>
                                <MudItem Class="mt-0" xs="12">
                                    <MudText Style="text-decoration:underline"><b>Registration Id</b></MudText>
                                    <MudTextField @bind-Value="@credentials.SymmetricCredentials.RegistrationID" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.SymmetricCredentials.RegistrationID))"/>
                                </MudItem>
                                <MudItem Class="mt-0" xs="12">
                                    <MudText Style="text-decoration:underline"><b>Scope Id</b></MudText>
                                    <MudTextField @bind-Value="@credentials.SymmetricCredentials.ScopeID" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.SymmetricCredentials.ScopeID))"/>
                                </MudItem>
                                <MudItem Class="mt-0" xs="12">
                                    <MudText Style="text-decoration:underline"><b>Symmetric Key</b></MudText>
                                    <MudTextField @bind-Value="@credentials.SymmetricCredentials.SymmetricKey" Variant="Variant.Text" InputType="InputType.Password" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.SymmetricCredentials.SymmetricKey))"/>
                                </MudItem>
                            }
                        }
                        else
                        {
                            @if (credentials.CertificateCredentials != null)
                            {
                                <MudItem xs="12">
                                    <MudText Style="text-decoration:underline"><b>Certificate Pem</b></MudText>
                                    <MudTextField @bind-Value="@credentials.CertificateCredentials.CertificatePem" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.CertificateCredentials.CertificatePem))"/>
                                </MudItem>
                                <MudItem Class="mt-0" xs="12">
                                    <MudText Style="text-decoration:underline"><b>Public Key</b></MudText>
                                    <MudTextField @bind-Value="@credentials.CertificateCredentials.PublicKey" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.CertificateCredentials.PublicKey))"/>
                                </MudItem>
                                <MudItem Class="mt-0" xs="12">
                                    <MudText Style="text-decoration:underline"><b>Private Key</b></MudText>
                                    <MudTextField @bind-Value="@credentials.CertificateCredentials.PrivateKey" Class="mt-0" Variant="Variant.Text" Margin="Margin.Dense" ReadOnly="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.ContentCopy" OnAdornmentClick="@(() => ClipboardService.WriteTextAsync(credentials.CertificateCredentials.PrivateKey))"/>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</div>

@code {
    [CascadingParameter]
    public Error Error { get; set; } = default!;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public string deviceId { get; set; } = default!;
    private DeviceCredentials credentials = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();

            credentials = await DeviceClientService.GetEnrollmentCredentials(deviceId);
        }
        catch (ProblemDetailsException exception)
        {
            Error?.ProcessProblemDetails(exception);
            MudDialog.Close();
        }
    }

    void Cancel() => MudDialog.Cancel();
}
